------------------------------------------------------------------------------
FGL - Functional Graph Library, Version: January 2004
------------------------------------------------------------------------------


CONTENTS
  A. CONTENTS
  B. INSTALLATION
  C. CREDITS
  D. CONTACT


------------------------------------------------------------------------------

A. CONTENTS

In addition to the files doc/README, doc/COPYRIGHT, doc/CHANGES, src/Makefile,
and src/fgl.pkg, this distribution consists of the following 28 Haskell files.

(A) These files define inductive graphs and basic operations:

  src/Data/Graph/Inductive.hs		    - Main module
  src/Data/Graph/Inductive/Graph.hs	    - Static and dynamic graph classes,
					      derived types & operations
  src/Data/Graph/Inductive/Tree.hs	    - Dynamic graph implementation
  src/Data/Graph/Inductive/Basic.hs	    - Basic graph operations (gmap,
					      grev, ...)
  src/Data/Graph/Inductive/NodeMap.hs	    - Automatic generation of Nodes
					      from labels.
  src/Data/Graph/Inductive/Graphviz.hs	    - Graphviz output.
  src/Data/Graph/Inductive/Monad/Monad.hs   - Monadic (static) graph class
					      based on balanced search trees
  src/Data/Graph/Inductive/Monad/IOArray.hs - Static graph implementation based
					      on IO Arrays


(B) Example graphs:

  src/Data/Graph/Inductive/Example.hs	    - Example graphs
 

(C) Implementation of graph algorithms:

  src/Data/Graph/Inductive/Query.hs		- Main query module
  src/Data/Graph/Inductive/Query/DFS.hs         - Depth-first search and
						  derived operations (topsort,
						  scc, ...)
  src/Data/Graph/Inductive/Query/BFS.hs         - Breadth-first search and
						  "edge" shortest paths
  src/Data/Graph/Inductive/Query/SP.hs          - Shortest paths (Dijkstra's
						  algorithm)
  src/Data/Graph/Inductive/Query/GVD.hs         - Graph voronoi diagram
  src/Data/Graph/Inductive/Query/MST.hs         - Minimum spanning tree (Prim's
						  algorithm)
  src/Data/Graph/Inductive/Query/Indep.hs       - Independent node sets
  src/Data/Graph/Inductive/Query/MaxFlow.hs     - Edmonds/Karp maximum flow
						  algorithm
  src/Data/Graph/Inductive/Query/MaxFlow2.hs    - Alternative implementations
						  of the Edmonds/Karp algorithm
  src/Data/Graph/Inductive/Query/ArtPoint.hs    - Articulation points
  src/Data/Graph/Inductive/Query/BCC.hs         - Biconnected components
  src/Data/Graph/Inductive/Query/Dominators.hs  - Dominators
  src/Data/Graph/Inductive/Query/TransClos.hs   - Transitive closure
  src/Data/Graph/Inductive/Query/Monad.hs	- Graph transformer monad and
						  monadic graph algorithms
 

(D) Some auxiliary modules:

  src/Data/Graph/Inductive/Aux/RootPath.hs    - Inward-directed trees
  src/Data/Graph/Inductive/Aux/Heap.hs        - Pairing heaps 
  src/Data/Graph/Inductive/Aux/Queue.hs       - Amortized O(1) queue
						implementation 
  src/Data/Graph/Inductive/Aux/FiniteMap.hs   - Binary-search-tree
						implementation of maps
  src/Data/Graph/Inductive/Aux/Thread.hs      - Auxiliary module used in Graph
						(subject to future change)
  

------------------------------------------------------------------------------

B. INSTALLATION

B.1 GHC

    1. Change to the "src" directory.

    2. Edit the makefile to change the installation directory, if needed.

    3. Run "make".  This produces libHSfgl.a and HSfgl.o, as well as the
       associated .hi files.

    4. Run "make install", possibly as root.  This installs the library as a ghc
       package.

    5. Run the test program: "ghci test/test.hs"


B.2 Hugs

    1. Copy the sources to the Hugs Data subdirectory of the hierarchical
       library directory (change "/usr/local" to the appropriate 
       directory prefix of your installation):

         cp -R Graph /usr/local/lib/hugs/libraries/Data

    2. Start Hugs: "hugs -98 +o"
     
    3. Load the FGL: ":l Data.Graph.Inductive.Example"

    4. Play with it, e.g., enter: "sp 1 3 clr528"


------------------------------------------------------------------------------

C. CREDITS

I am grateful to many people who have helped me with bug reports, questions,
comments, and implementations to improve the FGL. In particular, I would like
to thank Martin Boehme, Luis Zeron, and Hal Daume for their contributions.
Moreover, I would like to thank Abe Egnor and Isaac Jones at Aetion
Technologies who refactored the modules into the new hierarchical name space
and who have added two modules (see also the file CHANGES).


------------------------------------------------------------------------------

D. BUG REPORTS, QUESTIONS, SUGGESTIONS, ...

Please email comments, bug reports, etc. to erwig@cs.orst.edu


