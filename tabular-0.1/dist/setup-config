LocalBuildInfo {installDirTemplates = InstallDirTemplates {prefixDirTemplate = "/home/till/.ghc/i686-Linux-hets-packages", binDirTemplate = "$prefix/bin", libDirTemplate = "$prefix/lib", libSubdirTemplate = "$pkgid/$compiler", libexecDirTemplate = "$prefix/libexec", progDirTemplate = "$libdir/hugs/programs", includeDirTemplate = "$libdir/$libsubdir/include", dataDirTemplate = "$prefix/share", dataSubdirTemplate = "$pkgid", docDirTemplate = "$datadir/doc/$pkgid", htmlDirTemplate = "$docdir/html", interfaceDirTemplate = "$docdir/html"}, compiler = Compiler {compilerFlavor = GHC, compilerId = PackageIdentifier {pkgName = "ghc", pkgVersion = Version {versionBranch = [6,8,3], versionTags = []}}, compilerExtensions = [(CPP,"-XCPP"),(PatternGuards,"-XPatternGuards"),(UnicodeSyntax,"-XUnicodeSyntax"),(MagicHash,"-XMagicHash"),(PolymorphicComponents,"-XPolymorphicComponents"),(ExistentialQuantification,"-XExistentialQuantification"),(KindSignatures,"-XKindSignatures"),(PatternSignatures,"-XPatternSignatures"),(EmptyDataDecls,"-XEmptyDataDecls"),(ParallelListComp,"-XParallelListComp"),(ForeignFunctionInterface,"-XForeignFunctionInterface"),(UnliftedFFITypes,"-XUnliftedFFITypes"),(LiberalTypeSynonyms,"-XLiberalTypeSynonyms"),(Rank2Types,"-XRank2Types"),(RankNTypes,"-XRankNTypes"),(TypeOperators,"-XTypeOperators"),(RecursiveDo,"-XRecursiveDo"),(Arrows,"-XArrows"),(TemplateHaskell,"-XTemplateHaskell"),(Generics,"-XGenerics"),(NoImplicitPrelude,"-XNoImplicitPrelude"),(RecordWildCards,"-XRecordWildCards"),(RecordPuns,"-XRecordPuns"),(DisambiguateRecordFields,"-XDisambiguateRecordFields"),(OverloadedStrings,"-XOverloadedStrings"),(GADTs,"-XGADTs"),(TypeFamilies,"-XTypeFamilies"),(BangPatterns,"-XBangPatterns"),(NoMonomorphismRestriction,"-XNoMonomorphismRestriction"),(NoMonoPatBinds,"-XNoMonoPatBinds"),(RelaxedPolyRec,"-XRelaxedPolyRec"),(ExtendedDefaultRules,"-XExtendedDefaultRules"),(ImplicitParams,"-XImplicitParams"),(ScopedTypeVariables,"-XScopedTypeVariables"),(UnboxedTuples,"-XUnboxedTuples"),(StandaloneDeriving,"-XStandaloneDeriving"),(DeriveDataTypeable,"-XDeriveDataTypeable"),(TypeSynonymInstances,"-XTypeSynonymInstances"),(FlexibleContexts,"-XFlexibleContexts"),(FlexibleInstances,"-XFlexibleInstances"),(ConstrainedClassMethods,"-XConstrainedClassMethods"),(MultiParamTypeClasses,"-XMultiParamTypeClasses"),(FunctionalDependencies,"-XFunctionalDependencies"),(GeneralizedNewtypeDeriving,"-XGeneralizedNewtypeDeriving"),(OverlappingInstances,"-XOverlappingInstances"),(UndecidableInstances,"-XUndecidableInstances"),(IncoherentInstances,"-XIncoherentInstances")]}, buildDir = "dist/build", scratchDir = "dist/scratch", packageDeps = [PackageIdentifier {pkgName = "base", pkgVersion = Version {versionBranch = [3,0,2,0], versionTags = []}},PackageIdentifier {pkgName = "mtl", pkgVersion = Version {versionBranch = [1,1,0,1], versionTags = []}},PackageIdentifier {pkgName = "html", pkgVersion = Version {versionBranch = [1,0,1,1], versionTags = []}}], pkgDescrFile = Just "tabular.cabal", localPkgDescr = PackageDescription {package = PackageIdentifier {pkgName = "tabular", pkgVersion = Version {versionBranch = [0,1], versionTags = []}}, license = BSD3, licenseFile = "LICENSE", copyright = "", maintainer = "<E.Y.Kow@brighton.ac.uk>", author = "Eric Kow", stability = "", testedWith = [], homepage = "http://code.haskell.org/~kowey/tabular", pkgUrl = "", synopsis = "Two-dimensional data tables with rendering functions", description = "Tabular provides a Haskell representation of two-dimensional\ndata tables, the kind that you might find in a spreadsheet or\nor a research report.  It also comes with some default\nrendering functions for turning those tables into ASCII art,\nHTML or LaTeX.\n\nBelow is an example of the kind of output this library produces.\nThe tabular package can group rows and columns, each group\nhaving one of three separators (no line, single line, double line)\nbetween its members.\n\n>     || memtest 1 | memtest 2 ||  time test  | time test 2\n> ====++===========+===========++=============+============\n> A 1 ||       hog |  terrible ||        slow |      slower\n> A 2 ||       pig |   not bad ||        fast |     slowest\n> ----++-----------+-----------++-------------+------------\n> B 1 ||      good |     awful || intolerable |    bearable\n> B 2 ||    better | no chance ||    crawling |     amazing\n> B 3 ||       meh |   well... ||  worst ever |          ok", category = "Text", buildDepends = [Dependency "base" (IntersectVersionRanges (UnionVersionRanges (ThisVersion (Version {versionBranch = [2,1], versionTags = []})) (LaterVersion (Version {versionBranch = [2,1], versionTags = []}))) (EarlierVersion (Version {versionBranch = [3,1], versionTags = []}))),Dependency "mtl" (IntersectVersionRanges (UnionVersionRanges (ThisVersion (Version {versionBranch = [1], versionTags = []})) (LaterVersion (Version {versionBranch = [1], versionTags = []}))) (EarlierVersion (Version {versionBranch = [1,2], versionTags = []}))),Dependency "html" (IntersectVersionRanges (UnionVersionRanges (ThisVersion (Version {versionBranch = [1,0], versionTags = []})) (LaterVersion (Version {versionBranch = [1,0], versionTags = []}))) (EarlierVersion (Version {versionBranch = [2,0], versionTags = []})))], descCabalVersion = AnyVersion, buildType = Simple, library = Just (Library {exposedModules = ["Text.Tabular","Text.Tabular.AsciiArt","Text.Tabular.Html","Text.Tabular.Latex"], libBuildInfo = BuildInfo {buildable = True, buildTools = [], cppOptions = [], ccOptions = [], ldOptions = [], pkgconfigDepends = [], frameworks = [], cSources = [], hsSourceDirs = ["."], otherModules = [], extensions = [], extraLibs = [], extraLibDirs = [], includeDirs = [], includes = [], installIncludes = [], options = [(GHC,[])], ghcProfOptions = [], ghcSharedOptions = []}}), executables = [], dataFiles = ["example/sample1.hs","example/sample1.tex"], extraSrcFiles = [], extraTmpFiles = []}, withPrograms = [("alex",ConfiguredProgram {programId = "alex", programVersion = Just (Version {versionBranch = [2,2], versionTags = []}), programArgs = [], programLocation = FoundOnSystem {locationPath = "/home/linux-bkb/bin/alex"}}),("ar",ConfiguredProgram {programId = "ar", programVersion = Nothing, programArgs = [], programLocation = FoundOnSystem {locationPath = "/usr/bin/ar"}}),("cpphs",ConfiguredProgram {programId = "cpphs", programVersion = Just (Version {versionBranch = [1,1], versionTags = []}), programArgs = [], programLocation = FoundOnSystem {locationPath = "/home/linux-bkb/bin/cpphs"}}),("ffihugs",ConfiguredProgram {programId = "ffihugs", programVersion = Nothing, programArgs = [], programLocation = FoundOnSystem {locationPath = "/home/linux-bkb/bin/ffihugs"}}),("ghc",ConfiguredProgram {programId = "ghc", programVersion = Just (Version {versionBranch = [6,8,3], versionTags = []}), programArgs = [], programLocation = FoundOnSystem {locationPath = "/home/linux-bkb/bin/ghc"}}),("ghc-pkg",ConfiguredProgram {programId = "ghc-pkg", programVersion = Just (Version {versionBranch = [6,8,3], versionTags = []}), programArgs = [], programLocation = FoundOnSystem {locationPath = "/home/linux-bkb/bin/ghc-pkg"}}),("haddock",ConfiguredProgram {programId = "haddock", programVersion = Just (Version {versionBranch = [0,8], versionTags = []}), programArgs = [], programLocation = FoundOnSystem {locationPath = "/home/linux-bkb/bin/haddock"}}),("happy",ConfiguredProgram {programId = "happy", programVersion = Just (Version {versionBranch = [1,17], versionTags = []}), programArgs = [], programLocation = FoundOnSystem {locationPath = "/home/linux-bkb/bin/happy"}}),("hmake",ConfiguredProgram {programId = "hmake", programVersion = Just (Version {versionBranch = [3,10], versionTags = []}), programArgs = [], programLocation = FoundOnSystem {locationPath = "/home/linux-bkb/bin/hmake"}}),("hsc2hs",ConfiguredProgram {programId = "hsc2hs", programVersion = Just (Version {versionBranch = [0,66], versionTags = ["ghc"]}), programArgs = [], programLocation = FoundOnSystem {locationPath = "/home/linux-bkb/bin/hsc2hs"}}),("hugs",ConfiguredProgram {programId = "hugs", programVersion = Nothing, programArgs = [], programLocation = FoundOnSystem {locationPath = "/home/linux-bkb/bin/hugs"}}),("ld",ConfiguredProgram {programId = "ld", programVersion = Nothing, programArgs = ["-x"], programLocation = FoundOnSystem {locationPath = "/usr/bin/ld"}}),("pkg-config",ConfiguredProgram {programId = "pkg-config", programVersion = Just (Version {versionBranch = [0,22], versionTags = []}), programArgs = [], programLocation = FoundOnSystem {locationPath = "/usr/bin/pkg-config"}}),("ranlib",ConfiguredProgram {programId = "ranlib", programVersion = Nothing, programArgs = [], programLocation = FoundOnSystem {locationPath = "/usr/bin/ranlib"}}),("tar",ConfiguredProgram {programId = "tar", programVersion = Nothing, programArgs = [], programLocation = FoundOnSystem {locationPath = "/bin/tar"}})], withPackageDB = UserPackageDB, withVanillaLib = True, withProfLib = False, withSharedLib = False, withProfExe = False, withOptimization = True, withGHCiLib = True, splitObjs = False}