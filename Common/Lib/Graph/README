------------------------------------------------------------------------------
FGL - Functional Graph Library, Version: September 2002
------------------------------------------------------------------------------

CONTENTS
  A. FILES
  B. INSTALLATION
  C. CREDITS
  D. CONTACT


------------------------------------------------------------------------------

A. CONTENTS

In addition to the files README, COPYRIGHT, and CHANGES, this distribution 
consists of the following 26 Haskell files. [6+1+13+6]


(A) These files define inductive graphs and basic operations:

  FGL.hs         - Main module     
  Graph.hs       - Static and dynamic graph classes, derived types & operations
  GraphM.hs      - Monadic (static) graph class
  TreeGraph.hs   - Dynamic graph implementation based on balanced search trees
  IOArrGraph.hs  - Static graph implementation based on IO Arrays
  Basic.hs       - Basic graph operations (gmap, grev, ...)


(B) Example graphs:

  GraphData.hs   - Example graphs
 

(C) Implementation of graph algorithms:

  DFS.hs         - Depth-first search and derived operations (topsort, scc, ...)
  BFS.hs         - Breadth-first search and "edge" shortest paths
  SP.hs          - Shortest paths (Dijkstra's algorithm)
  GVD.hs         - Graph voronoi diagram
  MST.hs         - Minimum spanning tree (Prim's algorithm)
  Indep.hs       - Independent node sets
  MaxFlow.hs     - Edmonds/Karp maximum flow algorithm
  MaxFlow2.hs    - Alternative implementations of the Edmonds/Karp algorithm
  ArtPoint.hs    - Articulation points
  BCC.hs         - Biconnected components
  Dominators.hs  - Dominators
  TransClos.hs   - Transitive closure
  MonadicGrAl.hs - Graph transformer monad and monadic graph algorithms
 

(D) Some auxiliary modules:

  RootPath.hs    - Inward-directed trees
  RoseTree.hs    - Multi-way Trees
  Heap.hs        - Pairing heaps 
  Queue.hs       - Amortized O(1) queue implementation 
  SimpleMap.hs   - Binary -search-tree implementation of maps 
  Thread.hs      - Auxiliary module used in Graph (subject to future change)
  
(From the Haskell library the modules Maybe and List are used. Thus, you 
should take care that these modules can be found by hugs.)


------------------------------------------------------------------------------

B. INSTALLATION

1. Copy all files to a directory where hugs or ghc can find them.

2. (a) Start hugs with the following options: -98 +o +I
       [The +I flag is needed when you use the implementations 
        from IOArrGraph.hs]
       [I have (partially) tested the programs with 
        Hugs 98, Version: December 2001]   
  OR:
   (b) Start ghci with the following flags: 
       -fglasgow-exts -fallow-overlapping-instances -package lang

3. Load FGL.hs

4. Play with it, eg, enter "sp 1 3 clr528" ...


------------------------------------------------------------------------------

C. CREDITS

I am grateful to many people who have helped me with bug reports, questions,
comments, and implementations to improve the FGL. In particular, I would like
to thank Martin Boehme, Luis Zeron, and Hal Daume for their contributions.


------------------------------------------------------------------------------

D. BUG REPORTS, QUESTIONS, SUGGESTIONS, ...

Please email comments, bugs, etc. to erwig@cs.orst.edu



--
Martin
