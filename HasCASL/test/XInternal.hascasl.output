internal {type s, t; fun o, q : s -> t;
          . (fun __=__[s -> t] : forall a : Type . a * a ->? Unit)
              (fun o : s -> t, fun q : s -> t)}
%% Type Constructors -----------------------------------------------------
Pred : Type -> Type := \ a : Type . a ->? Unit
Unit : Type := Unit
__*__ : Type+ -> Type+ -> Type
__-->__ : Type- -> Type+ -> Type
__-->?__ : Type- -> Type+ -> Type
__->__ : Type- -> Type+ -> Type
__->?__ : Type- -> Type+ -> Type
s : Type
t : Type
%% Assumptions -----------------------------------------------------------
__/\__ : Unit * Unit ->? Unit %(fun)%
__<=>__ : Unit * Unit ->? Unit %(fun)%
__=__ : forall a : Type . a * a ->? Unit %(fun)%
__=>__ : Unit * Unit ->? Unit %(fun)%
__=e=__ : forall a : Type . a * a ->? Unit %(fun)%
__\/__ : Unit * Unit ->? Unit %(fun)%
__if__ : Unit * Unit ->? Unit %(fun)%
__when__else__ : forall a : Type . a * Unit * a ->? a %(fun)%
bottom : forall a : Type . a %(fun)%
def__ : forall a : Type . a ->? Unit %(fun)%
false : Unit %(fun)%
not__ : Unit ->? Unit %(fun)%
o : s -> t %(fun)%
q : s -> t %(fun)%
true : Unit %(fun)%
%% Sentences -------------------------------------------------------------
(fun __=__[s -> t] : forall a : Type . a * a ->? Unit)
  (fun o : s -> t, fun q : s -> t)
