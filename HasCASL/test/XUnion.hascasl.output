var S : Type; N : Type; E : Type
type Set : Type -> Type := \ S : Type . S ->? Unit
type Graph : Type -> Type -> Type := \ (N : Type)
                                       (E : Type) . Set N * (E ->? N) * (E ->? N)
op __union__ : forall E : Type; N : Type .
                 Graph N E * Graph N E -> Graph N E;
   __union__, __intersection__, __\\__ : forall S : Type .
                                           Set S * Set S -> Set S
forall g : Graph N E; g' : Graph N E
. (fun __=__[(N ->? Unit) * (E ->? N) * (E ->? N)]
   : forall a : Type . a * a ->? Unit)
    ((op __union__[E; N]
      : forall E : Type; N : Type . Graph N E * Graph N E -> Graph N E)
       (var g : Graph N E, var g' : Graph N E),
     var g : Graph N E)
%% Type Constructors -----------------------------------------------------
E : Type %(var)%
Graph
  : Type -> Type -> Type
    := \ (N : Type)(E : Type) . Set N * (E ->? N) * (E ->? N)
Logical : Type := Unit ->? Unit
N : Type %(var)%
Pred : Type -> Type := \ a : Type . a ->? Unit
S : Type %(var)%
Set : Type -> Type := \ S : Type . S ->? Unit
Unit : Type := Unit
__*__ : Type+ -> Type+ -> Type
__-->__ : Type- -> Type+ -> Type
__-->?__ : Type- -> Type+ -> Type
__->__ : Type- -> Type+ -> Type
__->?__ : Type- -> Type+ -> Type
%% Assumptions -----------------------------------------------------------
__/\__ : Unit * Unit ->? Unit %(fun)%
__<=>__ : Unit * Unit ->? Unit %(fun)%
__=__ : forall a : Type . a * a ->? Unit %(fun)%
__=>__ : Unit * Unit ->? Unit %(fun)%
__=e=__ : forall a : Type . a * a ->? Unit %(fun)%
__\/__ : Unit * Unit ->? Unit %(fun)%
__\\__ : forall S : Type . Set S * Set S -> Set S %(op)%
__if__ : Unit * Unit ->? Unit %(fun)%
__intersection__ : forall S : Type . Set S * Set S -> Set S %(op)%
__union__
  : forall S : Type . Set S * Set S -> Set S %(op)%
  : forall E : Type; N : Type . Graph N E * Graph N E -> Graph N E
    %(op)%
__when__else__ : forall a : Type . a * Unit * a ->? a %(fun)%
bottom : forall a : Type . a %(fun)%
def__ : forall a : Type . a ->? Unit %(fun)%
false : Unit %(fun)%
not__ : Unit ->? Unit %(fun)%
true : Unit %(fun)%
¬__ : Unit ->? Unit %(fun)%
%% Sentences -------------------------------------------------------------
(fun __=__[(N ->? Unit) * (E ->? N) * (E ->? N)]
 : forall a : Type . a * a ->? Unit)
  ((op __union__[E; N]
    : forall E : Type; N : Type . Graph N E * Graph N E -> Graph N E)
     (var g : Graph N E, var g' : Graph N E),
   var g : Graph N E)
%% Diagnostics -----------------------------------------------------------
*** Hint 1.7, is type variable 'S'
*** Hint 1.9, is type variable 'N'
*** Hint 1.11, is type variable 'E'
*** Hint 9.6, no type match for: g
  with type: '_var_6 ->? Unit' (6.51)
  known types:
    'Graph N E'
