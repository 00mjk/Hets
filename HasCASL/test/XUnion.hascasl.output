var S : Type; N : Type; E : Type
type Set : Type -> Type := \ S : Type . S_v-1 ->? Unit
type Graph : Type -> Type -> Type := \ (N : Type)
                                       (E : Type) . Set N_v-1@(N_v-1 ->? Unit) * (E_v-2 ->? N_v-1) *
                                                    (E_v-2 ->? N_v-1)
op __union__ : Graph N E * Graph N E -> Graph N E;
   __union__, __intersection__, __\\__ : Set S * Set S -> Set S
forall g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N));
       g' : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))
. ((fun __=__[(N ->? Unit) * (E ->? N) * (E ->? N)]
    : forall a : Type . a_v-1 * a_v-1 ->? Unit) :
       ((N ->? Unit) * (E ->? N) * (E ->? N)) *
       ((N ->? Unit) * (E ->? N) * (E ->? N)) ->? Unit)
    (((op __union__[N; E]
       : forall N : Type; E : Type .
           Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) * (E_v-2 ->? N_v-1) *
                              (E_v-2 ->? N_v-1)) *
           Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) * (E_v-2 ->? N_v-1) *
                              (E_v-2 ->? N_v-1)) -> Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) *
                                                                       (E_v-2 ->? N_v-1) *
                                                                       (E_v-2 ->? N_v-1))) :
          Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)) *
          Graph N E@(Set N@(N ->? Unit) * (E ->? N) *
                     (E ->? N)) -> Graph N E@(Set N@(N ->? Unit) * (E ->? N) *
                                              (E ->? N)))
       (var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)),
        var g' : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))) :
         Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)),
     var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))) :
      Unit
%% Type Constructors -----------------------------------------------------
E : Type %(var_3)%
Graph
  : Type -> Type -> Type
    := \ (N : Type)(E : Type) . Set N_v-1@(N_v-1 ->? Unit) *
                                (E_v-2 ->? N_v-1) * (E_v-2 ->? N_v-1)
Logical : Type := Unit ->? Unit
N : Type %(var_2)%
Pred : Type -> Type := \ a : Type . a_v-1 ->? Unit
S : Type %(var_1)%
Set : Type -> Type := \ S : Type . S_v-1 ->? Unit
Unit : Type
__*__ : Type+ -> Type+ -> Type
__-->__ : Type- -> Type+ -> Type < (__-->?__, __->__)
__-->?__ : Type- -> Type+ -> Type < __->?__
__->__ : Type- -> Type+ -> Type < __->?__
__->?__ : Type- -> Type+ -> Type
%% Assumptions -----------------------------------------------------------
__/\__ : ? Unit * ? Unit ->? Unit %(fun)%
__<=>__ : ? Unit * ? Unit ->? Unit %(fun)%
__=__ : forall a : Type . a_v-1 * a_v-1 ->? Unit %(fun)%
__=>__ : ? Unit * ? Unit ->? Unit %(fun)%
__=e=__ : forall a : Type . a_v-1 * a_v-1 ->? Unit %(fun)%
__\/__ : ? Unit * ? Unit ->? Unit %(fun)%
__\\__
  : forall S : Type .
      Set S_v-1@(S_v-1 ->? Unit) *
      Set S_v-1@(S_v-1 ->? Unit) -> Set S_v-1@(S_v-1 ->? Unit)
    %(op)%
__if__ : ? Unit * ? Unit ->? Unit %(fun)%
__intersection__
  : forall S : Type .
      Set S_v-1@(S_v-1 ->? Unit) *
      Set S_v-1@(S_v-1 ->? Unit) -> Set S_v-1@(S_v-1 ->? Unit)
    %(op)%
__union__
  : forall S : Type .
      Set S_v-1@(S_v-1 ->? Unit) *
      Set S_v-1@(S_v-1 ->? Unit) -> Set S_v-1@(S_v-1 ->? Unit)
    %(op)%
  : forall N : Type; E : Type .
      Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) * (E_v-2 ->? N_v-1) *
                         (E_v-2 ->? N_v-1)) *
      Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) * (E_v-2 ->? N_v-1) *
                         (E_v-2 ->? N_v-1)) -> Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) *
                                                                  (E_v-2 ->? N_v-1) *
                                                                  (E_v-2 ->? N_v-1))
    %(op)%
__when__else__
  : forall a : Type . a_v-1 * ? Unit * a_v-1 ->? a_v-1 %(fun)%
bottom : forall a : Type . a_v-1 %(fun)%
def__ : forall a : Type . a_v-1 ->? Unit %(fun)%
false : Unit %(fun)%
not__ : ? Unit ->? Unit %(fun)%
true : Unit %(fun)%
¬__ : ? Unit ->? Unit %(fun)%
%% Sentences -------------------------------------------------------------
((fun __=__[(N ->? Unit) * (E ->? N) * (E ->? N)]
  : forall a : Type . a_v-1 * a_v-1 ->? Unit) :
     ((N ->? Unit) * (E ->? N) * (E ->? N)) *
     ((N ->? Unit) * (E ->? N) * (E ->? N)) ->? Unit)
  (((op __union__[N; E]
     : forall N : Type; E : Type .
         Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) * (E_v-2 ->? N_v-1) *
                            (E_v-2 ->? N_v-1)) *
         Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) * (E_v-2 ->? N_v-1) *
                            (E_v-2 ->? N_v-1)) -> Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) *
                                                                     (E_v-2 ->? N_v-1) *
                                                                     (E_v-2 ->? N_v-1))) :
        Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)) *
        Graph N E@(Set N@(N ->? Unit) * (E ->? N) *
                   (E ->? N)) -> Graph N E@(Set N@(N ->? Unit) * (E ->? N) *
                                            (E ->? N)))
     (var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)),
      var g' : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))) :
       Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)),
   var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))) :
    Unit
%% Diagnostics -----------------------------------------------------------
*** Hint 1.7, is type variable 'S'
*** Hint 1.9, is type variable 'N'
*** Hint 1.11, is type variable 'E'
*** Hint 9.6, in type of '(var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)),
 var g' : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)))'
  type 'Set N@(N ->? Unit) * (E ->? N) * (E ->? N)' (3.21)
  is not unifiable with type '_var_10_v10 ->? Unit' (6.51)

*** Hint 9.6, in type of '(var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)),
 var g' : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)))'
  type 'Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)) *
Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))' (8.17)
  is not unifiable with type 'Unit ->? Set _var_10_v10@(_var_10_v10 ->? Unit) *
         Set _var_10_v10@(_var_10_v10 ->? Unit)' (6.47)

*** Hint 9.6, in type of '(var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)),
 var g' : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)))'
  type 'Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)) *
Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))' (8.17)
  is not unifiable with type 'Unit ->? Graph _var_11_v11 _var_12_v12@(Set _var_11_v11@(_var_11_v11 ->? Unit) *
                                        (_var_12_v12 ->? _var_11_v11) *
                                        (_var_12_v12 ->? _var_11_v11)) *
         Graph _var_11_v11 _var_12_v12@(Set _var_11_v11@(_var_11_v11 ->? Unit) *
                                        (_var_12_v12 ->? _var_11_v11) *
                                        (_var_12_v12 ->? _var_11_v11))' (5.20)

*** Hint 9.6, in type of '(var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)),
 var g' : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)))'
  type 'Set N@(N ->? Unit) * (E ->? N) * (E ->? N)' (3.21)
  is not unifiable with type '_var_61_v61 ->? Unit' (6.51)

*** Hint 9.6, in type of '(var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)),
 var g' : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)))'
  type 'Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)) *
Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))' (8.17)
  is not unifiable with type 'Unit ->? Set _var_61_v61@(_var_61_v61 ->? Unit) *
         Set _var_61_v61@(_var_61_v61 ->? Unit)' (6.47)

*** Hint 9.6, in type of '(var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)),
 var g' : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)))'
  type 'Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)) *
Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))' (8.17)
  is not unifiable with type 'Unit ->? Graph _var_62_v62 _var_63_v63@(Set _var_62_v62@(_var_62_v62 ->? Unit) *
                                        (_var_63_v63 ->? _var_62_v62) *
                                        (_var_63_v63 ->? _var_62_v62)) *
         Graph _var_62_v62 _var_63_v63@(Set _var_62_v62@(_var_62_v62 ->? Unit) *
                                        (_var_63_v63 ->? _var_62_v62) *
                                        (_var_63_v63 ->? _var_62_v62))' (5.20)

*** Hint 9.8, in type of '(((op __union__[N; _var_63_v63]
   : forall N : Type; E : Type .
       Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) * (E_v-2 ->? N_v-1) *
                          (E_v-2 ->? N_v-1)) *
       Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) * (E_v-2 ->? N_v-1) *
                          (E_v-2 ->? N_v-1)) -> Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) *
                                                                   (E_v-2 ->? N_v-1) *
                                                                   (E_v-2 ->? N_v-1))) :
      Graph N _var_63_v63@(Set N@(N ->? Unit) * (_var_63_v63 ->? N) *
                           (_var_63_v63 ->? N)) *
      Graph N _var_63_v63@(Set N@(N ->? Unit) * (_var_63_v63 ->? N) *
                           (_var_63_v63 ->? N)) -> Graph N _var_63_v63@(Set N@(N ->? Unit) *
                                                                        (_var_63_v63 ->? N) *
                                                                        (_var_63_v63 ->? N)))
   (var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)),
    var g' : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))) :
     Graph N _var_63_v63@(Set N@(N ->? Unit) * (_var_63_v63 ->? N) *
                          (_var_63_v63 ->? N)),
 var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)))'
  type 'Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)) *
Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))' (5.45)
  is not unifiable with type 'Unit ->? _var_5_v5 * _var_5_v5'

