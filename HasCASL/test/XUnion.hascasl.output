var S : Type; N : Type; E : Type
type Set : Type -> Type := \ S : Type . S_v-1 ->? Unit
type Graph : Type -> Type -> Type := \ (N : Type)
                                       (E : Type) . Set N_v-1@(N_v-1 ->? Unit) * (E_v-2 ->? N_v-1) *
                                                    (E_v-2 ->? N_v-1)
op __union__ : Graph N E * Graph N E -> Graph N E;
   __union__, __intersection__, __\\__ : Set S * Set S -> Set S
forall g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N));
       g' : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))
. ((fun __=__[(N ->? Unit) * (E ->? N) * (E ->? N)]
    : forall a : Type . a_v-1 * a_v-1 ->? Unit) :
       ((N ->? Unit) * (E ->? N) * (E ->? N)) *
       ((N ->? Unit) * (E ->? N) * (E ->? N)) ->? Unit)
    (((op __union__[N; E]
       : forall N : Type; E : Type .
           Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) * (E_v-2 ->? N_v-1) *
                              (E_v-2 ->? N_v-1)) *
           Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) * (E_v-2 ->? N_v-1) *
                              (E_v-2 ->? N_v-1)) -> Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) *
                                                                       (E_v-2 ->? N_v-1) *
                                                                       (E_v-2 ->? N_v-1))) :
          Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)) *
          Graph N E@(Set N@(N ->? Unit) * (E ->? N) *
                     (E ->? N)) -> Graph N E@(Set N@(N ->? Unit) * (E ->? N) *
                                              (E ->? N)))
       (var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)),
        var g' : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))) :
         (N ->? Unit) * (E ->? N) * (E ->? N),
     var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))) :
      Unit
%% Type Constructors -----------------------------------------------------
E : Type %(var_3)%
Graph
  : Type -> Type -> Type
    := \ (N : Type)(E : Type) . Set N_v-1@(N_v-1 ->? Unit) *
                                (E_v-2 ->? N_v-1) * (E_v-2 ->? N_v-1)
Logical : Type := Unit ->? Unit
N : Type %(var_2)%
Pred : Type -> Type := \ a : Type . a_v-1 ->? Unit
S : Type %(var_1)%
Set : Type -> Type := \ S : Type . S_v-1 ->? Unit
Unit : Type
__*__ : Type+ -> Type+ -> Type
__-->__ : Type- -> Type+ -> Type < (__-->?__, __->__)
__-->?__ : Type- -> Type+ -> Type < __->?__
__->__ : Type- -> Type+ -> Type < __->?__
__->?__ : Type- -> Type+ -> Type
%% Assumptions -----------------------------------------------------------
__/\__ : ? Unit * ? Unit ->? Unit %(fun)%
__<=>__ : ? Unit * ? Unit ->? Unit %(fun)%
__=__ : forall a : Type . a_v-1 * a_v-1 ->? Unit %(fun)%
__=>__ : ? Unit * ? Unit ->? Unit %(fun)%
__=e=__ : forall a : Type . a_v-1 * a_v-1 ->? Unit %(fun)%
__\/__ : ? Unit * ? Unit ->? Unit %(fun)%
__\\__
  : forall S : Type .
      Set S_v-1@(S_v-1 ->? Unit) *
      Set S_v-1@(S_v-1 ->? Unit) -> Set S_v-1@(S_v-1 ->? Unit)
    %(op)%
__if__ : ? Unit * ? Unit ->? Unit %(fun)%
__intersection__
  : forall S : Type .
      Set S_v-1@(S_v-1 ->? Unit) *
      Set S_v-1@(S_v-1 ->? Unit) -> Set S_v-1@(S_v-1 ->? Unit)
    %(op)%
__union__
  : forall S : Type .
      Set S_v-1@(S_v-1 ->? Unit) *
      Set S_v-1@(S_v-1 ->? Unit) -> Set S_v-1@(S_v-1 ->? Unit)
    %(op)%
  : forall N : Type; E : Type .
      Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) * (E_v-2 ->? N_v-1) *
                         (E_v-2 ->? N_v-1)) *
      Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) * (E_v-2 ->? N_v-1) *
                         (E_v-2 ->? N_v-1)) -> Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) *
                                                                  (E_v-2 ->? N_v-1) *
                                                                  (E_v-2 ->? N_v-1))
    %(op)%
__when__else__
  : forall a : Type . a_v-1 * ? Unit * a_v-1 ->? a_v-1 %(fun)%
bottom : forall a : Type . a_v-1 %(fun)%
def__ : forall a : Type . a_v-1 ->? Unit %(fun)%
false : Unit %(fun)%
not__ : ? Unit ->? Unit %(fun)%
true : Unit %(fun)%
¬__ : ? Unit ->? Unit %(fun)%
%% Sentences -------------------------------------------------------------
((fun __=__[(N ->? Unit) * (E ->? N) * (E ->? N)]
  : forall a : Type . a_v-1 * a_v-1 ->? Unit) :
     ((N ->? Unit) * (E ->? N) * (E ->? N)) *
     ((N ->? Unit) * (E ->? N) * (E ->? N)) ->? Unit)
  (((op __union__[N; E]
     : forall N : Type; E : Type .
         Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) * (E_v-2 ->? N_v-1) *
                            (E_v-2 ->? N_v-1)) *
         Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) * (E_v-2 ->? N_v-1) *
                            (E_v-2 ->? N_v-1)) -> Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) *
                                                                     (E_v-2 ->? N_v-1) *
                                                                     (E_v-2 ->? N_v-1))) :
        Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)) *
        Graph N E@(Set N@(N ->? Unit) * (E ->? N) *
                   (E ->? N)) -> Graph N E@(Set N@(N ->? Unit) * (E ->? N) *
                                            (E ->? N)))
     (var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)),
      var g' : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))) :
       (N ->? Unit) * (E ->? N) * (E ->? N),
   var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))) :
    Unit
%% Diagnostics -----------------------------------------------------------
*** Hint 1.7, is type variable 'S'
*** Hint 1.9, is type variable 'N'
*** Hint 1.11, is type variable 'E'
*** Hint 9.6, in type of '(var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)),
 var g' : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)))'
  type 'Set N@(N ->? Unit) * (E ->? N) * (E ->? N)' (3.21)
  is not unifiable with type '_var_15_v15 ->? _var_16_v16' (6.51)

*** Hint 9.6, in type of '(var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)),
 var g' : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)))'
  type 'Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)) *
Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))' (8.17)
  is not unifiable with type 'Unit ->? (_var_15_v15 ->? _var_16_v16) *
         (_var_17_v17 ->? _var_18_v18)' (6.51)

*** Hint 9.6, in type of '(var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)),
 var g' : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)))'
  type 'Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)) *
Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))' (8.17)
  is not unifiable with type 'Unit ->? ((_var_26_v26 ->? _var_27_v27) *
          (_var_28_v28 ->? _var_29_v29) * (_var_30_v30 ->? _var_31_v31)) *
         ((_var_35_v35 ->? _var_36_v36) * (_var_37_v37 ->? _var_38_v38) *
          (_var_39_v39 ->? _var_40_v40))' (5.26)

*** Hint 9.6, in type of '(var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)),
 var g' : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)))'
  type 'Set N@(N ->? Unit) * (E ->? N) * (E ->? N)' (3.21)
  is not unifiable with type '_var_75_v75 ->? _var_76_v76' (6.51)

*** Hint 9.6, in type of '(var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)),
 var g' : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)))'
  type 'Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)) *
Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))' (8.17)
  is not unifiable with type 'Unit ->? (_var_75_v75 ->? _var_76_v76) *
         (_var_77_v77 ->? _var_78_v78)' (6.51)

*** Hint 9.6, in type of '(var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)),
 var g' : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)))'
  type 'Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)) *
Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))' (8.17)
  is not unifiable with type 'Unit ->? ((_var_86_v86 ->? _var_87_v87) *
          (_var_88_v88 ->? _var_89_v89) * (_var_90_v90 ->? _var_91_v91)) *
         ((_var_95_v95 ->? _var_96_v96) * (_var_97_v97 ->? _var_98_v98) *
          (_var_99_v99 ->? _var_100_v100))' (5.26)

*** Hint 9.8, in type of '(((op __union__[N; _var_72_v72]
   : forall N : Type; E : Type .
       Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) * (E_v-2 ->? N_v-1) *
                          (E_v-2 ->? N_v-1)) *
       Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) * (E_v-2 ->? N_v-1) *
                          (E_v-2 ->? N_v-1)) -> Graph N_v-1 E_v-2@(Set N_v-1@(N_v-1 ->? Unit) *
                                                                   (E_v-2 ->? N_v-1) *
                                                                   (E_v-2 ->? N_v-1))) :
      Graph N _var_72_v72@(Set N@(N ->? Unit) * (_var_72_v72 ->? N) *
                           (_var_72_v72 ->? N)) *
      Graph N _var_72_v72@(Set N@(N ->? Unit) * (_var_72_v72 ->? N) *
                           (_var_72_v72 ->? N)) -> Graph N _var_72_v72@(Set N@(N ->? Unit) *
                                                                        (_var_72_v72 ->? N) *
                                                                        (_var_72_v72 ->? N)))
   (var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)),
    var g' : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))) :
     (_var_104_v104 ->? _var_105_v105) *
     (_var_106_v106 ->? _var_107_v107) *
     (_var_108_v108 ->? _var_109_v109),
 var g : Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N)))'
  type '((N ->? Unit) * (E ->? N) * (E ->? N)) *
Graph N E@(Set N@(N ->? Unit) * (E ->? N) * (E ->? N))' (8.23)
  is not unifiable with type 'Unit ->? _var_6_v6 * _var_7_v7'

