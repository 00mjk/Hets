type Nat < Int; Int < Rat
op 0 : Nat
op 0 : Rat
forall y : Rat
. ((fun __=__[Rat] : forall a : Type . a_v-1 * a_v-1 ->? Unit) :
       Rat * Rat ->? Unit)
    (var y : Rat, op 0 : Nat) :
      Unit
  %(divide_def2_Rat)%
%% Type Constructors -----------------------------------------------------
Int : Type < Rat
Logical : Type := Unit ->? Unit
Nat : Type < Int
Pred : Type -> Type := \ a : Type . a_v-1 ->? Unit
Rat : Type
Unit : Type
__*__ : +Type -> +Type -> Type
__-->__ : -Type -> +Type -> Type < (__-->?__, __->__)
__-->?__ : -Type -> +Type -> Type < __->?__
__->__ : -Type -> +Type -> Type < __->?__
__->?__ : -Type -> +Type -> Type
%% Assumptions -----------------------------------------------------------
0 : Rat %(op)%
  : Nat %(op)%
__/\__ : ? Unit * ? Unit ->? Unit %(fun)%
__<=>__ : ? Unit * ? Unit ->? Unit %(fun)%
__=__ : forall a : Type . a_v-1 * a_v-1 ->? Unit %(fun)%
__=>__ : ? Unit * ? Unit ->? Unit %(fun)%
__=e=__ : forall a : Type . a_v-1 * a_v-1 ->? Unit %(fun)%
__\/__ : ? Unit * ? Unit ->? Unit %(fun)%
__if__ : ? Unit * ? Unit ->? Unit %(fun)%
__when__else__
  : forall a : Type . a_v-1 * ? Unit * a_v-1 ->? a_v-1 %(fun)%
bottom : forall a : Type . a_v-1 %(fun)%
def__ : forall a : Type . a_v-1 ->? Unit %(fun)%
false : Unit %(fun)%
not__ : ? Unit ->? Unit %(fun)%
true : Unit %(fun)%
¬__ : ? Unit ->? Unit %(fun)%
%% Sentences -------------------------------------------------------------
((fun __=__[Rat] : forall a : Type . a_v-1 * a_v-1 ->? Unit) :
     Rat * Rat ->? Unit)
  (var y : Rat, op 0 : Nat) :
    Unit %(divide_def2_Rat)%
%% Diagnostics -----------------------------------------------------------
*** Hint 1.17, redeclared type 'Int'
