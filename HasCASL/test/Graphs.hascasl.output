var S : Type; T : Type
type Bool; Pred : Type -> Type := \ S : Type . S ->? Unit;
     Set : Type -> Type := \ S : Type . S ->? Unit
op true, false : Bool
op emptySet : forall S : Type .  S ->? Unit;
   {__} : forall S : Type .  S -> S ->? Unit;
   __isIn__ : forall S : Type .  S × (S ->? Unit) ->? Unit;
   __subset__ : forall S : Type .  (S ->? Unit) ×
				   (S ->? Unit) ->? Unit;
   : forall S : Type .  (S ->? Unit) -> (S ->? Unit) -> S ->? Unit;
   __disjoint__ : forall S : Type .  (S ->? Unit) ×
				     (S ->? Unit) ->? Unit;
   : forall S : Type; T : Type .  (S ->? Unit) -> (T ->? Unit) -> S ×
								  T ->? Unit;
   : forall S : Type .  (S ->? Unit) -> (S ->? Unit) -> S ×
							Bool ->? Unit;
   inl, inr : forall S : Type .  S -> S × Bool
forall x : S; x' : S; y : T; s : S ->? Unit; s' : S ->? Unit;
       t : T ->? Unit
. (fun not__ : Unit ->? Unit) ((op __isIn__ : forall S : Type .  S ×
								 (S ->? Unit) ->? Unit) ((var x : S),
											 (op emptySet : forall S : Type .  S ->? Unit)))
. (fun __<=>__ : Unit ×
		 Unit ->? Unit) ((op __isIn__ : forall S : Type .  S ×
								   (S ->? Unit) ->? Unit) ((var x : S),
											   (op {__} : forall S : Type .  S -> S ->? Unit) (var x' : S)),
				 (fun __=__ : forall a : Type .  a × a ->? Unit) ((var x : S),
										  (var x' : S)))
. (fun __<=>__ : Unit ×
		 Unit ->? Unit) ((op __isIn__ : forall S : Type .  S ×
								   (S ->? Unit) ->? Unit) ((var x : S),
											   (var s : S ->? Unit)),
				 (var s : S ->? Unit) (var x : S))
. (fun __<=>__ : Unit ×
		 Unit ->? Unit) ((op __subset__ : forall S : Type .  (S ->? Unit) ×
								     (S ->? Unit) ->? Unit) ((var s : S ->? Unit),
											     (var s' : S ->? Unit)),
				 forall x : S . x isIn s => x isIn s')
. (fun __=__ : forall a : Type .  a ×
				  a ->? Unit) ((op inl : forall S : Type .  S -> S ×
										 Bool) (var x : S),
					       ((var x : S), (op false : Bool)))
. (fun __=__ : forall a : Type .  a ×
				  a ->? Unit) ((op inr : forall S : Type .  S -> S ×
										 Bool) (var x : S),
					       ((var x : S), (op true : Bool)))
%% Type Constructors -----------------------------------------------------
Bool : Type
Pred : Type -> Type := \ a : Type . a ->? Unit
S : Type %(var)%
Set : Type -> Type := \ S : Type . S ->? Unit
T : Type %(var)%
Unit : Type := Unit
__-->__ : Type- -> Type+ -> Type
__-->?__ : Type- -> Type+ -> Type
__->__ : Type- -> Type+ -> Type
__->?__ : Type- -> Type+ -> Type
__×__ : Type+ -> Type+ -> Type
%% Assumptions -----------------------------------------------------------
__/\__ : Unit × Unit ->? Unit %(Fun)%
__<=>__ : Unit × Unit ->? Unit %(Fun)%
__=__ : forall a : Type .  a × a ->? Unit %(Fun)%
__=>__ : Unit × Unit ->? Unit %(Fun)%
__=e=__ : forall a : Type .  a × a ->? Unit %(Fun)%
__\/__ : Unit × Unit ->? Unit %(Fun)%
__disjoint__ : forall S : Type .  (S ->? Unit) ×
				  (S ->? Unit) ->? Unit %(Op)%
__isIn__ : forall S : Type .  S × (S ->? Unit) ->? Unit %(Op)%
__subset__ : forall S : Type .  (S ->? Unit) ×
				(S ->? Unit) ->? Unit %(Op)%
def__ : forall a : Type .  a ->? Unit %(Fun)%
emptySet : forall S : Type .  S ->? Unit %(Op)%
false : Bool %(Op)%
      : Unit %(Fun)%
if__then__else__ : forall a : Type .  Unit × a × a ->? a %(Fun)%
inl : forall S : Type .  S -> S × Bool %(Op)%
inr : forall S : Type .  S -> S × Bool %(Op)%
not__ : Unit ->? Unit %(Fun)%
true : Bool %(Op)%
     : Unit %(Fun)%
{__} : forall S : Type .  S -> S ->? Unit %(Op)%
%% Sentences -------------------------------------------------------------
(fun not__ : Unit ->? Unit) ((op __isIn__ : forall S : Type .  S ×
							       (S ->? Unit) ->? Unit) ((var x : S),
										       (op emptySet : forall S : Type .  S ->? Unit))) %()%
(fun __<=>__ : Unit ×
	       Unit ->? Unit) ((op __isIn__ : forall S : Type .  S ×
								 (S ->? Unit) ->? Unit) ((var x : S),
											 (op {__} : forall S : Type .  S -> S ->? Unit) (var x' : S)),
			       (fun __=__ : forall a : Type .  a × a ->? Unit) ((var x : S),
										(var x' : S))) %()%
(fun __<=>__ : Unit ×
	       Unit ->? Unit) ((op __isIn__ : forall S : Type .  S ×
								 (S ->? Unit) ->? Unit) ((var x : S),
											 (var s : S ->? Unit)),
			       (var s : S ->? Unit) (var x : S)) %()%
(fun __<=>__ : Unit ×
	       Unit ->? Unit) ((op __subset__ : forall S : Type .  (S ->? Unit) ×
								   (S ->? Unit) ->? Unit) ((var s : S ->? Unit),
											   (var s' : S ->? Unit)),
			       forall x : S . x isIn s => x isIn s') %()%
(fun __=__ : forall a : Type .  a ×
				a ->? Unit) ((op inl : forall S : Type .  S -> S ×
									       Bool) (var x : S),
					     ((var x : S), (op false : Bool))) %()%
(fun __=__ : forall a : Type .  a ×
				a ->? Unit) ((op inr : forall S : Type .  S -> S ×
									       Bool) (var x : S),
					     ((var x : S), (op true : Bool))) %()%
%% Diagnostics -----------------------------------------------------------
*** Hint 1.6, is type variable 'S'
*** Hint 1.8, is type variable 'T'
*** Warning 3.18, redeclared type 'S'
*** Warning 3.8, redeclared type 'Pred'
*** Warning 4.17, redeclared type 'S'
*** Error 11.9, expected tuple argument for '__union__'
*** Error 11.20, expected tuple argument for '__intersection__'
*** Error 11.38, expected tuple argument for '__\\__'
*** Error 13.9, expected tuple argument for '__*__'
*** Error 14.9, expected tuple argument for '__disjointUnion__'
*** Error 20.39, ambiguous mixfix term
	(__isIn__)(x, (__=>__)(s, (__isIn__)(x, s')))
	(__=>__)((__isIn__)(x, s), (__isIn__)(x, s'))
	(__isIn__)((__=>__)((__isIn__)(x, s), x), s')
*** Error 20.37, unexpected term 'x isIn s => x isIn s''
*** Error 21.15, unexpected mixfix token: union
*** Error 22.15, unexpected mixfix token: intersection
*** Error 23.15, unexpected mixfix token: \\
*** Error 24.25, unexpected mixfix token: intersection
*** Error 25.18, unexpected mixfix token: *
