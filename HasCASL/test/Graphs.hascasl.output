var S : Type; T : Type
type Bool; Pred : Type -> Type := \ S : Type . S ->? Unit;
     Set : Type -> Type := \ S : Type . S ->? Unit
op True, False : Bool
op emptySet : forall S : Type . Set S;
   {__} : forall S : Type . S -> Set S;
   __isIn__ : forall S : Type . S * Set S ->? Unit;
   __subset__ : forall S : Type . Pred (Set S * Set S);
   __union__, __intersection__, __\\__ : forall S : Type .
                                           Set S * Set S -> Set S;
   __disjoint__ : forall S : Type . Pred (Set S * Set S);
   __*__ : forall S : Type; T : Type . Set S * Set T -> Set (S * T);
   __disjointUnion__ : forall S : Type .
                         Set S * Set S -> Set (S * Bool);
   inl, inr : forall S : Type . S -> S * Bool
forall x : S; x' : S; y : T; s : Set S; s' : Set S; t : Set T
. (fun not__ : Unit ->? Unit)
    ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
       (var x : S, op emptySet[S] : forall S : Type . Set S))
. (fun __<=>__ : Unit * Unit ->? Unit)
    ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
       (var x : S,
        (op {__}[S] : forall S : Type . S -> Set S)(var x' : S)),
     (fun __=__[S] : forall a : Type . a * a ->? Unit)
       (var x : S, var x' : S))
. (fun __<=>__ : Unit * Unit ->? Unit)
    ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
       (var x : S, var s : Set S),
     (var s : Set S)(var x : S))
. (fun __<=>__ : Unit * Unit ->? Unit)
    ((op __subset__[S] : forall S : Type . Pred (Set S * Set S))
       (var s : Set S, var s' : Set S),
     forall x : S
       . (fun __=>__ : Unit * Unit ->? Unit)
           ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
              (var x : S, var s : Set S),
            (op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
              (var x : S, var s' : Set S)))
. (fun __<=>__ : Unit * Unit ->? Unit)
    ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
       (var x : S,
        (op __union__[S] : forall S : Type . Set S * Set S -> Set S)
          (var s : Set S, var s' : Set S)),
     (fun __\/__ : Unit * Unit ->? Unit)
       ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
          (var x : S, var s : Set S),
        (op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
          (var x : S, var s' : Set S)))
. (fun __<=>__ : Unit * Unit ->? Unit)
    ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
       (var x : S,
        (op __intersection__[S] : forall S : Type . Set S * Set S -> Set S)
          (var s : Set S, var s' : Set S)),
     (fun __/\__ : Unit * Unit ->? Unit)
       ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
          (var x : S, var s : Set S),
        (op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
          (var x : S, var s' : Set S)))
. (fun __<=>__ : Unit * Unit ->? Unit)
    ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
       (var x : S,
        (op __\\__[S] : forall S : Type . Set S * Set S -> Set S)
          (var s : Set S, var s' : Set S)),
     (fun __/\__ : Unit * Unit ->? Unit)
       ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
          (var x : S, var s : Set S),
        (fun not__ : Unit ->? Unit)
          ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
             (var x : S, var s' : Set S))))
. (fun __<=>__ : Unit * Unit ->? Unit)
    ((op __disjoint__[S] : forall S : Type . Pred (Set S * Set S))
       (var s : Set S, var s' : Set S),
     (fun __=__[S ->? Unit] : forall a : Type . a * a ->? Unit)
       ((op __intersection__[S]
         : forall S : Type . Set S * Set S -> Set S)
          (var s : Set S, var s' : Set S),
        op emptySet[S] : forall S : Type . Set S))
. (fun __<=>__ : Unit * Unit ->? Unit)
    ((op __isIn__[S * T] : forall S : Type . S * Set S ->? Unit)
       ((var x : S, var y : T),
        (op __*__[S; T]
         : forall S : Type; T : Type . Set S * Set T -> Set (S * T))
          (var s : Set S, var t : Set T)),
     (fun __/\__ : Unit * Unit ->? Unit)
       ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
          (var x : S, var s : Set S),
        (op __isIn__[T] : forall S : Type . S * Set S ->? Unit)
          (var y : T, var t : Set T)))
. (fun __=__[S * Bool] : forall a : Type . a * a ->? Unit)
    ((op inl[S] : forall S : Type . S -> S * Bool)(var x : S),
     (var x : S, op False : Bool))
. (fun __=__[S * Bool] : forall a : Type . a * a ->? Unit)
    ((op inr[S] : forall S : Type . S -> S * Bool)(var x : S),
     (var x : S, op True : Bool))
%% Type Constructors -----------------------------------------------------
Bool : Type
Pred : Type -> Type := \ a : Type . a ->? Unit
S : Type %(var)%
Set : Type -> Type := \ S : Type . S ->? Unit
T : Type %(var)%
Unit : Type := Unit
__*__ : Type+ -> Type+ -> Type
__-->__ : Type- -> Type+ -> Type
__-->?__ : Type- -> Type+ -> Type
__->__ : Type- -> Type+ -> Type
__->?__ : Type- -> Type+ -> Type
%% Assumptions -----------------------------------------------------------
False : Bool %(op)%
True : Bool %(op)%
__*__
  : forall S : Type; T : Type . Set S * Set T -> Set (S * T) %(op)%
__/\__ : Unit * Unit ->? Unit %(fun)%
__<=>__ : Unit * Unit ->? Unit %(fun)%
__=__ : forall a : Type . a * a ->? Unit %(fun)%
__=>__ : Unit * Unit ->? Unit %(fun)%
__=e=__ : forall a : Type . a * a ->? Unit %(fun)%
__\/__ : Unit * Unit ->? Unit %(fun)%
__\\__ : forall S : Type . Set S * Set S -> Set S %(op)%
__disjoint__ : forall S : Type . Pred (Set S * Set S) %(op)%
__disjointUnion__
  : forall S : Type . Set S * Set S -> Set (S * Bool) %(op)%
__if__ : Unit * Unit ->? Unit %(fun)%
__intersection__ : forall S : Type . Set S * Set S -> Set S %(op)%
__isIn__ : forall S : Type . S * Set S ->? Unit %(op)%
__subset__ : forall S : Type . Pred (Set S * Set S) %(op)%
__union__ : forall S : Type . Set S * Set S -> Set S %(op)%
__when__else__ : forall a : Type . a * Unit * a ->? a %(fun)%
bottom : forall a : Type . a %(fun)%
def__ : forall a : Type . a ->? Unit %(fun)%
emptySet : forall S : Type . Set S %(op)%
false : Unit %(fun)%
inl : forall S : Type . S -> S * Bool %(op)%
inr : forall S : Type . S -> S * Bool %(op)%
not__ : Unit ->? Unit %(fun)%
true : Unit %(fun)%
{__} : forall S : Type . S -> Set S %(op)%
%% Sentences -------------------------------------------------------------
(fun not__ : Unit ->? Unit)
  ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
     (var x : S, op emptySet[S] : forall S : Type . Set S))
(fun __<=>__ : Unit * Unit ->? Unit)
  ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
     (var x : S,
      (op {__}[S] : forall S : Type . S -> Set S)(var x' : S)),
   (fun __=__[S] : forall a : Type . a * a ->? Unit)
     (var x : S, var x' : S))
(fun __<=>__ : Unit * Unit ->? Unit)
  ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
     (var x : S, var s : Set S),
   (var s : Set S)(var x : S))
(fun __<=>__ : Unit * Unit ->? Unit)
  ((op __subset__[S] : forall S : Type . Pred (Set S * Set S))
     (var s : Set S, var s' : Set S),
   forall x : S
     . (fun __=>__ : Unit * Unit ->? Unit)
         ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
            (var x : S, var s : Set S),
          (op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
            (var x : S, var s' : Set S)))
(fun __<=>__ : Unit * Unit ->? Unit)
  ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
     (var x : S,
      (op __union__[S] : forall S : Type . Set S * Set S -> Set S)
        (var s : Set S, var s' : Set S)),
   (fun __\/__ : Unit * Unit ->? Unit)
     ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
        (var x : S, var s : Set S),
      (op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
        (var x : S, var s' : Set S)))
(fun __<=>__ : Unit * Unit ->? Unit)
  ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
     (var x : S,
      (op __intersection__[S] : forall S : Type . Set S * Set S -> Set S)
        (var s : Set S, var s' : Set S)),
   (fun __/\__ : Unit * Unit ->? Unit)
     ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
        (var x : S, var s : Set S),
      (op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
        (var x : S, var s' : Set S)))
(fun __<=>__ : Unit * Unit ->? Unit)
  ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
     (var x : S,
      (op __\\__[S] : forall S : Type . Set S * Set S -> Set S)
        (var s : Set S, var s' : Set S)),
   (fun __/\__ : Unit * Unit ->? Unit)
     ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
        (var x : S, var s : Set S),
      (fun not__ : Unit ->? Unit)
        ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
           (var x : S, var s' : Set S))))
(fun __<=>__ : Unit * Unit ->? Unit)
  ((op __disjoint__[S] : forall S : Type . Pred (Set S * Set S))
     (var s : Set S, var s' : Set S),
   (fun __=__[S ->? Unit] : forall a : Type . a * a ->? Unit)
     ((op __intersection__[S]
       : forall S : Type . Set S * Set S -> Set S)
        (var s : Set S, var s' : Set S),
      op emptySet[S] : forall S : Type . Set S))
(fun __<=>__ : Unit * Unit ->? Unit)
  ((op __isIn__[S * T] : forall S : Type . S * Set S ->? Unit)
     ((var x : S, var y : T),
      (op __*__[S; T]
       : forall S : Type; T : Type . Set S * Set T -> Set (S * T))
        (var s : Set S, var t : Set T)),
   (fun __/\__ : Unit * Unit ->? Unit)
     ((op __isIn__[S] : forall S : Type . S * Set S ->? Unit)
        (var x : S, var s : Set S),
      (op __isIn__[T] : forall S : Type . S * Set S ->? Unit)
        (var y : T, var t : Set T)))
(fun __=__[S * Bool] : forall a : Type . a * a ->? Unit)
  ((op inl[S] : forall S : Type . S -> S * Bool)(var x : S),
   (var x : S, op False : Bool))
(fun __=__[S * Bool] : forall a : Type . a * a ->? Unit)
  ((op inr[S] : forall S : Type . S -> S * Bool)(var x : S),
   (var x : S, op True : Bool))
%% Diagnostics -----------------------------------------------------------
*** Hint 1.6, is type variable 'S'
*** Hint 1.8, is type variable 'T'
*** Hint 3.18, redeclared type 'S'
*** Hint 3.8, redeclared type 'Pred'
*** Hint 4.17, redeclared type 'S'
