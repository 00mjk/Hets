var   b : Type
var   a : +Type
type  List a
free type List a ::= Nil | Cons (head : a; tail : List a)
free type
free type
free type
free type Tree a ::= Leaf | Branch (head : Tree a; tail : Tree a)
generated type Tree1 a
               ::= Leaf | Branch (head : Tree a; tail : Tree1 a)
type  Tree2 a ::= Leaf | Branch (head : Tree a; tail : Tree2 a)
free types
even a ::= rek (odd a);
odd a ::= rek (even a)
free type odd2 a ::= rek (even2 a)
%% Type Constructors -----------------------------------------------------
List
: +Type -> Type
 %[free type List(a : +Type) ::=
             Nil | Cons (head : a; tail : List a)]%
Tree
: +Type -> Type
 %[free type Tree(a : +Type) ::=
             Leaf | Branch (head : Tree a; tail : Tree a)]%
Tree1
: +Type -> Type
 %[generated type Tree1(a : +Type) ::=
                  Leaf | Branch (head : Tree a; tail : Tree1 a)]%
Tree2
: +Type -> Type
 %[type Tree2(a : +Type) ::=
        Leaf | Branch (head : Tree a; tail : Tree2 a)]%
even : +Type -> Type  %[free type even(a : +Type) ::= rek (odd a)]%
even2 : +Type -> Type %(data type)%
odd : +Type -> Type  %[free type odd(a : +Type) ::= rek (even a)]%
odd2
: +Type -> Type  %[free type odd2(a : +Type) ::= rek (even2 a)]%
%% Type Variables --------------------------------------------------------
a  : +Type %(var_2)%
b  : Type %(var_1)%
%% Assumptions -----------------------------------------------------------
Branch
: forall a : +Type . Tree a * Tree2 a -> Tree2 a %(constructor)%
: forall a : +Type . Tree a * Tree1 a -> Tree1 a %(constructor)%
: forall a : +Type . Tree a * Tree a -> Tree a %(constructor)%
Cons : forall a : +Type . a * List a -> List a %(constructor)%
Leaf
: forall a : +Type . Tree2 a %(constructor)%
: forall a : +Type . Tree1 a %(constructor)%
: forall a : +Type . Tree a %(constructor)%
Nil : forall a : +Type . List a %(constructor)%
head
: forall a : +Type . Tree2 a -> Tree a
%(selector of constructor(s)
Branch : forall a : +Type . Tree a * Tree2 a -> Tree2 a)%
: forall a : +Type . Tree1 a -> Tree a
%(selector of constructor(s)
Branch : forall a : +Type . Tree a * Tree1 a -> Tree1 a)%
: forall a : +Type . Tree a -> Tree a
%(selector of constructor(s)
Branch : forall a : +Type . Tree a * Tree a -> Tree a)%
: forall a : +Type . List a -> a
%(selector of constructor(s)
Cons : forall a : +Type . a * List a -> List a)%
rek
: forall a : +Type . even2 a -> odd2 a %(constructor)%
: forall a : +Type . even a -> odd a %(constructor)%
: forall a : +Type . odd a -> even a %(constructor)%
tail
: forall a : +Type . Tree2 a -> Tree2 a
%(selector of constructor(s)
Branch : forall a : +Type . Tree a * Tree2 a -> Tree2 a)%
: forall a : +Type . Tree1 a -> Tree1 a
%(selector of constructor(s)
Branch : forall a : +Type . Tree a * Tree1 a -> Tree1 a)%
: forall a : +Type . Tree a -> Tree a
%(selector of constructor(s)
Branch : forall a : +Type . Tree a * Tree a -> Tree a)%
: forall a : +Type . List a -> List a
%(selector of constructor(s)
Cons : forall a : +Type . a * List a -> List a)%
%% Sentences -------------------------------------------------------------
forall a : +Type; x_1_1 : a; x_1_2 : List a
. (op head : forall a : +Type . List a -> a) (Cons (x_1_1, x_1_2))
  = x_1_1                                       %(ga_select_head)%
forall a : +Type; x_1_1 : a; x_1_2 : List a
. (op tail : forall a : +Type . List a -> List a)
  (Cons (x_1_1, x_1_2))
  = x_1_2                                       %(ga_select_tail)%
free type List(a : +Type) ::= Nil | Cons (head : a; tail : List a)
                                                       %(ga_List)%
free type List(a : +Type) ::= Nil | Cons (head : a; tail : List a)
                                                       %(ga_List)%
free type List(a : +Type) ::= Nil | Cons (head : a; tail : List a)
                                                       %(ga_List)%
free type List(a : +Type) ::= Nil | Cons (head : a; tail : List a)
                                                       %(ga_List)%
forall a : +Type; x_1_1 : Tree a; x_1_2 : Tree a
. (op head : forall a : +Type . Tree a -> Tree a)
  ((op Branch : forall a : +Type . Tree a * Tree a -> Tree a)
   (x_1_1, x_1_2))
  = x_1_1                                       %(ga_select_head)%
forall a : +Type; x_1_1 : Tree a; x_1_2 : Tree a
. (op tail : forall a : +Type . Tree a -> Tree a)
  ((op Branch : forall a : +Type . Tree a * Tree a -> Tree a)
   (x_1_1, x_1_2))
  = x_1_2                                       %(ga_select_tail)%
free type Tree(a : +Type) ::=
          Leaf | Branch (head : Tree a; tail : Tree a) %(ga_Tree)%
forall a : +Type; x_1_1 : Tree a; x_1_2 : Tree1 a
. (op head : forall a : +Type . Tree1 a -> Tree a)
  ((op Branch : forall a : +Type . Tree a * Tree1 a -> Tree1 a)
   (x_1_1, x_1_2))
  = x_1_1                                       %(ga_select_head)%
forall a : +Type; x_1_1 : Tree a; x_1_2 : Tree1 a
. (op tail : forall a : +Type . Tree1 a -> Tree1 a)
  ((op Branch : forall a : +Type . Tree a * Tree1 a -> Tree1 a)
   (x_1_1, x_1_2))
  = x_1_2                                       %(ga_select_tail)%
generated type Tree1(a : +Type) ::=
               Leaf | Branch (head : Tree a; tail : Tree1 a)
                                                      %(ga_Tree1)%
forall a : +Type; x_1_1 : Tree a; x_1_2 : Tree2 a
. (op head : forall a : +Type . Tree2 a -> Tree a)
  ((op Branch : forall a : +Type . Tree a * Tree2 a -> Tree2 a)
   (x_1_1, x_1_2))
  = x_1_1                                       %(ga_select_head)%
forall a : +Type; x_1_1 : Tree a; x_1_2 : Tree2 a
. (op tail : forall a : +Type . Tree2 a -> Tree2 a)
  ((op Branch : forall a : +Type . Tree a * Tree2 a -> Tree2 a)
   (x_1_1, x_1_2))
  = x_1_2                                       %(ga_select_tail)%
type Tree2(a : +Type) ::=
     Leaf | Branch (head : Tree a; tail : Tree2 a)    %(ga_Tree2)%
free type even(a : +Type) ::= rek (odd a)
free type odd(a : +Type) ::= rek (even a)          %(ga_even_odd)%
free type odd2(a : +Type) ::= rek (even2 a) %(ga_even2_odd2)%
%% Diagnostics -----------------------------------------------------------
### Hint 1.5, is type variable 'b'
### Hint 2.5, is type variable 'a'
### Hint 4.11, redeclared type 'List'
*** Error 5.50-5.55, unbound type variable(s)
  b in 'List b'
*** Error 6.50-6.57, unexpected type argument 'b'
*** Error 7.50-7.61, illegal polymorphic recursion
  expected: List a
     found: List (List a)

*** Error 14.27-14.38, illegal polymorphic recursion
  expected: odd2 a
     found: odd2 (odd2 a)

