var b : Type
var a : Type+
type List(a : Type+)
free type List(a : Type+) ::= Nil | 
			      Cons (head:a; tail:List a)
free type List(a : Type+) ::= Nil | 
			      Cons (head:a; tail:List b)
free type List(a : Type+) ::= Nil | 
			      Cons (head:a; tail:List a b)
free type Tree(a : Type+) ::= Leaf | 
			      Branch (head:Tree a; tail:Tree a)
generated {type Tree1(a : Type+) ::= Leaf | 
				     Branch (head:Tree a; tail:Tree1 a)}
type Tree2(a : Type+) ::= Leaf | 
			  Branch (head:Tree a; tail:Tree2 a)
%% Type Constructors -----------------------------------------------------
List : Type+ -> Type %[free type __ a : Type+ ::=
			    Nil : -> __
			    Cons : a × List a -> __ (head : a)(tail : List a)]%
Pred : Type -> Type := \ a : Type . a ->? Unit
Tree : Type+ -> Type %[free type __ a : Type+ ::=
			    Leaf : -> __
			    Branch : Tree a × Tree a -> __ (head : Tree a)(tail : Tree a)]%
Tree1 : Type+ -> Type %[generated type __ a : Type+ ::=
				  Leaf : -> __
				  Branch : Tree a × Tree1 a -> __ (head : Tree a)(tail : Tree1 a)]%
Tree2 : Type+ -> Type %[type __ a : Type+ ::=
			Leaf : -> __
			Branch : Tree a × Tree2 a -> __ (head : Tree a)(tail : Tree2 a)]%
Unit : Type := Unit
__-->__ : Type- -> Type+ -> Type
__-->?__ : Type- -> Type+ -> Type
__->__ : Type- -> Type+ -> Type
__->?__ : Type- -> Type+ -> Type
__×__ : Type+ -> Type+ -> Type
a : Type+ %(var)%
b : Type %(var)%
%% Assumptions -----------------------------------------------------------
Branch : forall a : Type+ .  Tree a ×
			     Tree2 a -> Tree2 a %(construct Tree2)%
       : forall a : Type+ .  Tree a ×
			     Tree1 a -> Tree1 a %(construct Tree1)%
       : forall a : Type+ .  Tree a × Tree a -> Tree a %(construct Tree)%
Cons : forall a : Type+ .  a × List a -> List a %(construct List)%
Leaf : forall a : Type+ .  Tree2 a %(construct Tree2)%
     : forall a : Type+ .  Tree1 a %(construct Tree1)%
     : forall a : Type+ .  Tree a %(construct Tree)%
Nil : forall a : Type+ .  List a %(construct List)%
__/\__ : Unit × Unit ->? Unit
__<=>__ : Unit × Unit ->? Unit
__=__ : forall a : Type .  a × a ->? Unit
__=>__ : Unit × Unit ->? Unit
__=e=__ : forall a : Type .  a × a ->? Unit
__\/__ : Unit × Unit ->? Unit
def__ : forall a : Type .  a ->? Unit
head : forall a : Type+ .  Tree2 a -> Tree a %(select from Tree2 constructed by
					    Branch : forall a : Type+ .  Tree a ×
									 Tree2 a -> Tree2 a)%
     : forall a : Type+ .  Tree1 a -> Tree a %(select from Tree1 constructed by
					    Branch : forall a : Type+ .  Tree a ×
									 Tree1 a -> Tree1 a)%
     : forall a : Type+ .  Tree a -> Tree a %(select from Tree constructed by
					   Branch : forall a : Type+ .  Tree a × Tree a -> Tree a)%
     : forall a : Type+ .  List a -> a %(select from List constructed by
				      Cons : forall a : Type+ .  a × List a -> List a)%
if__then__else__ : forall a : Type .  Unit × a × a ->? a
not__ : Unit ->? Unit
tail : forall a : Type+ .  Tree2 a -> Tree2 a %(select from Tree2 constructed by
					     Branch : forall a : Type+ .  Tree a ×
									  Tree2 a -> Tree2 a)%
     : forall a : Type+ .  Tree1 a -> Tree1 a %(select from Tree1 constructed by
					     Branch : forall a : Type+ .  Tree a ×
									  Tree1 a -> Tree1 a)%
     : forall a : Type+ .  Tree a -> Tree a %(select from Tree constructed by
					   Branch : forall a : Type+ .  Tree a × Tree a -> Tree a)%
     : forall a : Type+ .  List a -> List a %(select from List constructed by
					   Cons : forall a : Type+ .  a × List a -> List a)%
%% Diagnostics -----------------------------------------------------------
Hint (line 1, column 5) is type variable 'b'
Hint (line 2, column 5) is type variable 'a'
Warning (line 4, column 11) redeclared type 'List'
Error (line 5, column 55) unbound type variable(s)
	b : Type
Warning (line 5, column 11) redeclared type 'List'
Error (line 5, column 11) merge: TypeDefn of 'List'

Error (line 6, column 57) unexpected type argument 'b'
Error (line 6, column 57) unbound type variable(s)
	b : Type
Warning (line 6, column 11) redeclared type 'List'
Error (line 6, column 11) merge: TypeDefn of 'List'

