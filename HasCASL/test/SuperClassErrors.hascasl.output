class a < Type
class b < a
      %% cycle
class c < Type
class d < Type
class e < c
      %% indirect cycle
class h < Type
      %% no implicit declaration
class g < Type
class g < (a, b)
      %% g is already real class
class i < (g, a)
class g < (a, i)
      %% cycle via i = g
class i < Type
      %% i is already alias class 
class i < (a, g)
      %% ok
class i < b
var t : Type
class i < {x . x < t}
%% Classes ---------------------------------------------------------------
a < Type
b < a
c < Type
d < Type
e < c
g < (a, b)
h < Type
i < ({x . x < t}, b, a, g)
%% Type Constructors -----------------------------------------------------
Logical : Type := Unit ->? Unit
Pred : Type -> Type := \ a : Type . a ->? Unit
Unit : Type := Unit
__*__ : Type+ -> Type+ -> Type
__-->__ : Type- -> Type+ -> Type
__-->?__ : Type- -> Type+ -> Type
__->__ : Type- -> Type+ -> Type
__->?__ : Type- -> Type+ -> Type
t : Type %(var)%
%% Assumptions -----------------------------------------------------------
__/\__ : Unit * Unit ->? Unit %(fun)%
__<=>__ : Unit * Unit ->? Unit %(fun)%
__=__ : forall a : Type . a * a ->? Unit %(fun)%
__=>__ : Unit * Unit ->? Unit %(fun)%
__=e=__ : forall a : Type . a * a ->? Unit %(fun)%
__\/__ : Unit * Unit ->? Unit %(fun)%
__if__ : Unit * Unit ->? Unit %(fun)%
__when__else__ : forall a : Type . a * Unit * a ->? a %(fun)%
bottom : forall a : Type . a %(fun)%
def__ : forall a : Type . a ->? Unit %(fun)%
false : Unit %(fun)%
not__ : Unit ->? Unit %(fun)%
true : Unit %(fun)%
¬__ : Unit ->? Unit %(fun)%
%% Diagnostics -----------------------------------------------------------
*** Error 1.13, undeclared class 'b'
*** Error 3.11, undeclared class 'd'
*** Error 4.11, undeclared class 'e'
*** Error 6.11, undeclared class 'g'
*** Warning 8.7, redeclared class 'g'
*** Warning 10.7, redeclared class 'g'
*** Error 10.7, cyclic class 'g'
*** Warning 11.7, redeclared class 'i'
*** Warning 12.7, redeclared class 'i'
*** Warning 13.7, redeclared class 'i'
*** Hint 14.5, is type variable 't'
*** Warning 15.7, redeclared class 'i'
