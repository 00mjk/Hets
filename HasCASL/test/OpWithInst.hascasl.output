type s
op a : s
op __=[s]__ : forall a : Type . a * a -> Unit
. (op __=[s]__[s] : forall a : Type . a_v-1 * a_v-1 -> Unit)
    (op a : s, op a : s)
%% Type Constructors -----------------------------------------------------
Logical : Type := Unit ->? Unit
Pred : Type -> Type := \ a : Type . a_v-1 ->? Unit
Unit : Type
__*__ : Type+ -> Type+ -> Type
__-->__ : Type- -> Type+ -> Type < (__-->?__, __->__)
__-->?__ : Type- -> Type+ -> Type < __->?__
__->__ : Type- -> Type+ -> Type < __->?__
__->?__ : Type- -> Type+ -> Type
s : Type
%% Assumptions -----------------------------------------------------------
__/\__ : ? Unit * ? Unit ->? Unit %(fun)%
__<=>__ : ? Unit * ? Unit ->? Unit %(fun)%
__=__ : forall a : Type . a_v-1 * a_v-1 ->? Unit %(fun)%
__=[s]__ : forall a : Type . a_v-1 * a_v-1 -> Unit %(op)%
__=>__ : ? Unit * ? Unit ->? Unit %(fun)%
__=e=__ : forall a : Type . a_v-1 * a_v-1 ->? Unit %(fun)%
__\/__ : ? Unit * ? Unit ->? Unit %(fun)%
__if__ : ? Unit * ? Unit ->? Unit %(fun)%
__when__else__
  : forall a : Type . a_v-1 * ? Unit * a_v-1 ->? a_v-1 %(fun)%
a : s %(op)%
bottom : forall a : Type . a_v-1 %(fun)%
def__ : forall a : Type . a_v-1 ->? Unit %(fun)%
false : Unit %(fun)%
not__ : ? Unit ->? Unit %(fun)%
true : Unit %(fun)%
¬__ : ? Unit ->? Unit %(fun)%
%% Sentences -------------------------------------------------------------
(op __=[s]__[s] : forall a : Type . a_v-1 * a_v-1 -> Unit)
  (op a : s, op a : s)
%% Diagnostics -----------------------------------------------------------
*** Hint 6.47, in type of '(op a : s, op a : s)'
  type 's * s' (2.8)
  is not unifiable with type 'Unit ->? _var_5_v5 * _var_6_v6' (6.16)

