class Cpo < Type
class Cppo < Cpo
type instance __-->__ : Cpo- -> Cpo+ -> Cpo
type instance __-->__ : Cpo- -> Cppo+ -> Cppo
var c : Cppo
fun Y : (c --> c) --> c
%% Classes ---------------------------------------------------------------
Cpo < Type
Cppo < Cpo
%% Type Constructors -----------------------------------------------------
Logical : Type := Unit ->? Unit
Pred : Type -> Type := \ a : Type . a_v-1 ->? Unit
Unit : Type
__*__ : Type+ -> Type+ -> Type
__-->__
  : (Cpo- -> Cpo+ -> Cpo, Cpo- -> Cppo+ -> Cppo,
     Type- -> Type+ -> Type) < (__-->?__, __->__)
__-->?__ : Type- -> Type+ -> Type < __->?__
__->__ : Type- -> Type+ -> Type < __->?__
__->?__ : Type- -> Type+ -> Type
c : Cppo %(var_1)%
%% Assumptions -----------------------------------------------------------
Y : forall c : Cppo . (c_v-1 --> c_v-1) --> c_v-1 %(fun)%
__/\__ : ? Unit * ? Unit ->? Unit %(fun)%
__<=>__ : ? Unit * ? Unit ->? Unit %(fun)%
__=__ : forall a : Type . a_v-1 * a_v-1 ->? Unit %(fun)%
__=>__ : ? Unit * ? Unit ->? Unit %(fun)%
__=e=__ : forall a : Type . a_v-1 * a_v-1 ->? Unit %(fun)%
__\/__ : ? Unit * ? Unit ->? Unit %(fun)%
__if__ : ? Unit * ? Unit ->? Unit %(fun)%
__when__else__
  : forall a : Type . a_v-1 * ? Unit * a_v-1 ->? a_v-1 %(fun)%
bottom : forall a : Type . a_v-1 %(fun)%
def__ : forall a : Type . a_v-1 ->? Unit %(fun)%
false : Unit %(fun)%
not__ : ? Unit ->? Unit %(fun)%
true : Unit %(fun)%
¬__ : ? Unit ->? Unit %(fun)%
%% Diagnostics -----------------------------------------------------------
*** Hint 8.5, is type variable 'c'
