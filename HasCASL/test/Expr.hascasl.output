type bool ::= True | 
              False
op a : bool = (op True : bool) as bool
op notA : bool = 
   case (op a : bool) of 
   (op True : bool) -> (op False : bool) | 
   (op False : bool) -> (op True : bool) 
   as bool
op b : bool = 
   let (var x : bool) = (op True : bool);
       (var y : bool) = (op False : bool);
       (var z : bool) = (var x : bool) 
   in 
   (op True : bool) 
   as bool
op b : bool -> bool = 
   \ (var x : bool) .! (var x : bool) as bool -> bool
%% Type Constructors -----------------------------------------------------
? : +Type -> Type
Logical : Type := ? Unit
Pred : -Type -> Type := \ a : -Type . a ->? Unit
Unit : Type
__*__ : +Type -> +Type -> Type
__*__*__ : +Type -> +Type -> +Type -> Type
__*__*__*__ : +Type -> +Type -> +Type -> +Type -> Type
__*__*__*__*__ : +Type -> +Type -> +Type -> +Type -> +Type -> Type
__-->__ : -Type -> +Type -> Type < (__-->?__, __->__)
__-->?__ : -Type -> +Type -> Type < __->?__
__->__ : -Type -> +Type -> Type < __->?__
__->?__ : -Type -> +Type -> Type
bool 
: Type 
 %[type bool ::= 
        True : bool
        False : bool]%
%% Assumptions -----------------------------------------------------------
False : bool %(construct bool)%
True : bool %(construct bool)%
__/\__ : ? Unit * ? Unit ->? Unit %(fun)%
__<=>__ : ? Unit * ? Unit ->? Unit %(fun)%
__=__ : forall a : Type . a * a ->? Unit %(fun)%
__=>__ : ? Unit * ? Unit ->? Unit %(fun)%
__=e=__ : forall a : Type . a * a ->? Unit %(fun)%
__\/__ : ? Unit * ? Unit ->? Unit %(fun)%
__if__ : ? Unit * ? Unit ->? Unit %(fun)%
__when__else__ : forall a : Type . a * ? Unit * a ->? a %(fun)%
a : bool %(op)% = (op True : bool) as bool
b 
: bool -> bool 
%(op)% = \ (var x : bool) .! (var x : bool) as bool -> bool
: bool 
%(op)% = 
let (var x : bool) = (op True : bool);
    (var y : bool) = (op False : bool);
    (var z : bool) = (var x : bool) 
in 
(op True : bool) 
as bool
bottom : forall a : Type . a %(fun)%
def__ : forall a : Type . a ->? Unit %(fun)%
false : Unit %(fun)%
not__ : ? Unit ->? Unit %(fun)%
notA 
: bool 
%(op)% = 
case (op a : bool) of 
(op True : bool) -> (op False : bool) | 
(op False : bool) -> (op True : bool) 
as bool
true : Unit %(fun)%
¬__ : ? Unit ->? Unit %(fun)%
%% Sentences -------------------------------------------------------------
type bool ::= 
     True : bool
     False : bool                                      %(ga_bool)%
a = (True as bool) %(def_a)%
notA = 
(case a of 
 True -> False | 
 False -> True 
 as bool)                                             %(def_notA)%
(op b : bool) = 
(let x = True;
     y = False;
     z = x 
 in 
 True 
 as bool)                                                %(def_b)%
(op b : bool -> bool) = (\ x .! x as bool -> bool) %(def_b)%
