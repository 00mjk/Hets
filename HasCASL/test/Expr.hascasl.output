type bool ::= true | 
	      false
op a : bool = (op true : bool)
op notA : bool = case a of true -> false | 
			   false -> true
op b : bool = let x : _var_2 = true;
		  y : _var_3 = false;
		  z : _var_4 = x in true
op b : bool -> bool = \ x : _var_6 . x
%% Type Constructors -----------------------------------------------------
Pred : Type -> Type := \ a : Type . a ->? Unit
Unit : Type
bool : Type %[type __ ::=
	      true : -> __
	      false : -> __]%
%% Assumptions -----------------------------------------------------------
__/\__ : Unit × Unit ->? Unit
__<=>__ : Unit × Unit ->? Unit
__=__ : forall a : Type .  a × a ->? Unit
__=>__ : Unit × Unit ->? Unit
__=e=__ : forall a : Type .  a × a ->? Unit
__\/__ : Unit × Unit ->? Unit
a : bool = (op true : bool)
b : bool -> bool = \ x : _var_6 . x
  : bool = let x : _var_2 = true;
	       y : _var_3 = false;
	       z : _var_4 = x in true
def__ : forall a : Type .  a ->? Unit
false : bool %(construct bool)%
if__then__else__ : forall a : Type .  Unit × a × a ->? a
not__ : Unit ->? Unit
notA : bool = case a of true -> false | 
			false -> true
true : bool %(construct bool)%
