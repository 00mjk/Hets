var s : Type; t : Type
class b < {x . x < s}
      %% assume s < t
class a < {x . x < t}
class a < b
class a < {y . y < t}
      %% ok (but only for simple tokens)
class a < {y . y < s}
class c, d < Type
class a < (c, d)
class e < a
      %% ok
class h < e
      %% ok 
class h < (a, b)
      %% ok 
class e < {x . x < t}
%% Classes ---------------------------------------------------------------
a < (c, d, {y . y < s}, b, {x . x < t})
b < {x . x < s}
c < Type
d < Type
e < ({x . x < t}, a)
h < (a, b, e)
%% Type Constructors -----------------------------------------------------
Pred : Type -> Type := \ a : Type . a ->? Unit
Unit : Type := Unit
__-->__ : Type- -> Type+ -> Type
__-->?__ : Type- -> Type+ -> Type
__->__ : Type- -> Type+ -> Type
__->?__ : Type- -> Type+ -> Type
__×__ : Type+ -> Type+ -> Type
s : Type %(var)%
t : Type %(var)%
%% Assumptions -----------------------------------------------------------
__/\__ : Unit × Unit ->? Unit %(Fun)%
__<=>__ : Unit × Unit ->? Unit %(Fun)%
__=__ : forall a : Type .  a × a ->? Unit %(Fun)%
__=>__ : Unit × Unit ->? Unit %(Fun)%
__=e=__ : forall a : Type .  a × a ->? Unit %(Fun)%
__\/__ : Unit × Unit ->? Unit %(Fun)%
__if__ : Unit × Unit ->? Unit %(Fun)%
__when__else__ : forall a : Type .  a × Unit × a ->? a %(Fun)%
def__ : forall a : Type .  a ->? Unit %(Fun)%
false : Unit %(Fun)%
if__then__else__ : forall a : Type .  Unit × a × a ->? a %(Fun)%
not__ : Unit ->? Unit %(Fun)%
true : Unit %(Fun)%
%% Diagnostics -----------------------------------------------------------
*** Hint 1.5, is type variable 's'
*** Hint 1.7, is type variable 't'
*** Warning 7.7, redeclared class 'a'
*** Warning 9.7, redeclared class 'a'
*** Warning 11.7, redeclared class 'a'
*** Warning 15.7, redeclared class 'a'
*** Warning 21.7, redeclared class 'h'
*** Warning 23.7, redeclared class 'e'
