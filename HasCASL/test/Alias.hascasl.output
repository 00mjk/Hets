var s : Type
type MyPred : Type -> Type := \ s : Type . s ->? Unit
type MyAlias : Type -> Type := \ t : Type . t ->? Unit
type a1 : Type -> Type -> Type := 
     \ (a : Type)(b : Type) . a -> b -> Unit
type a1 : Type -> Type -> Type := 
     \ (a : Type)(b : Type) . a -> b -> Unit
type a1 : Type -> Type -> Type := 
     \ (a : Type)(b : Type) . a -> b -> Unit
type a2 : Type -> Type -> Type := \ a : Type . a -> Unit
type a3 : Type -> Type -> Type := \ a : Type . a -> Unit
type a4 : Type -> Type -> Type := \ a : Type . a -> Unit
type a5(a : Type)
type a6(a : Type)
type a7 : Type -> Type := \ a : Type . a6 a -> Unit
%% Type Constructors -----------------------------------------------------
? : +Type -> Type
Logical : Type := ? Unit
MyAlias : Type -> Type := \ t : Type . t ->? Unit
MyPred : Type -> Type := \ s : Type . s ->? Unit
Pred : -Type -> Type := \ a : -Type . a ->? Unit
Unit : Type
__*__ : +Type -> +Type -> Type
__*__*__ : +Type -> +Type -> +Type -> Type
__*__*__*__ : +Type -> +Type -> +Type -> +Type -> Type
__*__*__*__*__ : +Type -> +Type -> +Type -> +Type -> +Type -> Type
__-->__ : -Type -> +Type -> Type < (__-->?__, __->__)
__-->?__ : -Type -> +Type -> Type < __->?__
__->__ : -Type -> +Type -> Type < __->?__
__->?__ : -Type -> +Type -> Type
a1 
: Type -> Type -> Type := \ (a : Type)(b : Type) . a -> b -> Unit
a2 : Type -> Type -> Type := \ a : Type . a -> Unit
a3 : Type -> Type -> Type := \ a : Type . a -> Unit
a4 : Type -> Type -> Type := \ a : Type . a -> Unit
a5 : Type -> Type
a6 : Type -> Type
a7 : Type -> Type := \ a : Type . a6 a -> Unit
%% Type Variables --------------------------------------------------------
s  : Type %(var_1)%
%% Assumptions -----------------------------------------------------------
__/\__ : ? Unit * ? Unit ->? Unit %(fun)%
__<=>__ : ? Unit * ? Unit ->? Unit %(fun)%
__=__ : forall a : Type . a * a ->? Unit %(fun)%
__=>__ : ? Unit * ? Unit ->? Unit %(fun)%
__=e=__ : forall a : Type . a * a ->? Unit %(fun)%
__\/__ : ? Unit * ? Unit ->? Unit %(fun)%
__if__ : ? Unit * ? Unit ->? Unit %(fun)%
__when__else__ : forall a : Type . a * ? Unit * a ->? a %(fun)%
bottom : forall a : Type . a %(fun)%
def__ : forall a : Type . a ->? Unit %(fun)%
false : Unit %(fun)%
not__ : ? Unit ->? Unit %(fun)%
true : Unit %(fun)%
¬__ : ? Unit ->? Unit %(fun)%
%% Diagnostics -----------------------------------------------------------
### Hint 1.5, is type variable 's'
### Hint 2.13, rebound type variable 's'
### Warning 3.14, missing kind for type variable  't'
### Warning 5.9, missing kind for type variable  'a'
### Warning 5.11, missing kind for type variable  'b'
### Warning 6.15, missing kind for type variable  'a'
### Warning 6.19, missing kind for type variable  'b'
### Hint 6.6, redeclared type 'a1'
### Warning 7.9, missing kind for type variable  'a'
### Warning 7.16, missing kind for type variable  'b'
### Hint 7.6, redeclared type 'a1'
### Warning 9.15, missing kind for type variable  'a'
### Warning 9.19, missing kind for type variable  'b'
### Warning 9.24-9.29, ignoring unused variable(s)
  b in 'a -> Unit'
### Warning 11.15, missing kind for type variable  'a'
### Hint 11.19, rebound type variable 'a'
### Warning 11.24-11.29, ignoring unused variable(s)
  a in 'a -> Unit'
*** Error 11.15, duplicates at '(11,19)' for 'a'
### Warning 13.9, missing kind for type variable  'a'
### Hint 13.11, rebound type variable 'a'
### Warning 13.16-13.21, ignoring unused variable(s)
  a in 'a -> Unit'
*** Error 13.9, duplicates at '(13,11)' for 'a'
### Warning 15.9, missing kind for type variable  'a'
### Warning 17.9, missing kind for type variable  'a'
*** Error 17.14-17.22, illegal recursive type synonym 'a5 a -> Unit'
### Warning 19.9, missing kind for type variable  'a'
### Warning 21.9, missing kind for type variable  'a'
### Warning 23.9, missing kind for type variable  'a'
*** Error 21.14-23.22, illegal recursive type synonym 'a7 a -> Unit'
