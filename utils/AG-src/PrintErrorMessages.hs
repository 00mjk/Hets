-- do not edit; automatically generated by UU_AG
module PrintErrorMessages where

import ErrorMessages
import UU_Pretty
import UU_Pretty_ext
import CommonTypes

import UU_Pretty
import UU_Pretty_ext
import CommonTypes
import TokenDef(Pos)

showAttr f a | f == _LHS = "synthesized attribute " ++ a
             | otherwise = "inherited attribute " ++ a ++ " of field " ++ f

ppAttr f a = text (f++"."++a)

infixr 5 +#+
(+#+) :: String -> String -> String
(+#+) s t = s ++ " " ++ t


wfill = fill . addSpaces. concat . map words
  where addSpaces (x:xs) = x:map addSpace xs
        addSpaces []     = []
        addSpace  [x]    | x `elem` ".,;:!?" = [x]
        addSpace  xs     = ' ':xs

ppError :: String         -- class of the error, should be either error or warning
        -> PP_Doc         -- error message
        -> PP_Doc         -- pattern
        -> PP_Doc         -- help, more info
        -> PP_Doc         -- action taken by AG
        -> Bool           -- verbose? show help and action?
        -> PP_Doc
ppError cl mesg pat hlp act verbose
  = let
      errorClass = "*** UU_AG" >#< cl >#< "***"
      message    = "ERROR    :" >#< mesg
      pattern    = "pattern  :" >#< pat
      help       = "help     :" >#< hlp
      action     = "action   :" >#< act
    in
      if verbose
         then vlist [errorClass,message,pattern,help,action]
         else vlist [errorClass,message]
-- Error -------------------------------------------------------
{-
   inherited attributes:
      verbose              : Bool

   chained attributes:

   synthesised attributes:
      pp                   : PP_Doc

-}
{-
   local variables for Error.CustomError:

-}
{-
   local variables for Error.DupAlt:

-}
{-
   local variables for Error.DupChild:

-}
{-
   local variables for Error.DupInhAttr:

-}
{-
   local variables for Error.DupLocal:

-}
{-
   local variables for Error.DupRule:

-}
{-
   local variables for Error.DupSynAttr:

-}
{-
   local variables for Error.DupSynonym:

-}
{-
   local variables for Error.MissingRule:

-}
{-
   local variables for Error.NameClash:

-}
{-
   local variables for Error.SuperfluousRule:

-}
{-
   local variables for Error.UndefAlt:

-}
{-
   local variables for Error.UndefAttr:

-}
{-
   local variables for Error.UndefChild:

-}
{-
   local variables for Error.UndefLocal:

-}
{-
   local variables for Error.UndefNont:

-}
-- semantic domain
type T_Error = (Bool) ->
               ((PP_Doc))
-- cata
sem_Error :: (Error) ->
             (T_Error)
sem_Error ((CustomError (_mesg))) =
    (sem_Error_CustomError (_mesg))
sem_Error ((DupAlt (_occ1) (_occ2) (_nt) (_con))) =
    (sem_Error_DupAlt (_occ1) (_occ2) (_nt) (_con))
sem_Error ((DupChild (_occ1) (_occ2) (_nt) (_con) (_name))) =
    (sem_Error_DupChild (_occ1) (_occ2) (_nt) (_con) (_name))
sem_Error ((DupInhAttr (_occ1) (_occ2) (_nt) (_attr))) =
    (sem_Error_DupInhAttr (_occ1) (_occ2) (_nt) (_attr))
sem_Error ((DupLocal (_nt) (_con) (_name))) =
    (sem_Error_DupLocal (_nt) (_con) (_name))
sem_Error ((DupRule (_occ1) (_occ2) (_nt) (_con) (_field) (_attr))) =
    (sem_Error_DupRule (_occ1) (_occ2) (_nt) (_con) (_field) (_attr))
sem_Error ((DupSynAttr (_occ1) (_occ2) (_nt) (_attr))) =
    (sem_Error_DupSynAttr (_occ1) (_occ2) (_nt) (_attr))
sem_Error ((DupSynonym (_occ1) (_occ2) (_nt))) =
    (sem_Error_DupSynonym (_occ1) (_occ2) (_nt))
sem_Error ((MissingRule (_nt) (_con) (_field) (_attr))) =
    (sem_Error_MissingRule (_nt) (_con) (_field) (_attr))
sem_Error ((NameClash (_occ1) (_occ2) (_nt) (_con) (_var))) =
    (sem_Error_NameClash (_occ1) (_occ2) (_nt) (_con) (_var))
sem_Error ((SuperfluousRule (_pos) (_nt) (_con) (_field) (_attr))) =
    (sem_Error_SuperfluousRule (_pos) (_nt) (_con) (_field) (_attr))
sem_Error ((UndefAlt (_pos) (_nt) (_con))) =
    (sem_Error_UndefAlt (_pos) (_nt) (_con))
sem_Error ((UndefAttr (_pos) (_nt) (_con) (_field) (_attr))) =
    (sem_Error_UndefAttr (_pos) (_nt) (_con) (_field) (_attr))
sem_Error ((UndefChild (_pos) (_nt) (_con) (_name))) =
    (sem_Error_UndefChild (_pos) (_nt) (_con) (_name))
sem_Error ((UndefLocal (_pos) (_nt) (_con) (_var))) =
    (sem_Error_UndefLocal (_pos) (_nt) (_con) (_var))
sem_Error ((UndefNont (_pos) (_nt))) =
    (sem_Error_UndefNont (_pos) (_nt))
sem_Error_CustomError :: (PP_Doc) ->
                         (T_Error)
sem_Error_CustomError (_mesg) (_lhs_verbose) =
    let 
    in  (let cl    = "error"
             pat   =  text "unknown"
             help = wfill ["not available."]
             act  = wfill ["unknown"]
         in ppError cl _mesg pat help act False
        )
sem_Error_DupAlt :: (Pos) ->
                    (Pos) ->
                    (Nonterminal) ->
                    (Constructor) ->
                    (T_Error)
sem_Error_DupAlt (_occ1) (_occ2) (_nt) (_con) (_lhs_verbose) =
    let 
    in  (let cl    = "warning"
             mesg  = wfill ["Repeated definition for alternative",_con
                           ,"of nonterminal", _nt, "."
                           ] >-<
                     wfill ["First definition:", (show _occ1),"."] >-<
                     wfill ["Other definition:", (show _occ2),"."]
             pat =     "DATA" >#< _nt
                   >-< indent 2 ("|" >#< _con >#< "...")
                   >-< indent 2 ("|" >#< _con >#< "...")
             help =  wfill ["The nonterminal",_nt,"has more than one alternative that"
                           ,"is labelled with the constructor name",_con,"."
                           ,"You should either rename or remove enough of them to make all"
                           ,"constructors of",_nt,"uniquely named."
                           ]
             act  = wfill [ "The first alternative of name",_con
                          ,"you have given for nonterminal",_nt
                          ,"is considered valid. All other alternatives have been discarded."
                          ]
         in ppError cl mesg pat help act _lhs_verbose
        )
sem_Error_DupChild :: (Pos) ->
                      (Pos) ->
                      (Nonterminal) ->
                      (Constructor) ->
                      (Name) ->
                      (T_Error)
sem_Error_DupChild (_occ1) (_occ2) (_nt) (_con) (_name) (_lhs_verbose) =
    let 
    in  (let cl    = "warning"
             mesg  = wfill ["Repeated declaration for field", _name, "of alternative"
                           ,_con, "of nonterminal", _nt, "."
                           ] >-<
                     wfill ["First definition:", (show _occ1),"."] >-<
                     wfill ["Other definition:", (show _occ2),"."]
             pat   =   "DATA" >#< _nt
                   >-< indent 2 ("|" >#< _con >#< (_name >|< ":..." >-< _name >|< ":..."))
             help =  wfill ["The alternative" , _con , "of nonterminal" , _nt
                           ,"has more than one field that is named"
                           , _name ++ ". Possibly they have different types."
                           ,"You should either rename or remove enough of them to make all fields of"
                           ,_con , "for nonterminal " , _nt , "uniquely named."
                           ]
             act  = wfill ["The last declaration with its corresponding type is considered valid."
                          ,"All others have been discarded."
                          ]
         in ppError cl mesg pat help act _lhs_verbose
        )
sem_Error_DupInhAttr :: (Pos) ->
                        (Pos) ->
                        (Nonterminal) ->
                        (Name) ->
                        (T_Error)
sem_Error_DupInhAttr (_occ1) (_occ2) (_nt) (_attr) (_lhs_verbose) =
    let 
    in  (let cl    = "error"
             mesg  = wfill ["Repeated declaration of inherited attribute", _attr
                           , "of nonterminal", _nt, "."
                           ] >-<
                     wfill ["First definition:", (show _occ1),"."] >-<
                     wfill ["Other definition:", (show _occ2),"."]
             pat  = "ATTR" >#< _nt >#< "[" >#< _attr >|< ":...,"
                                           >#< _attr >|< ":... | | ]"
             help =  wfill ["The identifier" , _attr ,"has been declared"
                           ,"as an inherited (or chained) attribute for nonterminal"
                           ,_nt , "more than once, with possibly different types."
                           ,"Delete all but one or rename them to make them unique."
                           ]
             act  = wfill ["One declaration with its corresponding type is considered valid."
                          ,"All others have been discarded. The generated program will probably not run."
                          ]
         in ppError cl mesg pat help act _lhs_verbose
        )
sem_Error_DupLocal :: (Nonterminal) ->
                      (Constructor) ->
                      (Name) ->
                      (T_Error)
sem_Error_DupLocal (_nt) (_con) (_name) (_lhs_verbose) =
    let 
    in  (let cl    = "error"
             mesg  = wfill ["Repeated definition for local variable", _name, "of alternative"
                           ,_con, "of nonterminal", _nt, "."
                           ]
             pat   =   "SEM" >#< _nt
                   >-< indent 2 ("|" >#< _con >#< "loc." >|< _name >#< "= ...")
                   >-< indent 2 ("|" >#< _con >#< "loc." >|< _name >#< "= ...")
             help =  wfill ["In the rules for alternative" , _con , "of nonterminal"
                           , _nt, ", more than one local variable with name "
                           ,_name , "has been defined." , "You should either rename or"
                           ,"remove enough of them to make all local variables of"
                           , _con , "for nonterminal " , _nt , "uniquely named."
                           ]
             act  = wfill ["The generated program will not run."]
         in ppError cl mesg pat help act _lhs_verbose
        )
sem_Error_DupRule :: (Pos) ->
                     (Pos) ->
                     (Nonterminal) ->
                     (Constructor) ->
                     (Name) ->
                     (Name) ->
                     (T_Error)
sem_Error_DupRule (_occ1) (_occ2) (_nt) (_con) (_field) (_attr) (_lhs_verbose) =
    let 
    in  (let cl    = "error"
             mesg  = wfill ["At constructor",_con, "of nonterminal", _nt, "there are two or more rules for"
                           ,showAttr _field _attr,"."
                           ]  >-<
                     wfill ["First rule:", (show _occ1),"."] >-<
                     wfill ["Other rule:", (show _occ2),"."]
             pat   =   "SEM" >#< _nt
                   >-< indent 2 ("|" >#< _con >#< ppAttr _field _attr >#< "= ...")
                   >-< indent 2 ("|" >#< _con >#< ppAttr _field _attr >#< "= ...")
             help =  wfill ["In the rules for alternative" , _con , "of nonterminal" , _nt
                                   ,", there is more than one rule for the" , showAttr _field _attr
                                   ,". You should either rename or remove enough of them to make all rules for alternative"
                                   ,_con , "of nonterminal " , _nt , "uniquely named."
                                   ]
             act  = wfill ["The first rule given is considered valid. All others have been discarded."]
         in ppError cl mesg pat help act _lhs_verbose
        )
sem_Error_DupSynAttr :: (Pos) ->
                        (Pos) ->
                        (Nonterminal) ->
                        (Name) ->
                        (T_Error)
sem_Error_DupSynAttr (_occ1) (_occ2) (_nt) (_attr) (_lhs_verbose) =
    let 
    in  (let cl    = "error"
             mesg  = wfill ["Repeated declaration of synthesized attribute", _attr
                           , "of nonterminal", _nt, "."
                           ] >-<
                     wfill ["First definition:", (show _occ1),"."] >-<
                     wfill ["Other definition:", (show _occ2),"."]
             pat  = "ATTR" >#< _nt >#< "[ | |" >#< _attr >|< ":...,"
                                               >#< _attr >|< ":... ]"
             help =  wfill ["The identifier" , _attr ,"has been declared"
                           ,"as a synthesized (or chained) attribute for nonterminal"
                           ,_nt , "more than once, with possibly different types."
                           ,"Delete all but one or rename them to make them unique."
                           ]
             act  = wfill ["One declaration with its corresponding type is considered valid."
                          ,"All others have been discarded. The generated program will probably not run."
                          ]
         in ppError cl mesg pat help act _lhs_verbose
        )
sem_Error_DupSynonym :: (Pos) ->
                        (Pos) ->
                        (Nonterminal) ->
                        (T_Error)
sem_Error_DupSynonym (_occ1) (_occ2) (_nt) (_lhs_verbose) =
    let 
    in  (let cl    = "warning"
             mesg  = wfill ["Definition of type synonym", _nt, "clashes with another"
                           ,"type synonym or a data definition."
                           ] >-<
                     wfill ["First definition:", (show _occ1),"."] >-<
                     wfill ["Type synonym :"   , (show _occ2),"."]
             pat =     "DATA" >#< _nt
                   >-< indent 2 ("|" >#< "...")
                   >-< "TYPE" >#< _nt >#< "=" >#<  "..."
             help =  wfill ["A type synonym with name", _nt
                           ,"has been given while there already is a DATA or TYPE"
                           ,"definition with the same name."
                           ,"You should either rename or remove the type synonym."
                           ]
             act  = wfill [ "The clashing type synonym will be ignored."
                          ]
         in ppError cl mesg pat help act _lhs_verbose
        )
sem_Error_MissingRule :: (Nonterminal) ->
                         (Constructor) ->
                         (Name) ->
                         (Name) ->
                         (T_Error)
sem_Error_MissingRule (_nt) (_con) (_field) (_attr) (_lhs_verbose) =
    let 
    in  (let cl    = "warning"
             mesg  = wfill ["Missing rule for", showAttr _field _attr , "in alternative"
                           , _con , "of nonterminal",_nt ,"."
                           ]
             pat   =   "SEM" >#< _nt
                   >-< indent 2 ("|" >#< _con >#< ppAttr _field _attr >#< "= ...")
             help  = wfill ["The", showAttr _field _attr, "in alternative", _con
                           , "of nonterminal", _nt, "is missing and cannot be inferred"
                           ,"by a copy rule, so you should add an appropriate rule."
                           ]
             act  = wfill ["The value of the attribute has been set to undefined."]
         in ppError cl mesg pat help act _lhs_verbose
        )
sem_Error_NameClash :: (Pos) ->
                       (Pos) ->
                       (Nonterminal) ->
                       (Constructor) ->
                       (Name) ->
                       (T_Error)
sem_Error_NameClash (_occ1) (_occ2) (_nt) (_con) (_var) (_lhs_verbose) =
    let 
    in  (let cl    = "error"
             mesg  = wfill ["At constructor",_con, "of nonterminal", _nt, "local variabele", _var
                           , "clashes with field", _var,"."
                           ]  >-<
                     wfill ["Field definition:", (show _occ1),"."] >-<
                     wfill ["Local definition:", (show _occ2),"."]
             pat  =   "DATA" >#< _nt
                  >-< indent 2 ("|" >#< _con >#< "..." >#< _var >|< ":...")
                  >-< "SEM" >#< _nt
                  >-< indent 2 ("|" >#< _con >#< "loc." >|< _var >#< "= ...")
             help =  wfill ["The name" , _var , "occurs as the name of a field in the definition"
                                   , "of alternative" , _con , "of nonterminal" , _nt
                                   ,", but also as the name of a local variable defined for this alternative."
                                   ,"Since both field names and local variables are sharing one namespace, this results"
                                   ,"in a name clash. You should remove or rename either the field or the local variable."
                                   ]
             act  = wfill ["The generated program will not run."]
         in ppError cl mesg pat help act _lhs_verbose
        )
sem_Error_SuperfluousRule :: (Pos) ->
                             (Nonterminal) ->
                             (Constructor) ->
                             (Name) ->
                             (Name) ->
                             (T_Error)
sem_Error_SuperfluousRule (_pos) (_nt) (_con) (_field) (_attr) (_lhs_verbose) =
    let 
    in  (let cl    = "warning"
             mesg  = wfill ["Rule for non-existing", showAttr _field _attr , "at alternative"
                           , _con , "of nonterminal",_nt, "."
                           ]  >-<
                     wfill ["Location:", (show _pos),"."]
             pat   =   "SEM" >#< _nt
                   >-< indent 2 ("|" >#< _con >#< ppAttr _field _attr >#< "= ...")
             help =  wfill ["There is a rule for" , showAttr _field _attr , "in the definitions for alternative" , _con
                           ,"of nonterminal" , _nt ++ ", but this attribute does not exist. Maybe you misspelled it?"
                           ,"Otherwise either remove the rule or add an appropriate attribute definition."
                           ]
             act  = wfill ["The rule has been ignored."]
         in ppError cl mesg pat help act _lhs_verbose
        )
sem_Error_UndefAlt :: (Pos) ->
                      (Nonterminal) ->
                      (Constructor) ->
                      (T_Error)
sem_Error_UndefAlt (_pos) (_nt) (_con) (_lhs_verbose) =
    let 
    in  (let cl    = "warning"
             mesg  = wfill ["Constructor", _con, "of nonterminal" ,_nt, "is  not defined."
                           ]  >-<
                     wfill ["Location:", (show _pos),"."]
             pat   =   "DATA" >#< _nt
                   >-< indent 2 ("|" >#< _con >#< "...")
             help =  wfill ["There are rules for alternative" , _con , "of nonterminal" , _nt
                                   ,", but there is no definition for this alternative in the definitions of the"
                                   ,"nonterminal" , _nt ++". Maybe you misspelled it? Otherwise insert a definition."
                                   ]
             act  = wfill ["All rules for the unknown alternative have been ignored."]
         in ppError cl mesg pat help act _lhs_verbose
        )
sem_Error_UndefAttr :: (Pos) ->
                       (Nonterminal) ->
                       (Constructor) ->
                       (Name) ->
                       (String) ->
                       (T_Error)
sem_Error_UndefAttr (_pos) (_nt) (_con) (_field) (_attr) (_lhs_verbose) =
    let 
    in  (let cl    = "error"
             mesg  = wfill ["Undefined", showAttr _field _attr, "at constructor"
                           , _con , "of nonterminal",_nt, "."
                           ]  >-<
                     wfill ["Location:", (show _pos),"."]
             pat   = "SEM" >#< _nt
                   >-< indent 2 ("|" >#< _con >#< "<field>.<attr> = "
                                     >#< "..." >#< ppAttr _field _attr >#< "...")
             help =  wfill ["A rule in the definitions for alternative" , _con ,"of nonterminal"
                           , _nt , "contains an attribute that is not defined"
                           ,"Maybe you misspelled it?"
                           ,"Otherwise either remove the rule or add an appropriate attribute definition."
                           ]
             act  = wfill ["The generated program will not run."]
         in ppError cl mesg pat help act _lhs_verbose
        )
sem_Error_UndefChild :: (Pos) ->
                        (Nonterminal) ->
                        (Constructor) ->
                        (Name) ->
                        (T_Error)
sem_Error_UndefChild (_pos) (_nt) (_con) (_name) (_lhs_verbose) =
    let 
    in  (let cl    = "warning"
             mesg  = wfill ["Constructor", _con, "of nonterminal" ,_nt
                           , "does not have a field named", _name , "."
                           ]  >-<
                     wfill ["Location:", (show _pos),"."]
             pat   =   "DATA" >#< _nt
                   >-< indent 2 ("|" >#< _con >#< "..." >#< _name >|< ":...")
             help =  wfill ["There are rules that define inherited attributes of field" , _name
                                   ,"in alternative" , _con , "of nonterminal" , _nt
                                   ,", but this field does not exist in the definition of the alternative."
                                   ,"Maybe you misspelled it? Otherwise insert the field into the definition."
                                   ]
             act  = wfill ["All rules for the unknown field have been ignored."]
         in ppError cl mesg pat help act _lhs_verbose
        )
sem_Error_UndefLocal :: (Pos) ->
                        (Nonterminal) ->
                        (Constructor) ->
                        (String) ->
                        (T_Error)
sem_Error_UndefLocal (_pos) (_nt) (_con) (_var) (_lhs_verbose) =
    let 
    in  (let cl    = "error"
             mesg  = wfill ["Undefined local variable or field", _var, "at constructor"
                           , _con , "of nonterminal",_nt, "."
                           ]  >-<
                     wfill ["Location:", (show _pos),"."]
             pat   = "SEM" >#< _nt
                   >-< indent 2 ("|" >#< _con >#< "<field>.<attr> = "
                                     >#< "..." >#< _var >#< "..." )
             help =  wfill ["A rule in the definitions for alternative" , _con ,"of nonterminal"
                           , _nt , "contains a local variable or field name that is not defined"
                           ,"Maybe you misspelled it?"
                           ,"Otherwise either remove the rule or add an appropriate definition."
                           ]
             act  = wfill ["The generated program will not run."]
         in ppError cl mesg pat help act _lhs_verbose
        )
sem_Error_UndefNont :: (Pos) ->
                       (Nonterminal) ->
                       (T_Error)
sem_Error_UndefNont (_pos) (_nt) (_lhs_verbose) =
    let 
    in  (let cl    = "warning"
             mesg  = wfill ["Nonterminal", _nt, "is not defined."
                           ]  >-<
                     wfill ["Location:", show _pos,"."]
             pat   = "DATA" >#< _nt >#< "..."
             help =  wfill ["There are attributes and/or rules for nonterminal" , _nt ++ ", but there is no definition"
                                   , "for" , _nt ++ ". Maybe you misspelled it? Otherwise insert a definition."
                                   ]
             act  = wfill ["Everything regarding the unknown nonterminal has been ignored."]
         in ppError cl mesg pat help act _lhs_verbose
        )
-- Errors ------------------------------------------------------
{-
   inherited attributes:
      verbose              : Bool

   chained attributes:

   synthesised attributes:
      pp                   : PP_Doc

-}
{-
   local variables for Errors.Cons:

-}
{-
   local variables for Errors.Nil:

-}
-- semantic domain
type T_Errors = (Bool) ->
                ((PP_Doc))
-- cata
sem_Errors :: (Errors) ->
              (T_Errors)
sem_Errors (list) =
    (foldr (sem_Errors_Cons) (sem_Errors_Nil) ((map sem_Error list)))
sem_Errors_Cons :: (T_Error) ->
                   (T_Errors) ->
                   (T_Errors)
sem_Errors_Cons (_hd) (_tl) (_lhs_verbose) =
    let ( _hd_pp) =
            (_hd (_lhs_verbose))
        ( _tl_pp) =
            (_tl (_lhs_verbose))
    in  (""     >-<
         _hd_pp >-<
         _tl_pp
        )
sem_Errors_Nil :: (T_Errors)
sem_Errors_Nil (_lhs_verbose) =
    let 
    in  (empty)

