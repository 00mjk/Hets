{- UU_AG
 - Copyright:  S. Doaitse Swierstra, Arthur I. Baars and Andres Loeh
               Department of Computer Science
               Utrecht University
               P.O. Box 80.089
               3508 TB UTRECHT
               the Netherlands
               {swierstra,arthurb,andres}@cs.uu.nl -}
INCLUDE "Code.ag"

imports
{
import UU_Pretty
import UU_Pretty_ext
import Code
}

types
{
type PP_Docs = [PP_Doc]
}



ATTR Program                            [ width:{Int} | | output:{String} ]
ATTR Expr Decl DataAlt Type Lhs         [ | | pp:{PP_Doc} ]

ATTR Exprs DataAlts Types  Decls        [ | | pps: {[PP_Doc]} ]

SEM Exprs
  | Cons lhs.pps = @hd.pp : @tl.pps
  | Nil  lhs.pps = []

SEM DataAlts
  | Cons lhs.pps = @hd.pp : @tl.pps
  | Nil  lhs.pps = []

SEM Types
  | Cons lhs.pps = @hd.pp : @tl.pps
  | Nil  lhs.pps = []

SEM Decls
  | Cons lhs.pps = @hd.pp : @tl.pps
  | Nil  lhs.pps = []

SEM Program
  | Program    lhs.output  = foldr (\x y -> x . ('\n':) . y) id
                             (map (\d -> disp d @lhs.width)  @decls.pps)
                             ""

SEM Decl
  | Decl       lhs.pp      = @lhs.pp >#< "="
                             >-< indent 4 @rhs.pp
  | Data       lhs.pp      = "data" >#< @name
                                     >|< case @alts.pps of
                                          [] -> empty
                                          (x:xs) ->              " =" >#<  x
                                                 >-< vlist (map (" |" >#<) xs)


  | Type       lhs.pp      = "type" >#< @name >#< "=" >#< @tp.pp
  | TSig       lhs.pp      = @name >#< "::" >#< @tp.pp
  | Comment    lhs.pp      = if '\n' `elem` @txt
                               then "{-" >-< vlist (lines @txt) >-< "-}"
                               else "--" >#< @txt

SEM Expr
  | Let        lhs.pp      = (    "let" >#< (vlist @decls.pps)
                              >-< "in " >#< @body.pp
                             )
  | TupleExpr  lhs.pp      = pp_block "(" ")" "," @exprs.pps
  | App        lhs.pp      = pp_parens $ @name >#< hv_sp (map pp_parens @args.pps)
  | SimpleExpr lhs.pp      = text @txt

SEM DataAlt
  | DataAlt    lhs.pp      = @name >#< hv_sp (map (pp_parens.text) @args)

SEM Lhs
  | Pattern    lhs.pp      = pp_parens @pat
  | TupleLhs   lhs.pp      = ("(" >|< pp_block " " ")" "," (map text @comps))
  | Fun        lhs.pp      = @name >#< hv_sp (map pp_parens @args.pps)

SEM Type  [ | | prec:Int ]
  | Arr        lhs.prec    = 2
                  .pp      = @loc.l >#< "->" >-< @loc.r
               loc.l       = if @left.prec  <= 2 then pp_parens @left.pp  else @left.pp
                  .r       = if @right.prec <  2 then pp_parens @right.pp else @right.pp

  | TupleType  lhs.prec    = 5
                  .pp   = pp_block "(" ")" "," @tps.pps

  | List       lhs.prec    = 5
                  .pp      = "[" >|< @tp.pp >|< "]"

  | SimpleType lhs.prec    = 5
                  .pp      = pp_parens $ text @txt