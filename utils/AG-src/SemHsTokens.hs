-- do not edit; automatically generated by UU_AG
module SemHsTokens where

import HsToken
import ErrorMessages
import CommonTypes
import UU_Pretty
import TokenDef
import UU_Pretty
import UU_Pretty_ext
import List
import Char

import TokenDef(Pos)

showTokens :: [(Pos,String)] -> [String]
showTokens [] = []
showTokens xs = map showLine . shiftLeft . getLines $ xs
getLines []         = []
getLines ((p,t):xs) =       let (txs,rest)     = span sameLine xs
                                sameLine (q,_) = line p == line q
                            in ((p,t):txs) : getLines rest
shiftLeft lns =        let sh = let m = minimum . checkEmpty . filter (>=1) . map (column.fst.head) $ lns
                                    checkEmpty [] = [1]
                                    checkEmpty x  = x
                                in if m >= 1 then m-1 else 0
                           shift (p,t) = (if column p >= 1 then p{column = column p - sh} else p, t)
                       in map (map shift) lns
showLine ts =        let f (p,t) r = let ct = column p
                                     in \c -> spaces (ct-c) ++ t ++ r (length t+ct)
                         spaces x | x < 0 = ""
                                  | otherwise = replicate x ' '
                     in foldr f (const "") ts 1


showStrShort xs = "\"" ++ concatMap f xs ++ "\""
  where f '"' = "\\\""
        f x   = showCharShort' x

showCharShort '\'' = "'" ++ "\\'" ++ "'"
showCharShort c    = "'" ++ showCharShort' c ++ "'"

showCharShort' '\a'  = "\\a"
showCharShort' '\b'  = "\\b"
showCharShort' '\t'  = "\\t"
showCharShort' '\n'  = "\\n"
showCharShort' '\r'  = "\\r"
showCharShort' '\f'  = "\\f"
showCharShort' '\v'  = "\\v"
showCharShort' '\\'  = "\\\\"
showCharShort' x | isPrint x = [x]
                 | otherwise = '\\' : show (ord x)
-- HsToken -----------------------------------------------------
{-
   inherited attributes:
      attrs                : [(String,String)]
      con                  : String
      locals               : [String]
      nt                   : String

   chained attributes:
      errors               : Errors

   synthesised attributes:
      tok                  : (Pos,String)
      usedAttrs            : [(String,String)]
      usedLocals           : [String]

-}
{-
   local variables for HsToken.AGField:

-}
{-
   local variables for HsToken.AGLocal:

-}
{-
   local variables for HsToken.CharToken:

-}
{-
   local variables for HsToken.Err:

-}
{-
   local variables for HsToken.HsToken:

-}
{-
   local variables for HsToken.StrToken:

-}
-- semantic domain
type T_HsToken = ([(String,String)]) ->
                 (String) ->
                 (Errors) ->
                 ([String]) ->
                 (String) ->
                 ((Errors),((Pos,String)),([(String,String)]),([String]))
-- cata
sem_HsToken :: (HsToken) ->
               (T_HsToken)
sem_HsToken ((AGField (_field) (_attr) (_pos))) =
    (sem_HsToken_AGField (_field) (_attr) (_pos))
sem_HsToken ((AGLocal (_var) (_pos))) =
    (sem_HsToken_AGLocal (_var) (_pos))
sem_HsToken ((CharToken (_value) (_pos))) =
    (sem_HsToken_CharToken (_value) (_pos))
sem_HsToken ((Err (_mesg) (_pos))) =
    (sem_HsToken_Err (_mesg) (_pos))
sem_HsToken ((HsToken (_value) (_pos))) =
    (sem_HsToken_HsToken (_value) (_pos))
sem_HsToken ((StrToken (_value) (_pos))) =
    (sem_HsToken_StrToken (_value) (_pos))
sem_HsToken_AGField :: (String) ->
                       (String) ->
                       (Pos) ->
                       (T_HsToken)
sem_HsToken_AGField (_field) (_attr) (_pos) (_lhs_attrs) (_lhs_con) (_lhs_errors) (_lhs_locals) (_lhs_nt) =
    let 
    in  (if (_field,_attr) `elem` _lhs_attrs
               then _lhs_errors
               else UndefAttr _pos _lhs_nt _lhs_con _field _attr : _lhs_errors
        ,(_pos, '_' : _field ++ "_" ++ _attr)
        ,[(_field,_attr)]
        ,[]
        )
sem_HsToken_AGLocal :: (String) ->
                       (Pos) ->
                       (T_HsToken)
sem_HsToken_AGLocal (_var) (_pos) (_lhs_attrs) (_lhs_con) (_lhs_errors) (_lhs_locals) (_lhs_nt) =
    let 
    in  (if _var `elem` _lhs_locals
               then _lhs_errors
               else UndefLocal _pos _lhs_nt _lhs_con _var : _lhs_errors
        ,(_pos, '_' : _var)
        ,[]
        ,[_var]
        )
sem_HsToken_CharToken :: (String) ->
                         (Pos) ->
                         (T_HsToken)
sem_HsToken_CharToken (_value) (_pos) (_lhs_attrs) (_lhs_con) (_lhs_errors) (_lhs_locals) (_lhs_nt) =
    let 
    in  (_lhs_errors
        ,(_pos, if null _value
                   then ""
                   else showCharShort (head _value)
         )
        ,[]
        ,[]
        )
sem_HsToken_Err :: (String) ->
                   (Pos) ->
                   (T_HsToken)
sem_HsToken_Err (_mesg) (_pos) (_lhs_attrs) (_lhs_con) (_lhs_errors) (_lhs_locals) (_lhs_nt) =
    let 
    in  (let m = text _mesg >#< "at" >#< show _pos >#< "."
         in CustomError m : _lhs_errors
        ,(_pos, "")
        ,[]
        ,[]
        )
sem_HsToken_HsToken :: (String) ->
                       (Pos) ->
                       (T_HsToken)
sem_HsToken_HsToken (_value) (_pos) (_lhs_attrs) (_lhs_con) (_lhs_errors) (_lhs_locals) (_lhs_nt) =
    let 
    in  (_lhs_errors,(_pos, _value),[],[])
sem_HsToken_StrToken :: (String) ->
                        (Pos) ->
                        (T_HsToken)
sem_HsToken_StrToken (_value) (_pos) (_lhs_attrs) (_lhs_con) (_lhs_errors) (_lhs_locals) (_lhs_nt) =
    let 
    in  (_lhs_errors,(_pos, showStrShort _value),[],[])
-- HsTokens ----------------------------------------------------
{-
   inherited attributes:
      attrs                : [(String,String)]
      con                  : String
      locals               : [String]
      nt                   : String

   chained attributes:
      errors               : Errors

   synthesised attributes:
      tks                  : [(Pos,String)]
      usedAttrs            : [(String,String)]
      usedLocals           : [String]

-}
{-
   local variables for HsTokens.Cons:

-}
{-
   local variables for HsTokens.Nil:

-}
-- semantic domain
type T_HsTokens = ([(String,String)]) ->
                  (String) ->
                  (Errors) ->
                  ([String]) ->
                  (String) ->
                  ((Errors),([(Pos,String)]),([(String,String)]),([String]))
-- cata
sem_HsTokens :: (HsTokens) ->
                (T_HsTokens)
sem_HsTokens (list) =
    (foldr (sem_HsTokens_Cons) (sem_HsTokens_Nil) ((map sem_HsToken list)))
sem_HsTokens_Cons :: (T_HsToken) ->
                     (T_HsTokens) ->
                     (T_HsTokens)
sem_HsTokens_Cons (_hd) (_tl) (_lhs_attrs) (_lhs_con) (_lhs_errors) (_lhs_locals) (_lhs_nt) =
    let ( _hd_errors,_hd_tok,_hd_usedAttrs,_hd_usedLocals) =
            (_hd (_lhs_attrs) (_lhs_con) (_tl_errors) (_lhs_locals) (_lhs_nt))
        ( _tl_errors,_tl_tks,_tl_usedAttrs,_tl_usedLocals) =
            (_tl (_lhs_attrs) (_lhs_con) (_lhs_errors) (_lhs_locals) (_lhs_nt))
    in  (_hd_errors,_hd_tok : _tl_tks,_hd_usedAttrs ++ _tl_usedAttrs,_hd_usedLocals ++ _tl_usedLocals)
sem_HsTokens_Nil :: (T_HsTokens)
sem_HsTokens_Nil (_lhs_attrs) (_lhs_con) (_lhs_errors) (_lhs_locals) (_lhs_nt) =
    let 
    in  (_lhs_errors,[],[],[])
-- HsTokensRoot ------------------------------------------------
{-
   inherited attributes:
      attrs                : [(String,String)]
      con                  : String
      locals               : [String]
      nt                   : String

   chained attributes:
      errors               : Errors

   synthesised attributes:
      pp                   : PP_Doc
      usedAttrs            : [(String,String)]
      usedLocals           : [String]

-}
{-
   local variables for HsTokensRoot.HsTokensRoot:

-}
-- semantic domain
type T_HsTokensRoot = ([(String,String)]) ->
                      (String) ->
                      (Errors) ->
                      ([String]) ->
                      (String) ->
                      ((Errors),(PP_Doc),([(String,String)]),([String]))
-- cata
sem_HsTokensRoot :: (HsTokensRoot) ->
                    (T_HsTokensRoot)
sem_HsTokensRoot ((HsTokensRoot (_tokens))) =
    (sem_HsTokensRoot_HsTokensRoot ((sem_HsTokens (_tokens))))
sem_HsTokensRoot_HsTokensRoot :: (T_HsTokens) ->
                                 (T_HsTokensRoot)
sem_HsTokensRoot_HsTokensRoot (_tokens) (_lhs_attrs) (_lhs_con) (_lhs_errors) (_lhs_locals) (_lhs_nt) =
    let ( _tokens_errors,_tokens_tks,_tokens_usedAttrs,_tokens_usedLocals) =
            (_tokens (_lhs_attrs) (_lhs_con) (_lhs_errors) (_lhs_locals) (_lhs_nt))
    in  (_tokens_errors
        ,let lns = showTokens _tokens_tks
         in  vlist (map text lns)
        ,_tokens_usedAttrs
        ,_tokens_usedLocals
        )

