2005-09-23 - Hendrik Iben
The current status of Omdoc<->Hets conversion is experimental.
A DGraph that has been created from a CASL-File can be written out as an OMDoc-File that in turn can be used to reconstruct the DGraph to some degree.

To experiment with the code, start a GHCi-session by 'make ghci' (the Makefile is a modified version of the one to compile HetCATS).
In GHCi load the file 'Integrate.hs' and wait for the interpreter to finish loading all needed modules.
You can load create a DGraph by 

	dg <- Hets.getDG "<caslfile>"
	
and create OMDoc-data with

	let omdoc = devGraphToOmdoc dg "<name>"
	
currently you need to specify the name for the OMDoc that really should be created from the library-name.
To write out the OMDoc-data to a file use

	writeOmdoc omdoc "<filename>"
	
This step may take a while...

There are currently two ways of creating a DGraph from an OMDoc.
The first way is a very simple approach that will just create a DGraph from OMDoc data and nothing more.

Load the omdoc-file by

	(Right omdoc) <- loadOmdoc "<filename>"

The result of this is either the omdoc data or an IOError (to the left...).

create the DGraph by

	let (dg,name) = omdocToDevGraph omdoc

where dg is the development graph and name is a string containing the name of this OMDoc (the one you specified when creating the OMDoc-data).

You can get a graphical representation of this DGraph by

	showDGAndName (dg,name)

But you will not be able to see any referenced theory because the library-environment is empty.

The second way of creating a DGraph from an OMDoc is a bit more complicated.
By using this way, external references to imported theories are respected but for the price that the location of the files has to be determined first.

Create a graph of imports by

	ig <- makeImportGraph "<filename>"

This step may take a while...
Process the graph further with
	
	let igdg = processImportGraph ig
	let unhyb = hybridGToDGraphG igdg
	let (ln,dg,lenv) = dGraphGToLibEnv unhyb

Now you have a library-name (ln), the DGraph (dg) and a library-environment for all external references.

You can get a graphical representation of this by

	Hets.showGraph "" Driver.Options.defaultHetcatsOpts (Just (ln,"",dg,lenv))

Please note that (currently) converting a DGraph to OMDoc does not create OMDoc-data for external libraries. You have to convert them manually if you want to be able to create a library-environment with them.

The OMDoc-files that are created try to be very close to the OMDoc-DTD v1.1 but there may be some violations of the DTD.

I have included the sources for a slightly modified Haskell-XML-Toolbox version 5.2 plus some needed modules for HTTP-transport. There are sources for HXT 4.02 in the repository but I did not want to replace them by this modified version.
