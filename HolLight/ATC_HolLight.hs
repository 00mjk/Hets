{-# OPTIONS -w -O0 #-}
{- |
Module      :  HolLight/ATC_HolLight.der.hs
Description :  generated Typeable, ShATermConvertible instances
Copyright   :  (c) DFKI Bremen 2008
License     :  GPLv2 or higher, see LICENSE.txt

Maintainer  :  Christian.Maeder@dfki.de
Stability   :  provisional
Portability :  non-portable(overlapping Typeable instances)

Automatic derivation of instances via DrIFT-rule Typeable, ShATermConvertible
  for the type(s):
'HolLight.Sign.Sign'
'HolLight.Sentence.Sentence'
-}

{-
  Generated by 'genRules' (automatic rule generation for DrIFT). Don't touch!!
  dependency files:
HolLight/Sign.hs
HolLight/Sentence.hs
-}

module HolLight.ATC_HolLight () where

import ATC.AS_Annotation
import ATerm.Lib
import Data.Set
import Data.Typeable
import HolLight.Sentence
import HolLight.Sign

{-! for HolLight.Sign.Sign derive : Typeable !-}
{-! for HolLight.Sentence.Sentence derive : Typeable !-}

{-! for HolLight.Sign.Sign derive : ShATermConvertible !-}
{-! for HolLight.Sentence.Sentence derive : ShATermConvertible !-}

-- Generated by DrIFT, look but don't touch!

instance ShATermConvertible Sentence where
  toShATermAux att0 xv = case xv of
    Sentence -> return $ addATerm (ShAAppl "Sentence" [] []) att0
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "Sentence" [] _ -> (att0, Sentence)
    u -> fromShATermError "Sentence" u

_tcSentenceTc :: TyCon
_tcSentenceTc = mkTyCon "HolLight.Sentence.Sentence"
instance Typeable Sentence where
    typeOf _ = mkTyConApp _tcSentenceTc []

_tcSignTc :: TyCon
_tcSignTc = mkTyCon "HolLight.Sign.Sign"
instance Typeable Sign where
    typeOf _ = mkTyConApp _tcSignTc []

instance ShATermConvertible Sign where
  toShATermAux att0 xv = case xv of
    Sign a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "Sign" [a'] []) att1
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "Sign" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, Sign a') }
    u -> fromShATermError "Sign" u
