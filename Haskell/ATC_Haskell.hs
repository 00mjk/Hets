{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "Haskell/ATC_Haskell.der.hs" #-}
{-
  Generated by 'genRules' (automatic rule generation for DrIFT). Don't touch!!
  dependency files: Haskell/Hatchet/AnnotatedHsSyn.hs Haskell/Hatchet/MultiModuleBasics.hs Haskell/Hatchet/HsSyn.hs Haskell/Hatchet/AnnotatedHsSyn.hs Haskell/Hatchet/MultiModuleBasics.hs Haskell/Hatchet/Representation.hs Haskell/Hatchet/Class.hs Haskell/Hatchet/KindInference.hs Haskell/Hatchet/Env.hs
-}

module Haskell.ATC_Haskell where

import CASL.ATC_CASL
import Common.ATerm.Lib
import Haskell.Hatchet.DependAnalysis
import Haskell.Hatchet.HsPretty
import Haskell.Hatchet.Type
import Haskell.Hatchet.TypeUtils
import Haskell.Hatchet.TypeSynonyms
import Haskell.Hatchet.Utils
import List
import qualified Haskell.Hatchet.Utils as Utils
import Haskell.Hatchet.PPrint
import Haskell.Hatchet.HsSyn
import Haskell.Hatchet.Representation
import Haskell.Hatchet.Rename
import Haskell.Hatchet.ParseLib
import Haskell.Hatchet.Class
import Haskell.Hatchet.FiniteMaps
import Haskell.Hatchet.KindInference
import Haskell.Hatchet.Env
import Haskell.Hatchet.MultiModuleBasics
import Haskell.Hatchet.AnnotatedHsSyn


import Haskell.Hatchet.FiniteMaps

{-| Exclude: State |-}
{-| Exclude: Binding |-}
{-| Exclude: VarName |-}
{-| Exclude: KI |-}
{-| Exclude: Qual |-}
{-| Exclude: Assump |-}

instance ATermConvertible Assump where
    toShATerm att0 (an :>: s) =
	let (att1,an') = toShATerm att0 an
	    (att2,s') = toShATerm att1 s 
	    lat = [an',s']
	in addATerm (ShAAppl "Assump_"  lat []) att0
    fromShATerm att =
	case aterm of
	    (ShAAppl "Assump_" [an',s' ] _) ->
		let an = fromShATerm (getATermByIndex1 an' att)
		    s  = fromShATerm (getATermByIndex1 s' att)
	        in (an :>: s)
	    u -> fromShATermError "Assump" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"Assump\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"Assump\""

instance (ATermConvertible a) => ATermConvertible (Qual a) where
    toShATerm att0 (p :=> t) =
	let (att1,p') = toShATerm att0 p
	    (att2,t') = toShATerm att1 t 
	    lat = [p',t']
	in addATerm (ShAAppl "Qual_"  lat []) att0
    fromShATerm att =
	case aterm of
	    (ShAAppl "Qual_" [an',s' ] _) ->
		let an = fromShATerm (getATermByIndex1 an' att)
		    s  = fromShATerm (getATermByIndex1 s' att)
	        in (an :=> s)
	    u -> fromShATermError "Qual" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"Qual\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"Qual\""


instance (Ord a, ATermConvertible a, ATermConvertible b) => 
    ATermConvertible (FiniteMap a b) where
    toShATerm att fm = toShATerm att $ toListFM fm 
    fromShATerm att  = listToFM $ fromShATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"FiniteMap\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"FiniteMap\""

{-! for Scheme derive : ShATermConvertible !-}
{-! for Pred derive : ShATermConvertible !-}
{-! for Kindvar derive : ShATermConvertible !-}
{-! for Kind derive : ShATermConvertible !-}
{-! for Tycon derive : ShATermConvertible !-}
{-! for Tyvar derive : ShATermConvertible !-}
{-! for Type derive : ShATermConvertible !-}
{-! for ModuleInfo derive : ShATermConvertible !-}
{-! for AHsGuardedAlt derive : ShATermConvertible !-}
{-! for AHsGuardedAlts derive : ShATermConvertible !-}
{-! for AHsAlt derive : ShATermConvertible !-}
{-! for AHsFieldUpdate derive : ShATermConvertible !-}
{-! for AHsStmt derive : ShATermConvertible !-}
{-! for AHsPatField derive : ShATermConvertible !-}
{-! for AHsPat derive : ShATermConvertible !-}
{-! for AHsExp derive : ShATermConvertible !-}
{-! for AHsLiteral derive : ShATermConvertible !-}
{-! for AHsType derive : ShATermConvertible !-}
{-! for AHsQualType derive : ShATermConvertible !-}
{-! for AHsGuardedRhs derive : ShATermConvertible !-}
{-! for AHsRhs derive : ShATermConvertible !-}
{-! for AHsBangType derive : ShATermConvertible !-}
{-! for AHsConDecl derive : ShATermConvertible !-}
{-! for AHsMatch derive : ShATermConvertible !-}
{-! for AHsDecl derive : ShATermConvertible !-}
{-! for AHsAssoc derive : ShATermConvertible !-}
{-! for AHsImportSpec derive : ShATermConvertible !-}
{-! for AHsImportDecl derive : ShATermConvertible !-}
{-! for AHsExportSpec derive : ShATermConvertible !-}
{-! for AHsModule derive : ShATermConvertible !-}
{-! for AHsIdentifier derive : ShATermConvertible !-}
{-! for AHsName derive : ShATermConvertible !-}
{-! for AModule derive : ShATermConvertible !-}
{-! for ASrcLoc derive : ShATermConvertible !-}
{-! for Formula derive : ShATermConvertible !-}
{-! for Quantifier derive : ShATermConvertible !-}
{-! for AxiomBndr derive : ShATermConvertible !-}
{-! for AxBinding derive : ShATermConvertible !-}
{-! for HsGuardedAlt derive : ShATermConvertible !-}
{-! for HsGuardedAlts derive : ShATermConvertible !-}
{-! for HsAlt derive : ShATermConvertible !-}
{-! for HsFieldUpdate derive : ShATermConvertible !-}
{-! for HsStmt derive : ShATermConvertible !-}
{-! for HsPatField derive : ShATermConvertible !-}
{-! for HsPat derive : ShATermConvertible !-}
{-! for HsExp derive : ShATermConvertible !-}
{-! for HsLiteral derive : ShATermConvertible !-}
{-! for HsType derive : ShATermConvertible !-}
{-! for HsQualType derive : ShATermConvertible !-}
{-! for HsGuardedRhs derive : ShATermConvertible !-}
{-! for HsRhs derive : ShATermConvertible !-}
{-! for HsBangType derive : ShATermConvertible !-}
{-! for HsConDecl derive : ShATermConvertible !-}
{-! for HsMatch derive : ShATermConvertible !-}
{-! for HsDecl derive : ShATermConvertible !-}
{-! for HsAssoc derive : ShATermConvertible !-}
{-! for HsImportSpec derive : ShATermConvertible !-}
{-! for HsImportDecl derive : ShATermConvertible !-}
{-! for HsExportSpec derive : ShATermConvertible !-}
{-! for HsModule derive : ShATermConvertible !-}
{-! for HsName derive : ShATermConvertible !-}
{-! for HsQName derive : ShATermConvertible !-}
{-! for Module derive : ShATermConvertible !-}
{-! for SrcLoc derive : ShATermConvertible !-}
{-! for ModuleInfo derive : ShATermConvertible !-}
{-! for AHsGuardedAlt derive : ShATermConvertible !-}
{-! for AHsGuardedAlts derive : ShATermConvertible !-}
{-! for AHsAlt derive : ShATermConvertible !-}
{-! for AHsFieldUpdate derive : ShATermConvertible !-}
{-! for AHsStmt derive : ShATermConvertible !-}
{-! for AHsPatField derive : ShATermConvertible !-}
{-! for AHsPat derive : ShATermConvertible !-}
{-! for AHsExp derive : ShATermConvertible !-}
{-! for AHsLiteral derive : ShATermConvertible !-}
{-! for AHsType derive : ShATermConvertible !-}
{-! for AHsQualType derive : ShATermConvertible !-}
{-! for AHsGuardedRhs derive : ShATermConvertible !-}
{-! for AHsRhs derive : ShATermConvertible !-}
{-! for AHsBangType derive : ShATermConvertible !-}
{-! for AHsConDecl derive : ShATermConvertible !-}
{-! for AHsMatch derive : ShATermConvertible !-}
{-! for AHsDecl derive : ShATermConvertible !-}
{-! for AHsAssoc derive : ShATermConvertible !-}
{-! for AHsImportSpec derive : ShATermConvertible !-}
{-! for AHsImportDecl derive : ShATermConvertible !-}
{-! for AHsExportSpec derive : ShATermConvertible !-}
{-! for AHsModule derive : ShATermConvertible !-}
{-! for AHsIdentifier derive : ShATermConvertible !-}
{-! for AHsName derive : ShATermConvertible !-}
{-! for AModule derive : ShATermConvertible !-}
{-! for ASrcLoc derive : ShATermConvertible !-}

{- ? Generated by DrIFT : Look, but Don't Touch. (works w/ haddock) ? -}
--  Imported from other files :-

instance ATermConvertible SrcLoc where
    toShATerm att0 (SrcLoc aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "SrcLoc"  lat []) att2
    fromShATerm att =
	case aterm of
	    (ShAAppl "SrcLoc" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (SrcLoc aa' ab')
	    u -> fromShATermError "SrcLoc" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"SrcLoc\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"SrcLoc\""

instance ATermConvertible Module where
    toShATerm att0 (Module aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "Module"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "Module" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (Module aa')
	    u -> fromShATermError "Module" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"Module\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"Module\""

instance ATermConvertible HsQName where
    toShATerm att0 (Qual aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "Qual"  lat []) att2
    toShATerm att0 (UnQual aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "UnQual"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "Qual" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (Qual aa' ab')
	    (ShAAppl "UnQual" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (UnQual aa')
	    u -> fromShATermError "HsQName" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsQName\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsQName\""

instance ATermConvertible HsName where
    toShATerm att0 (HsIdent aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsIdent"  lat []) att1
    toShATerm att0 (HsSymbol aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsSymbol"  lat []) att1
    toShATerm att0 (HsSpecial aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsSpecial"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsIdent" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsIdent aa')
	    (ShAAppl "HsSymbol" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsSymbol aa')
	    (ShAAppl "HsSpecial" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsSpecial aa')
	    u -> fromShATermError "HsName" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsName\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsName\""

instance ATermConvertible HsModule where
    toShATerm att0 (HsModule aa ab ac ad) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    lat = [ aa',ab',ac',ad' ]
	in addATerm (ShAAppl "HsModule"  lat []) att4
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsModule" [ aa,ab,ac,ad ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    in (HsModule aa' ab' ac' ad')
	    u -> fromShATermError "HsModule" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsModule\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsModule\""

instance ATermConvertible HsExportSpec where
    toShATerm att0 (HsEVar aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsEVar"  lat []) att1
    toShATerm att0 (HsEAbs aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsEAbs"  lat []) att1
    toShATerm att0 (HsEThingAll aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsEThingAll"  lat []) att1
    toShATerm att0 (HsEThingWith aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsEThingWith"  lat []) att2
    toShATerm att0 (HsEModuleContents aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsEModuleContents"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsEVar" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsEVar aa')
	    (ShAAppl "HsEAbs" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsEAbs aa')
	    (ShAAppl "HsEThingAll" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsEThingAll aa')
	    (ShAAppl "HsEThingWith" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsEThingWith aa' ab')
	    (ShAAppl "HsEModuleContents" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsEModuleContents aa')
	    u -> fromShATermError "HsExportSpec" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsExportSpec\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsExportSpec\""

instance ATermConvertible HsImportDecl where
    toShATerm att0 (HsImportDecl aa ab ac ad ae) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    (att5,ae') = toShATerm att4 ae
	    lat = [ aa',ab',ac',ad',ae' ]
	in addATerm (ShAAppl "HsImportDecl"  lat []) att5
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsImportDecl" [ aa,ab,ac,ad,ae ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    ae' = fromShATerm (getATermByIndex1 ae att)
		    in (HsImportDecl aa' ab' ac' ad' ae')
	    u -> fromShATermError "HsImportDecl" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsImportDecl\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsImportDecl\""

instance ATermConvertible HsImportSpec where
    toShATerm att0 (HsIVar aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsIVar"  lat []) att1
    toShATerm att0 (HsIAbs aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsIAbs"  lat []) att1
    toShATerm att0 (HsIThingAll aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsIThingAll"  lat []) att1
    toShATerm att0 (HsIThingWith aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsIThingWith"  lat []) att2
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsIVar" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsIVar aa')
	    (ShAAppl "HsIAbs" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsIAbs aa')
	    (ShAAppl "HsIThingAll" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsIThingAll aa')
	    (ShAAppl "HsIThingWith" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsIThingWith aa' ab')
	    u -> fromShATermError "HsImportSpec" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsImportSpec\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsImportSpec\""

instance ATermConvertible HsAssoc where
    toShATerm att0 HsAssocNone =
	let lat = []
	in addATerm (ShAAppl "HsAssocNone"  lat []) att0
    toShATerm att0 HsAssocLeft =
	let lat = []
	in addATerm (ShAAppl "HsAssocLeft"  lat []) att0
    toShATerm att0 HsAssocRight =
	let lat = []
	in addATerm (ShAAppl "HsAssocRight"  lat []) att0
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsAssocNone" [ ] _) ->
		let in HsAssocNone
	    (ShAAppl "HsAssocLeft" [ ] _) ->
		let in HsAssocLeft
	    (ShAAppl "HsAssocRight" [ ] _) ->
		let in HsAssocRight
	    u -> fromShATermError "HsAssoc" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsAssoc\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsAssoc\""

instance ATermConvertible HsDecl where
    toShATerm att0 (HsTypeDecl aa ab ac ad) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    lat = [ aa',ab',ac',ad' ]
	in addATerm (ShAAppl "HsTypeDecl"  lat []) att4
    toShATerm att0 (HsDataDecl aa ab ac ad ae af) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    (att5,ae') = toShATerm att4 ae
	    (att6,af') = toShATerm att5 af
	    lat = [ aa',ab',ac',ad',ae',af' ]
	in addATerm (ShAAppl "HsDataDecl"  lat []) att6
    toShATerm att0 (HsInfixDecl aa ab ac ad) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    lat = [ aa',ab',ac',ad' ]
	in addATerm (ShAAppl "HsInfixDecl"  lat []) att4
    toShATerm att0 (HsNewTypeDecl aa ab ac ad ae af) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    (att5,ae') = toShATerm att4 ae
	    (att6,af') = toShATerm att5 af
	    lat = [ aa',ab',ac',ad',ae',af' ]
	in addATerm (ShAAppl "HsNewTypeDecl"  lat []) att6
    toShATerm att0 (HsClassDecl aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "HsClassDecl"  lat []) att3
    toShATerm att0 (HsInstDecl aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "HsInstDecl"  lat []) att3
    toShATerm att0 (HsDefaultDecl aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsDefaultDecl"  lat []) att2
    toShATerm att0 (HsTypeSig aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "HsTypeSig"  lat []) att3
    toShATerm att0 (HsFunBind aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsFunBind"  lat []) att1
    toShATerm att0 (HsPatBind aa ab ac ad) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    lat = [ aa',ab',ac',ad' ]
	in addATerm (ShAAppl "HsPatBind"  lat []) att4
    toShATerm att0 (HsAxiomBind aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsAxiomBind"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsTypeDecl" [ aa,ab,ac,ad ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    in (HsTypeDecl aa' ab' ac' ad')
	    (ShAAppl "HsDataDecl" [ aa,ab,ac,ad,ae,af ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    ae' = fromShATerm (getATermByIndex1 ae att)
		    af' = fromShATerm (getATermByIndex1 af att)
		    in (HsDataDecl aa' ab' ac' ad' ae' af')
	    (ShAAppl "HsInfixDecl" [ aa,ab,ac,ad ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    in (HsInfixDecl aa' ab' ac' ad')
	    (ShAAppl "HsNewTypeDecl" [ aa,ab,ac,ad,ae,af ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    ae' = fromShATerm (getATermByIndex1 ae att)
		    af' = fromShATerm (getATermByIndex1 af att)
		    in (HsNewTypeDecl aa' ab' ac' ad' ae' af')
	    (ShAAppl "HsClassDecl" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (HsClassDecl aa' ab' ac')
	    (ShAAppl "HsInstDecl" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (HsInstDecl aa' ab' ac')
	    (ShAAppl "HsDefaultDecl" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsDefaultDecl aa' ab')
	    (ShAAppl "HsTypeSig" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (HsTypeSig aa' ab' ac')
	    (ShAAppl "HsFunBind" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsFunBind aa')
	    (ShAAppl "HsPatBind" [ aa,ab,ac,ad ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    in (HsPatBind aa' ab' ac' ad')
	    (ShAAppl "HsAxiomBind" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsAxiomBind aa')
	    u -> fromShATermError "HsDecl" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsDecl\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsDecl\""

instance ATermConvertible HsMatch where
    toShATerm att0 (HsMatch aa ab ac ad ae) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    (att5,ae') = toShATerm att4 ae
	    lat = [ aa',ab',ac',ad',ae' ]
	in addATerm (ShAAppl "HsMatch"  lat []) att5
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsMatch" [ aa,ab,ac,ad,ae ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    ae' = fromShATerm (getATermByIndex1 ae att)
		    in (HsMatch aa' ab' ac' ad' ae')
	    u -> fromShATermError "HsMatch" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsMatch\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsMatch\""

instance ATermConvertible HsConDecl where
    toShATerm att0 (HsConDecl aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "HsConDecl"  lat []) att3
    toShATerm att0 (HsRecDecl aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "HsRecDecl"  lat []) att3
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsConDecl" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (HsConDecl aa' ab' ac')
	    (ShAAppl "HsRecDecl" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (HsRecDecl aa' ab' ac')
	    u -> fromShATermError "HsConDecl" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsConDecl\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsConDecl\""

instance ATermConvertible HsBangType where
    toShATerm att0 (HsBangedTy aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsBangedTy"  lat []) att1
    toShATerm att0 (HsUnBangedTy aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsUnBangedTy"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsBangedTy" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsBangedTy aa')
	    (ShAAppl "HsUnBangedTy" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsUnBangedTy aa')
	    u -> fromShATermError "HsBangType" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsBangType\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsBangType\""

instance ATermConvertible HsRhs where
    toShATerm att0 (HsUnGuardedRhs aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsUnGuardedRhs"  lat []) att1
    toShATerm att0 (HsGuardedRhss aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsGuardedRhss"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsUnGuardedRhs" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsUnGuardedRhs aa')
	    (ShAAppl "HsGuardedRhss" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsGuardedRhss aa')
	    u -> fromShATermError "HsRhs" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsRhs\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsRhs\""

instance ATermConvertible HsGuardedRhs where
    toShATerm att0 (HsGuardedRhs aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "HsGuardedRhs"  lat []) att3
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsGuardedRhs" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (HsGuardedRhs aa' ab' ac')
	    u -> fromShATermError "HsGuardedRhs" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsGuardedRhs\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsGuardedRhs\""

instance ATermConvertible HsQualType where
    toShATerm att0 (HsQualType aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsQualType"  lat []) att2
    toShATerm att0 (HsUnQualType aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsUnQualType"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsQualType" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsQualType aa' ab')
	    (ShAAppl "HsUnQualType" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsUnQualType aa')
	    u -> fromShATermError "HsQualType" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsQualType\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsQualType\""

instance ATermConvertible HsType where
    toShATerm att0 (HsTyFun aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsTyFun"  lat []) att2
    toShATerm att0 (HsTyTuple aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsTyTuple"  lat []) att1
    toShATerm att0 (HsTyApp aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsTyApp"  lat []) att2
    toShATerm att0 (HsTyVar aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsTyVar"  lat []) att1
    toShATerm att0 (HsTyCon aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsTyCon"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsTyFun" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsTyFun aa' ab')
	    (ShAAppl "HsTyTuple" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsTyTuple aa')
	    (ShAAppl "HsTyApp" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsTyApp aa' ab')
	    (ShAAppl "HsTyVar" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsTyVar aa')
	    (ShAAppl "HsTyCon" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsTyCon aa')
	    u -> fromShATermError "HsType" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsType\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsType\""

instance ATermConvertible HsLiteral where
    toShATerm att0 (HsInt aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsInt"  lat []) att1
    toShATerm att0 (HsChar aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsChar"  lat []) att1
    toShATerm att0 (HsString aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsString"  lat []) att1
    toShATerm att0 (HsFrac aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsFrac"  lat []) att1
    toShATerm att0 (HsCharPrim aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsCharPrim"  lat []) att1
    toShATerm att0 (HsStringPrim aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsStringPrim"  lat []) att1
    toShATerm att0 (HsIntPrim aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsIntPrim"  lat []) att1
    toShATerm att0 (HsFloatPrim aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsFloatPrim"  lat []) att1
    toShATerm att0 (HsDoublePrim aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsDoublePrim"  lat []) att1
    toShATerm att0 (HsLitLit aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsLitLit"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsInt" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsInt aa')
	    (ShAAppl "HsChar" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsChar aa')
	    (ShAAppl "HsString" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsString aa')
	    (ShAAppl "HsFrac" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsFrac aa')
	    (ShAAppl "HsCharPrim" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsCharPrim aa')
	    (ShAAppl "HsStringPrim" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsStringPrim aa')
	    (ShAAppl "HsIntPrim" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsIntPrim aa')
	    (ShAAppl "HsFloatPrim" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsFloatPrim aa')
	    (ShAAppl "HsDoublePrim" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsDoublePrim aa')
	    (ShAAppl "HsLitLit" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsLitLit aa')
	    u -> fromShATermError "HsLiteral" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsLiteral\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsLiteral\""

instance ATermConvertible HsExp where
    toShATerm att0 (HsVar aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsVar"  lat []) att1
    toShATerm att0 (HsCon aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsCon"  lat []) att1
    toShATerm att0 (HsLit aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsLit"  lat []) att1
    toShATerm att0 (HsInfixApp aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "HsInfixApp"  lat []) att3
    toShATerm att0 (HsApp aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsApp"  lat []) att2
    toShATerm att0 (HsNegApp aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsNegApp"  lat []) att1
    toShATerm att0 (HsLambda aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "HsLambda"  lat []) att3
    toShATerm att0 (HsLet aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsLet"  lat []) att2
    toShATerm att0 (HsIf aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "HsIf"  lat []) att3
    toShATerm att0 (HsCase aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsCase"  lat []) att2
    toShATerm att0 (HsDo aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsDo"  lat []) att1
    toShATerm att0 (HsTuple aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsTuple"  lat []) att1
    toShATerm att0 (HsList aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsList"  lat []) att1
    toShATerm att0 (HsParen aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsParen"  lat []) att1
    toShATerm att0 (HsLeftSection aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsLeftSection"  lat []) att2
    toShATerm att0 (HsRightSection aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsRightSection"  lat []) att2
    toShATerm att0 (HsRecConstr aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsRecConstr"  lat []) att2
    toShATerm att0 (HsRecUpdate aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsRecUpdate"  lat []) att2
    toShATerm att0 (HsEnumFrom aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsEnumFrom"  lat []) att1
    toShATerm att0 (HsEnumFromTo aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsEnumFromTo"  lat []) att2
    toShATerm att0 (HsEnumFromThen aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsEnumFromThen"  lat []) att2
    toShATerm att0 (HsEnumFromThenTo aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "HsEnumFromThenTo"  lat []) att3
    toShATerm att0 (HsListComp aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsListComp"  lat []) att2
    toShATerm att0 (HsExpTypeSig aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "HsExpTypeSig"  lat []) att3
    toShATerm att0 (HsAsPat aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsAsPat"  lat []) att2
    toShATerm att0 HsWildCard =
	let lat = []
	in addATerm (ShAAppl "HsWildCard"  lat []) att0
    toShATerm att0 (HsIrrPat aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsIrrPat"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsVar" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsVar aa')
	    (ShAAppl "HsCon" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsCon aa')
	    (ShAAppl "HsLit" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsLit aa')
	    (ShAAppl "HsInfixApp" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (HsInfixApp aa' ab' ac')
	    (ShAAppl "HsApp" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsApp aa' ab')
	    (ShAAppl "HsNegApp" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsNegApp aa')
	    (ShAAppl "HsLambda" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (HsLambda aa' ab' ac')
	    (ShAAppl "HsLet" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsLet aa' ab')
	    (ShAAppl "HsIf" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (HsIf aa' ab' ac')
	    (ShAAppl "HsCase" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsCase aa' ab')
	    (ShAAppl "HsDo" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsDo aa')
	    (ShAAppl "HsTuple" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsTuple aa')
	    (ShAAppl "HsList" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsList aa')
	    (ShAAppl "HsParen" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsParen aa')
	    (ShAAppl "HsLeftSection" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsLeftSection aa' ab')
	    (ShAAppl "HsRightSection" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsRightSection aa' ab')
	    (ShAAppl "HsRecConstr" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsRecConstr aa' ab')
	    (ShAAppl "HsRecUpdate" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsRecUpdate aa' ab')
	    (ShAAppl "HsEnumFrom" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsEnumFrom aa')
	    (ShAAppl "HsEnumFromTo" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsEnumFromTo aa' ab')
	    (ShAAppl "HsEnumFromThen" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsEnumFromThen aa' ab')
	    (ShAAppl "HsEnumFromThenTo" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (HsEnumFromThenTo aa' ab' ac')
	    (ShAAppl "HsListComp" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsListComp aa' ab')
	    (ShAAppl "HsExpTypeSig" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (HsExpTypeSig aa' ab' ac')
	    (ShAAppl "HsAsPat" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsAsPat aa' ab')
	    (ShAAppl "HsWildCard" [ ] _) ->
		let in HsWildCard
	    (ShAAppl "HsIrrPat" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsIrrPat aa')
	    u -> fromShATermError "HsExp" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsExp\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsExp\""

instance ATermConvertible HsPat where
    toShATerm att0 (HsPVar aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsPVar"  lat []) att1
    toShATerm att0 (HsPLit aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsPLit"  lat []) att1
    toShATerm att0 (HsPNeg aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsPNeg"  lat []) att1
    toShATerm att0 (HsPInfixApp aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "HsPInfixApp"  lat []) att3
    toShATerm att0 (HsPApp aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsPApp"  lat []) att2
    toShATerm att0 (HsPTuple aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsPTuple"  lat []) att1
    toShATerm att0 (HsPList aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsPList"  lat []) att1
    toShATerm att0 (HsPParen aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsPParen"  lat []) att1
    toShATerm att0 (HsPRec aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsPRec"  lat []) att2
    toShATerm att0 (HsPAsPat aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsPAsPat"  lat []) att2
    toShATerm att0 HsPWildCard =
	let lat = []
	in addATerm (ShAAppl "HsPWildCard"  lat []) att0
    toShATerm att0 (HsPIrrPat aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsPIrrPat"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsPVar" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsPVar aa')
	    (ShAAppl "HsPLit" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsPLit aa')
	    (ShAAppl "HsPNeg" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsPNeg aa')
	    (ShAAppl "HsPInfixApp" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (HsPInfixApp aa' ab' ac')
	    (ShAAppl "HsPApp" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsPApp aa' ab')
	    (ShAAppl "HsPTuple" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsPTuple aa')
	    (ShAAppl "HsPList" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsPList aa')
	    (ShAAppl "HsPParen" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsPParen aa')
	    (ShAAppl "HsPRec" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsPRec aa' ab')
	    (ShAAppl "HsPAsPat" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsPAsPat aa' ab')
	    (ShAAppl "HsPWildCard" [ ] _) ->
		let in HsPWildCard
	    (ShAAppl "HsPIrrPat" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsPIrrPat aa')
	    u -> fromShATermError "HsPat" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsPat\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsPat\""

instance ATermConvertible HsPatField where
    toShATerm att0 (HsPFieldPat aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsPFieldPat"  lat []) att2
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsPFieldPat" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsPFieldPat aa' ab')
	    u -> fromShATermError "HsPatField" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsPatField\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsPatField\""

instance ATermConvertible HsStmt where
    toShATerm att0 (HsGenerator aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "HsGenerator"  lat []) att3
    toShATerm att0 (HsQualifier aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsQualifier"  lat []) att1
    toShATerm att0 (HsLetStmt aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsLetStmt"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsGenerator" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (HsGenerator aa' ab' ac')
	    (ShAAppl "HsQualifier" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsQualifier aa')
	    (ShAAppl "HsLetStmt" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsLetStmt aa')
	    u -> fromShATermError "HsStmt" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsStmt\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsStmt\""

instance ATermConvertible HsFieldUpdate where
    toShATerm att0 (HsFieldUpdate aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "HsFieldUpdate"  lat []) att2
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsFieldUpdate" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (HsFieldUpdate aa' ab')
	    u -> fromShATermError "HsFieldUpdate" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsFieldUpdate\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsFieldUpdate\""

instance ATermConvertible HsAlt where
    toShATerm att0 (HsAlt aa ab ac ad) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    lat = [ aa',ab',ac',ad' ]
	in addATerm (ShAAppl "HsAlt"  lat []) att4
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsAlt" [ aa,ab,ac,ad ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    in (HsAlt aa' ab' ac' ad')
	    u -> fromShATermError "HsAlt" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsAlt\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsAlt\""

instance ATermConvertible HsGuardedAlts where
    toShATerm att0 (HsUnGuardedAlt aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsUnGuardedAlt"  lat []) att1
    toShATerm att0 (HsGuardedAlts aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "HsGuardedAlts"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsUnGuardedAlt" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsUnGuardedAlt aa')
	    (ShAAppl "HsGuardedAlts" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (HsGuardedAlts aa')
	    u -> fromShATermError "HsGuardedAlts" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsGuardedAlts\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsGuardedAlts\""

instance ATermConvertible HsGuardedAlt where
    toShATerm att0 (HsGuardedAlt aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "HsGuardedAlt"  lat []) att3
    fromShATerm att =
	case aterm of
	    (ShAAppl "HsGuardedAlt" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (HsGuardedAlt aa' ab' ac')
	    u -> fromShATermError "HsGuardedAlt" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"HsGuardedAlt\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"HsGuardedAlt\""

instance ATermConvertible AxBinding where
    toShATerm att0 (AndBindings aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AndBindings"  lat []) att2
    toShATerm att0 (AxiomDecl aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AxiomDecl"  lat []) att2
    fromShATerm att =
	case aterm of
	    (ShAAppl "AndBindings" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AndBindings aa' ab')
	    (ShAAppl "AxiomDecl" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AxiomDecl aa' ab')
	    u -> fromShATermError "AxBinding" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AxBinding\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AxBinding\""

instance ATermConvertible AxiomBndr where
    toShATerm att0 (AxiomBndr aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AxiomBndr"  lat []) att1
    toShATerm att0 (AxiomBndrSig aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AxiomBndrSig"  lat []) att2
    fromShATerm att =
	case aterm of
	    (ShAAppl "AxiomBndr" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AxiomBndr aa')
	    (ShAAppl "AxiomBndrSig" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AxiomBndrSig aa' ab')
	    u -> fromShATermError "AxiomBndr" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AxiomBndr\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AxiomBndr\""

instance ATermConvertible Quantifier where
    toShATerm att0 (AxForall aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AxForall"  lat []) att1
    toShATerm att0 (AxExists aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AxExists"  lat []) att1
    toShATerm att0 (AxExistsOne aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AxExistsOne"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AxForall" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AxForall aa')
	    (ShAAppl "AxExists" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AxExists aa')
	    (ShAAppl "AxExistsOne" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AxExistsOne aa')
	    u -> fromShATermError "Quantifier" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"Quantifier\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"Quantifier\""

instance ATermConvertible Formula where
    toShATerm att0 (AxQuant aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AxQuant"  lat []) att2
    toShATerm att0 (AxEq aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AxEq"  lat []) att3
    toShATerm att0 (AxExp aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AxExp"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AxQuant" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AxQuant aa' ab')
	    (ShAAppl "AxEq" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AxEq aa' ab' ac')
	    (ShAAppl "AxExp" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AxExp aa')
	    u -> fromShATermError "Formula" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"Formula\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"Formula\""

instance ATermConvertible Scheme where
    toShATerm att0 (Forall aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "Forall"  lat []) att2
    fromShATerm att =
	case aterm of
	    (ShAAppl "Forall" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (Forall aa' ab')
	    u -> fromShATermError "Scheme" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"Scheme\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"Scheme\""

instance ATermConvertible Pred where
    toShATerm att0 (IsIn aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "IsIn"  lat []) att2
    fromShATerm att =
	case aterm of
	    (ShAAppl "IsIn" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (IsIn aa' ab')
	    u -> fromShATermError "Pred" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"Pred\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"Pred\""

instance ATermConvertible Kindvar where
    toShATerm att0 (Kindvar aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "Kindvar"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "Kindvar" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (Kindvar aa')
	    u -> fromShATermError "Kindvar" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"Kindvar\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"Kindvar\""

instance ATermConvertible Kind where
    toShATerm att0 Star =
	let lat = []
	in addATerm (ShAAppl "Star"  lat []) att0
    toShATerm att0 (Kfun aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "Kfun"  lat []) att2
    toShATerm att0 (KVar aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "KVar"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "Star" [ ] _) ->
		let in Star
	    (ShAAppl "Kfun" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (Kfun aa' ab')
	    (ShAAppl "KVar" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (KVar aa')
	    u -> fromShATermError "Kind" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"Kind\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"Kind\""

instance ATermConvertible Tycon where
    toShATerm att0 (Tycon aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "Tycon"  lat []) att2
    fromShATerm att =
	case aterm of
	    (ShAAppl "Tycon" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (Tycon aa' ab')
	    u -> fromShATermError "Tycon" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"Tycon\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"Tycon\""

instance ATermConvertible Tyvar where
    toShATerm att0 (Tyvar aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "Tyvar"  lat []) att2
    fromShATerm att =
	case aterm of
	    (ShAAppl "Tyvar" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (Tyvar aa' ab')
	    u -> fromShATermError "Tyvar" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"Tyvar\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"Tyvar\""

instance ATermConvertible Type where
    toShATerm att0 (TVar aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "TVar"  lat []) att1
    toShATerm att0 (TCon aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "TCon"  lat []) att1
    toShATerm att0 (TAp aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "TAp"  lat []) att2
    toShATerm att0 (TGen aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "TGen"  lat []) att1
    toShATerm att0 (TArrow aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "TArrow"  lat []) att2
    toShATerm att0 (TTuple aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "TTuple"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "TVar" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (TVar aa')
	    (ShAAppl "TCon" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (TCon aa')
	    (ShAAppl "TAp" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (TAp aa' ab')
	    (ShAAppl "TGen" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (TGen aa')
	    (ShAAppl "TArrow" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (TArrow aa' ab')
	    (ShAAppl "TTuple" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (TTuple aa')
	    u -> fromShATermError "Type" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"Type\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"Type\""

instance ATermConvertible ModuleInfo where
    toShATerm att0 (ModuleInfo aa ab ac ad ae af ag ah) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    (att5,ae') = toShATerm att4 ae
	    (att6,af') = toShATerm att5 af
	    (att7,ag') = toShATerm att6 ag
	    (att8,ah') = toShATerm att7 ah
	    lat = [ aa',ab',ac',ad',ae',af',ag',ah' ]
	in addATerm (ShAAppl "ModuleInfo"  lat []) att8
    fromShATerm att =
	case aterm of
	    (ShAAppl "ModuleInfo" [ aa,ab,ac,ad,ae,af,ag,ah ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    ae' = fromShATerm (getATermByIndex1 ae att)
		    af' = fromShATerm (getATermByIndex1 af att)
		    ag' = fromShATerm (getATermByIndex1 ag att)
		    ah' = fromShATerm (getATermByIndex1 ah att)
		    in (ModuleInfo aa' ab' ac' ad' ae' af' ag' ah')
	    u -> fromShATermError "ModuleInfo" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"ModuleInfo\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"ModuleInfo\""

instance ATermConvertible ModuleInfo where
    toShATerm att0 (ModuleInfo aa ab ac ad ae af ag ah) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    (att5,ae') = toShATerm att4 ae
	    (att6,af') = toShATerm att5 af
	    (att7,ag') = toShATerm att6 ag
	    (att8,ah') = toShATerm att7 ah
	    lat = [ aa',ab',ac',ad',ae',af',ag',ah' ]
	in addATerm (ShAAppl "ModuleInfo"  lat []) att8
    fromShATerm att =
	case aterm of
	    (ShAAppl "ModuleInfo" [ aa,ab,ac,ad,ae,af,ag,ah ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    ae' = fromShATerm (getATermByIndex1 ae att)
		    af' = fromShATerm (getATermByIndex1 af att)
		    ag' = fromShATerm (getATermByIndex1 ag att)
		    ah' = fromShATerm (getATermByIndex1 ah att)
		    in (ModuleInfo aa' ab' ac' ad' ae' af' ag' ah')
	    u -> fromShATermError "ModuleInfo" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"ModuleInfo\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"ModuleInfo\""

instance ATermConvertible AHsGuardedAlt where
    toShATerm att0 (AHsGuardedAlt aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsGuardedAlt"  lat []) att3
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsGuardedAlt" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsGuardedAlt aa' ab' ac')
	    u -> fromShATermError "AHsGuardedAlt" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsGuardedAlt\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsGuardedAlt\""

instance ATermConvertible AHsGuardedAlts where
    toShATerm att0 (AHsUnGuardedAlt aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsUnGuardedAlt"  lat []) att1
    toShATerm att0 (AHsGuardedAlts aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsGuardedAlts"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsUnGuardedAlt" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsUnGuardedAlt aa')
	    (ShAAppl "AHsGuardedAlts" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsGuardedAlts aa')
	    u -> fromShATermError "AHsGuardedAlts" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsGuardedAlts\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsGuardedAlts\""

instance ATermConvertible AHsAlt where
    toShATerm att0 (AHsAlt aa ab ac ad) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    lat = [ aa',ab',ac',ad' ]
	in addATerm (ShAAppl "AHsAlt"  lat []) att4
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsAlt" [ aa,ab,ac,ad ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    in (AHsAlt aa' ab' ac' ad')
	    u -> fromShATermError "AHsAlt" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsAlt\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsAlt\""

instance ATermConvertible AHsFieldUpdate where
    toShATerm att0 (AHsFieldUpdate aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsFieldUpdate"  lat []) att2
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsFieldUpdate" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsFieldUpdate aa' ab')
	    u -> fromShATermError "AHsFieldUpdate" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsFieldUpdate\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsFieldUpdate\""

instance ATermConvertible AHsStmt where
    toShATerm att0 (AHsGenerator aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsGenerator"  lat []) att3
    toShATerm att0 (AHsQualifier aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsQualifier"  lat []) att1
    toShATerm att0 (AHsLetStmt aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsLetStmt"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsGenerator" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsGenerator aa' ab' ac')
	    (ShAAppl "AHsQualifier" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsQualifier aa')
	    (ShAAppl "AHsLetStmt" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsLetStmt aa')
	    u -> fromShATermError "AHsStmt" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsStmt\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsStmt\""

instance ATermConvertible AHsPatField where
    toShATerm att0 (AHsPFieldPat aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsPFieldPat"  lat []) att2
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsPFieldPat" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsPFieldPat aa' ab')
	    u -> fromShATermError "AHsPatField" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsPatField\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsPatField\""

instance ATermConvertible AHsPat where
    toShATerm att0 (AHsPVar aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsPVar"  lat []) att1
    toShATerm att0 (AHsPLit aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsPLit"  lat []) att1
    toShATerm att0 (AHsPNeg aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsPNeg"  lat []) att1
    toShATerm att0 (AHsPInfixApp aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsPInfixApp"  lat []) att3
    toShATerm att0 (AHsPApp aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsPApp"  lat []) att2
    toShATerm att0 (AHsPTuple aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsPTuple"  lat []) att1
    toShATerm att0 (AHsPList aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsPList"  lat []) att1
    toShATerm att0 (AHsPParen aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsPParen"  lat []) att1
    toShATerm att0 (AHsPRec aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsPRec"  lat []) att2
    toShATerm att0 (AHsPAsPat aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsPAsPat"  lat []) att2
    toShATerm att0 AHsPWildCard =
	let lat = []
	in addATerm (ShAAppl "AHsPWildCard"  lat []) att0
    toShATerm att0 (AHsPIrrPat aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsPIrrPat"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsPVar" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsPVar aa')
	    (ShAAppl "AHsPLit" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsPLit aa')
	    (ShAAppl "AHsPNeg" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsPNeg aa')
	    (ShAAppl "AHsPInfixApp" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsPInfixApp aa' ab' ac')
	    (ShAAppl "AHsPApp" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsPApp aa' ab')
	    (ShAAppl "AHsPTuple" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsPTuple aa')
	    (ShAAppl "AHsPList" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsPList aa')
	    (ShAAppl "AHsPParen" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsPParen aa')
	    (ShAAppl "AHsPRec" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsPRec aa' ab')
	    (ShAAppl "AHsPAsPat" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsPAsPat aa' ab')
	    (ShAAppl "AHsPWildCard" [ ] _) ->
		let in AHsPWildCard
	    (ShAAppl "AHsPIrrPat" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsPIrrPat aa')
	    u -> fromShATermError "AHsPat" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsPat\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsPat\""

instance ATermConvertible AHsExp where
    toShATerm att0 (AHsVar aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsVar"  lat []) att1
    toShATerm att0 (AHsCon aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsCon"  lat []) att1
    toShATerm att0 (AHsLit aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsLit"  lat []) att1
    toShATerm att0 (AHsInfixApp aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsInfixApp"  lat []) att3
    toShATerm att0 (AHsApp aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsApp"  lat []) att2
    toShATerm att0 (AHsNegApp aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsNegApp"  lat []) att1
    toShATerm att0 (AHsLambda aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsLambda"  lat []) att3
    toShATerm att0 (AHsLet aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsLet"  lat []) att2
    toShATerm att0 (AHsIf aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsIf"  lat []) att3
    toShATerm att0 (AHsCase aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsCase"  lat []) att2
    toShATerm att0 (AHsDo aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsDo"  lat []) att1
    toShATerm att0 (AHsTuple aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsTuple"  lat []) att1
    toShATerm att0 (AHsList aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsList"  lat []) att1
    toShATerm att0 (AHsParen aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsParen"  lat []) att1
    toShATerm att0 (AHsLeftSection aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsLeftSection"  lat []) att2
    toShATerm att0 (AHsRightSection aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsRightSection"  lat []) att2
    toShATerm att0 (AHsRecConstr aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsRecConstr"  lat []) att2
    toShATerm att0 (AHsRecUpdate aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsRecUpdate"  lat []) att2
    toShATerm att0 (AHsEnumFrom aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsEnumFrom"  lat []) att1
    toShATerm att0 (AHsEnumFromTo aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsEnumFromTo"  lat []) att2
    toShATerm att0 (AHsEnumFromThen aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsEnumFromThen"  lat []) att2
    toShATerm att0 (AHsEnumFromThenTo aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsEnumFromThenTo"  lat []) att3
    toShATerm att0 (AHsListComp aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsListComp"  lat []) att2
    toShATerm att0 (AHsExpTypeSig aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsExpTypeSig"  lat []) att3
    toShATerm att0 (AHsAsPat aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsAsPat"  lat []) att2
    toShATerm att0 AHsWildCard =
	let lat = []
	in addATerm (ShAAppl "AHsWildCard"  lat []) att0
    toShATerm att0 (AHsIrrPat aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsIrrPat"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsVar" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsVar aa')
	    (ShAAppl "AHsCon" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsCon aa')
	    (ShAAppl "AHsLit" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsLit aa')
	    (ShAAppl "AHsInfixApp" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsInfixApp aa' ab' ac')
	    (ShAAppl "AHsApp" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsApp aa' ab')
	    (ShAAppl "AHsNegApp" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsNegApp aa')
	    (ShAAppl "AHsLambda" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsLambda aa' ab' ac')
	    (ShAAppl "AHsLet" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsLet aa' ab')
	    (ShAAppl "AHsIf" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsIf aa' ab' ac')
	    (ShAAppl "AHsCase" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsCase aa' ab')
	    (ShAAppl "AHsDo" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsDo aa')
	    (ShAAppl "AHsTuple" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsTuple aa')
	    (ShAAppl "AHsList" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsList aa')
	    (ShAAppl "AHsParen" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsParen aa')
	    (ShAAppl "AHsLeftSection" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsLeftSection aa' ab')
	    (ShAAppl "AHsRightSection" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsRightSection aa' ab')
	    (ShAAppl "AHsRecConstr" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsRecConstr aa' ab')
	    (ShAAppl "AHsRecUpdate" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsRecUpdate aa' ab')
	    (ShAAppl "AHsEnumFrom" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsEnumFrom aa')
	    (ShAAppl "AHsEnumFromTo" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsEnumFromTo aa' ab')
	    (ShAAppl "AHsEnumFromThen" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsEnumFromThen aa' ab')
	    (ShAAppl "AHsEnumFromThenTo" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsEnumFromThenTo aa' ab' ac')
	    (ShAAppl "AHsListComp" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsListComp aa' ab')
	    (ShAAppl "AHsExpTypeSig" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsExpTypeSig aa' ab' ac')
	    (ShAAppl "AHsAsPat" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsAsPat aa' ab')
	    (ShAAppl "AHsWildCard" [ ] _) ->
		let in AHsWildCard
	    (ShAAppl "AHsIrrPat" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsIrrPat aa')
	    u -> fromShATermError "AHsExp" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsExp\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsExp\""

instance ATermConvertible AHsLiteral where
    toShATerm att0 (AHsInt aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsInt"  lat []) att1
    toShATerm att0 (AHsChar aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsChar"  lat []) att1
    toShATerm att0 (AHsString aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsString"  lat []) att1
    toShATerm att0 (AHsFrac aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsFrac"  lat []) att1
    toShATerm att0 (AHsCharPrim aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsCharPrim"  lat []) att1
    toShATerm att0 (AHsStringPrim aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsStringPrim"  lat []) att1
    toShATerm att0 (AHsIntPrim aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsIntPrim"  lat []) att1
    toShATerm att0 (AHsFloatPrim aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsFloatPrim"  lat []) att1
    toShATerm att0 (AHsDoublePrim aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsDoublePrim"  lat []) att1
    toShATerm att0 (AHsLitLit aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsLitLit"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsInt" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsInt aa')
	    (ShAAppl "AHsChar" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsChar aa')
	    (ShAAppl "AHsString" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsString aa')
	    (ShAAppl "AHsFrac" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsFrac aa')
	    (ShAAppl "AHsCharPrim" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsCharPrim aa')
	    (ShAAppl "AHsStringPrim" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsStringPrim aa')
	    (ShAAppl "AHsIntPrim" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsIntPrim aa')
	    (ShAAppl "AHsFloatPrim" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsFloatPrim aa')
	    (ShAAppl "AHsDoublePrim" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsDoublePrim aa')
	    (ShAAppl "AHsLitLit" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsLitLit aa')
	    u -> fromShATermError "AHsLiteral" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsLiteral\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsLiteral\""

instance ATermConvertible AHsType where
    toShATerm att0 (AHsTyFun aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsTyFun"  lat []) att2
    toShATerm att0 (AHsTyTuple aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsTyTuple"  lat []) att1
    toShATerm att0 (AHsTyApp aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsTyApp"  lat []) att2
    toShATerm att0 (AHsTyVar aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsTyVar"  lat []) att1
    toShATerm att0 (AHsTyCon aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsTyCon"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsTyFun" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsTyFun aa' ab')
	    (ShAAppl "AHsTyTuple" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsTyTuple aa')
	    (ShAAppl "AHsTyApp" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsTyApp aa' ab')
	    (ShAAppl "AHsTyVar" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsTyVar aa')
	    (ShAAppl "AHsTyCon" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsTyCon aa')
	    u -> fromShATermError "AHsType" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsType\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsType\""

instance ATermConvertible AHsQualType where
    toShATerm att0 (AHsQualType aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsQualType"  lat []) att2
    toShATerm att0 (AHsUnQualType aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsUnQualType"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsQualType" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsQualType aa' ab')
	    (ShAAppl "AHsUnQualType" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsUnQualType aa')
	    u -> fromShATermError "AHsQualType" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsQualType\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsQualType\""

instance ATermConvertible AHsGuardedRhs where
    toShATerm att0 (AHsGuardedRhs aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsGuardedRhs"  lat []) att3
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsGuardedRhs" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsGuardedRhs aa' ab' ac')
	    u -> fromShATermError "AHsGuardedRhs" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsGuardedRhs\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsGuardedRhs\""

instance ATermConvertible AHsRhs where
    toShATerm att0 (AHsUnGuardedRhs aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsUnGuardedRhs"  lat []) att1
    toShATerm att0 (AHsGuardedRhss aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsGuardedRhss"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsUnGuardedRhs" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsUnGuardedRhs aa')
	    (ShAAppl "AHsGuardedRhss" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsGuardedRhss aa')
	    u -> fromShATermError "AHsRhs" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsRhs\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsRhs\""

instance ATermConvertible AHsBangType where
    toShATerm att0 (AHsBangedTy aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsBangedTy"  lat []) att1
    toShATerm att0 (AHsUnBangedTy aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsUnBangedTy"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsBangedTy" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsBangedTy aa')
	    (ShAAppl "AHsUnBangedTy" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsUnBangedTy aa')
	    u -> fromShATermError "AHsBangType" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsBangType\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsBangType\""

instance ATermConvertible AHsConDecl where
    toShATerm att0 (AHsConDecl aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsConDecl"  lat []) att3
    toShATerm att0 (AHsRecDecl aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsRecDecl"  lat []) att3
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsConDecl" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsConDecl aa' ab' ac')
	    (ShAAppl "AHsRecDecl" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsRecDecl aa' ab' ac')
	    u -> fromShATermError "AHsConDecl" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsConDecl\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsConDecl\""

instance ATermConvertible AHsMatch where
    toShATerm att0 (AHsMatch aa ab ac ad ae) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    (att5,ae') = toShATerm att4 ae
	    lat = [ aa',ab',ac',ad',ae' ]
	in addATerm (ShAAppl "AHsMatch"  lat []) att5
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsMatch" [ aa,ab,ac,ad,ae ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    ae' = fromShATerm (getATermByIndex1 ae att)
		    in (AHsMatch aa' ab' ac' ad' ae')
	    u -> fromShATermError "AHsMatch" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsMatch\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsMatch\""

instance ATermConvertible AHsDecl where
    toShATerm att0 (AHsTypeDecl aa ab ac ad) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    lat = [ aa',ab',ac',ad' ]
	in addATerm (ShAAppl "AHsTypeDecl"  lat []) att4
    toShATerm att0 (AHsDataDecl aa ab ac ad ae af) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    (att5,ae') = toShATerm att4 ae
	    (att6,af') = toShATerm att5 af
	    lat = [ aa',ab',ac',ad',ae',af' ]
	in addATerm (ShAAppl "AHsDataDecl"  lat []) att6
    toShATerm att0 (AHsInfixDecl aa ab ac ad) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    lat = [ aa',ab',ac',ad' ]
	in addATerm (ShAAppl "AHsInfixDecl"  lat []) att4
    toShATerm att0 (AHsNewTypeDecl aa ab ac ad ae af) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    (att5,ae') = toShATerm att4 ae
	    (att6,af') = toShATerm att5 af
	    lat = [ aa',ab',ac',ad',ae',af' ]
	in addATerm (ShAAppl "AHsNewTypeDecl"  lat []) att6
    toShATerm att0 (AHsClassDecl aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsClassDecl"  lat []) att3
    toShATerm att0 (AHsInstDecl aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsInstDecl"  lat []) att3
    toShATerm att0 (AHsDefaultDecl aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsDefaultDecl"  lat []) att2
    toShATerm att0 (AHsTypeSig aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsTypeSig"  lat []) att3
    toShATerm att0 (AHsFunBind aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsFunBind"  lat []) att1
    toShATerm att0 (AHsPatBind aa ab ac ad) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    lat = [ aa',ab',ac',ad' ]
	in addATerm (ShAAppl "AHsPatBind"  lat []) att4
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsTypeDecl" [ aa,ab,ac,ad ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    in (AHsTypeDecl aa' ab' ac' ad')
	    (ShAAppl "AHsDataDecl" [ aa,ab,ac,ad,ae,af ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    ae' = fromShATerm (getATermByIndex1 ae att)
		    af' = fromShATerm (getATermByIndex1 af att)
		    in (AHsDataDecl aa' ab' ac' ad' ae' af')
	    (ShAAppl "AHsInfixDecl" [ aa,ab,ac,ad ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    in (AHsInfixDecl aa' ab' ac' ad')
	    (ShAAppl "AHsNewTypeDecl" [ aa,ab,ac,ad,ae,af ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    ae' = fromShATerm (getATermByIndex1 ae att)
		    af' = fromShATerm (getATermByIndex1 af att)
		    in (AHsNewTypeDecl aa' ab' ac' ad' ae' af')
	    (ShAAppl "AHsClassDecl" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsClassDecl aa' ab' ac')
	    (ShAAppl "AHsInstDecl" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsInstDecl aa' ab' ac')
	    (ShAAppl "AHsDefaultDecl" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsDefaultDecl aa' ab')
	    (ShAAppl "AHsTypeSig" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsTypeSig aa' ab' ac')
	    (ShAAppl "AHsFunBind" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsFunBind aa')
	    (ShAAppl "AHsPatBind" [ aa,ab,ac,ad ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    in (AHsPatBind aa' ab' ac' ad')
	    u -> fromShATermError "AHsDecl" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsDecl\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsDecl\""

instance ATermConvertible AHsAssoc where
    toShATerm att0 AHsAssocNone =
	let lat = []
	in addATerm (ShAAppl "AHsAssocNone"  lat []) att0
    toShATerm att0 AHsAssocLeft =
	let lat = []
	in addATerm (ShAAppl "AHsAssocLeft"  lat []) att0
    toShATerm att0 AHsAssocRight =
	let lat = []
	in addATerm (ShAAppl "AHsAssocRight"  lat []) att0
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsAssocNone" [ ] _) ->
		let in AHsAssocNone
	    (ShAAppl "AHsAssocLeft" [ ] _) ->
		let in AHsAssocLeft
	    (ShAAppl "AHsAssocRight" [ ] _) ->
		let in AHsAssocRight
	    u -> fromShATermError "AHsAssoc" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsAssoc\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsAssoc\""

instance ATermConvertible AHsImportSpec where
    toShATerm att0 (AHsIVar aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsIVar"  lat []) att1
    toShATerm att0 (AHsIAbs aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsIAbs"  lat []) att1
    toShATerm att0 (AHsIThingAll aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsIThingAll"  lat []) att1
    toShATerm att0 (AHsIThingWith aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsIThingWith"  lat []) att2
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsIVar" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsIVar aa')
	    (ShAAppl "AHsIAbs" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsIAbs aa')
	    (ShAAppl "AHsIThingAll" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsIThingAll aa')
	    (ShAAppl "AHsIThingWith" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsIThingWith aa' ab')
	    u -> fromShATermError "AHsImportSpec" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsImportSpec\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsImportSpec\""

instance ATermConvertible AHsImportDecl where
    toShATerm att0 (AHsImportDecl aa ab ac ad ae) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    (att5,ae') = toShATerm att4 ae
	    lat = [ aa',ab',ac',ad',ae' ]
	in addATerm (ShAAppl "AHsImportDecl"  lat []) att5
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsImportDecl" [ aa,ab,ac,ad,ae ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    ae' = fromShATerm (getATermByIndex1 ae att)
		    in (AHsImportDecl aa' ab' ac' ad' ae')
	    u -> fromShATermError "AHsImportDecl" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsImportDecl\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsImportDecl\""

instance ATermConvertible AHsExportSpec where
    toShATerm att0 (AHsEVar aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsEVar"  lat []) att1
    toShATerm att0 (AHsEAbs aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsEAbs"  lat []) att1
    toShATerm att0 (AHsEThingAll aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsEThingAll"  lat []) att1
    toShATerm att0 (AHsEThingWith aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsEThingWith"  lat []) att2
    toShATerm att0 (AHsEModuleContents aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsEModuleContents"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsEVar" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsEVar aa')
	    (ShAAppl "AHsEAbs" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsEAbs aa')
	    (ShAAppl "AHsEThingAll" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsEThingAll aa')
	    (ShAAppl "AHsEThingWith" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsEThingWith aa' ab')
	    (ShAAppl "AHsEModuleContents" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsEModuleContents aa')
	    u -> fromShATermError "AHsExportSpec" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsExportSpec\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsExportSpec\""

instance ATermConvertible AHsModule where
    toShATerm att0 (AHsModule aa ab ac ad) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    lat = [ aa',ab',ac',ad' ]
	in addATerm (ShAAppl "AHsModule"  lat []) att4
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsModule" [ aa,ab,ac,ad ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    in (AHsModule aa' ab' ac' ad')
	    u -> fromShATermError "AHsModule" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsModule\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsModule\""

instance ATermConvertible AHsIdentifier where
    toShATerm att0 (AHsIdent aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsIdent"  lat []) att1
    toShATerm att0 (AHsSymbol aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsSymbol"  lat []) att1
    toShATerm att0 (AHsSpecial aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsSpecial"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsIdent" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsIdent aa')
	    (ShAAppl "AHsSymbol" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsSymbol aa')
	    (ShAAppl "AHsSpecial" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsSpecial aa')
	    u -> fromShATermError "AHsIdentifier" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsIdentifier\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsIdentifier\""

instance ATermConvertible AHsName where
    toShATerm att0 (AQual aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AQual"  lat []) att2
    toShATerm att0 (AUnQual aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AUnQual"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AQual" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AQual aa' ab')
	    (ShAAppl "AUnQual" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AUnQual aa')
	    u -> fromShATermError "AHsName" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsName\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsName\""

instance ATermConvertible AModule where
    toShATerm att0 (AModule aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AModule"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AModule" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AModule aa')
	    u -> fromShATermError "AModule" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AModule\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AModule\""

instance ATermConvertible ASrcLoc where
    toShATerm att0 (ASrcLoc aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "ASrcLoc"  lat []) att2
    fromShATerm att =
	case aterm of
	    (ShAAppl "ASrcLoc" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (ASrcLoc aa' ab')
	    u -> fromShATermError "ASrcLoc" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"ASrcLoc\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"ASrcLoc\""

instance ATermConvertible AHsGuardedAlt where
    toShATerm att0 (AHsGuardedAlt aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsGuardedAlt"  lat []) att3
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsGuardedAlt" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsGuardedAlt aa' ab' ac')
	    u -> fromShATermError "AHsGuardedAlt" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsGuardedAlt\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsGuardedAlt\""

instance ATermConvertible AHsGuardedAlts where
    toShATerm att0 (AHsUnGuardedAlt aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsUnGuardedAlt"  lat []) att1
    toShATerm att0 (AHsGuardedAlts aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsGuardedAlts"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsUnGuardedAlt" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsUnGuardedAlt aa')
	    (ShAAppl "AHsGuardedAlts" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsGuardedAlts aa')
	    u -> fromShATermError "AHsGuardedAlts" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsGuardedAlts\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsGuardedAlts\""

instance ATermConvertible AHsAlt where
    toShATerm att0 (AHsAlt aa ab ac ad) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    lat = [ aa',ab',ac',ad' ]
	in addATerm (ShAAppl "AHsAlt"  lat []) att4
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsAlt" [ aa,ab,ac,ad ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    in (AHsAlt aa' ab' ac' ad')
	    u -> fromShATermError "AHsAlt" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsAlt\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsAlt\""

instance ATermConvertible AHsFieldUpdate where
    toShATerm att0 (AHsFieldUpdate aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsFieldUpdate"  lat []) att2
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsFieldUpdate" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsFieldUpdate aa' ab')
	    u -> fromShATermError "AHsFieldUpdate" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsFieldUpdate\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsFieldUpdate\""

instance ATermConvertible AHsStmt where
    toShATerm att0 (AHsGenerator aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsGenerator"  lat []) att3
    toShATerm att0 (AHsQualifier aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsQualifier"  lat []) att1
    toShATerm att0 (AHsLetStmt aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsLetStmt"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsGenerator" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsGenerator aa' ab' ac')
	    (ShAAppl "AHsQualifier" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsQualifier aa')
	    (ShAAppl "AHsLetStmt" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsLetStmt aa')
	    u -> fromShATermError "AHsStmt" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsStmt\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsStmt\""

instance ATermConvertible AHsPatField where
    toShATerm att0 (AHsPFieldPat aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsPFieldPat"  lat []) att2
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsPFieldPat" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsPFieldPat aa' ab')
	    u -> fromShATermError "AHsPatField" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsPatField\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsPatField\""

instance ATermConvertible AHsPat where
    toShATerm att0 (AHsPVar aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsPVar"  lat []) att1
    toShATerm att0 (AHsPLit aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsPLit"  lat []) att1
    toShATerm att0 (AHsPNeg aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsPNeg"  lat []) att1
    toShATerm att0 (AHsPInfixApp aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsPInfixApp"  lat []) att3
    toShATerm att0 (AHsPApp aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsPApp"  lat []) att2
    toShATerm att0 (AHsPTuple aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsPTuple"  lat []) att1
    toShATerm att0 (AHsPList aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsPList"  lat []) att1
    toShATerm att0 (AHsPParen aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsPParen"  lat []) att1
    toShATerm att0 (AHsPRec aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsPRec"  lat []) att2
    toShATerm att0 (AHsPAsPat aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsPAsPat"  lat []) att2
    toShATerm att0 AHsPWildCard =
	let lat = []
	in addATerm (ShAAppl "AHsPWildCard"  lat []) att0
    toShATerm att0 (AHsPIrrPat aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsPIrrPat"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsPVar" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsPVar aa')
	    (ShAAppl "AHsPLit" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsPLit aa')
	    (ShAAppl "AHsPNeg" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsPNeg aa')
	    (ShAAppl "AHsPInfixApp" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsPInfixApp aa' ab' ac')
	    (ShAAppl "AHsPApp" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsPApp aa' ab')
	    (ShAAppl "AHsPTuple" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsPTuple aa')
	    (ShAAppl "AHsPList" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsPList aa')
	    (ShAAppl "AHsPParen" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsPParen aa')
	    (ShAAppl "AHsPRec" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsPRec aa' ab')
	    (ShAAppl "AHsPAsPat" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsPAsPat aa' ab')
	    (ShAAppl "AHsPWildCard" [ ] _) ->
		let in AHsPWildCard
	    (ShAAppl "AHsPIrrPat" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsPIrrPat aa')
	    u -> fromShATermError "AHsPat" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsPat\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsPat\""

instance ATermConvertible AHsExp where
    toShATerm att0 (AHsVar aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsVar"  lat []) att1
    toShATerm att0 (AHsCon aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsCon"  lat []) att1
    toShATerm att0 (AHsLit aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsLit"  lat []) att1
    toShATerm att0 (AHsInfixApp aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsInfixApp"  lat []) att3
    toShATerm att0 (AHsApp aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsApp"  lat []) att2
    toShATerm att0 (AHsNegApp aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsNegApp"  lat []) att1
    toShATerm att0 (AHsLambda aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsLambda"  lat []) att3
    toShATerm att0 (AHsLet aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsLet"  lat []) att2
    toShATerm att0 (AHsIf aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsIf"  lat []) att3
    toShATerm att0 (AHsCase aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsCase"  lat []) att2
    toShATerm att0 (AHsDo aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsDo"  lat []) att1
    toShATerm att0 (AHsTuple aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsTuple"  lat []) att1
    toShATerm att0 (AHsList aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsList"  lat []) att1
    toShATerm att0 (AHsParen aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsParen"  lat []) att1
    toShATerm att0 (AHsLeftSection aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsLeftSection"  lat []) att2
    toShATerm att0 (AHsRightSection aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsRightSection"  lat []) att2
    toShATerm att0 (AHsRecConstr aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsRecConstr"  lat []) att2
    toShATerm att0 (AHsRecUpdate aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsRecUpdate"  lat []) att2
    toShATerm att0 (AHsEnumFrom aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsEnumFrom"  lat []) att1
    toShATerm att0 (AHsEnumFromTo aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsEnumFromTo"  lat []) att2
    toShATerm att0 (AHsEnumFromThen aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsEnumFromThen"  lat []) att2
    toShATerm att0 (AHsEnumFromThenTo aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsEnumFromThenTo"  lat []) att3
    toShATerm att0 (AHsListComp aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsListComp"  lat []) att2
    toShATerm att0 (AHsExpTypeSig aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsExpTypeSig"  lat []) att3
    toShATerm att0 (AHsAsPat aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsAsPat"  lat []) att2
    toShATerm att0 AHsWildCard =
	let lat = []
	in addATerm (ShAAppl "AHsWildCard"  lat []) att0
    toShATerm att0 (AHsIrrPat aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsIrrPat"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsVar" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsVar aa')
	    (ShAAppl "AHsCon" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsCon aa')
	    (ShAAppl "AHsLit" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsLit aa')
	    (ShAAppl "AHsInfixApp" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsInfixApp aa' ab' ac')
	    (ShAAppl "AHsApp" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsApp aa' ab')
	    (ShAAppl "AHsNegApp" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsNegApp aa')
	    (ShAAppl "AHsLambda" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsLambda aa' ab' ac')
	    (ShAAppl "AHsLet" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsLet aa' ab')
	    (ShAAppl "AHsIf" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsIf aa' ab' ac')
	    (ShAAppl "AHsCase" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsCase aa' ab')
	    (ShAAppl "AHsDo" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsDo aa')
	    (ShAAppl "AHsTuple" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsTuple aa')
	    (ShAAppl "AHsList" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsList aa')
	    (ShAAppl "AHsParen" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsParen aa')
	    (ShAAppl "AHsLeftSection" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsLeftSection aa' ab')
	    (ShAAppl "AHsRightSection" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsRightSection aa' ab')
	    (ShAAppl "AHsRecConstr" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsRecConstr aa' ab')
	    (ShAAppl "AHsRecUpdate" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsRecUpdate aa' ab')
	    (ShAAppl "AHsEnumFrom" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsEnumFrom aa')
	    (ShAAppl "AHsEnumFromTo" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsEnumFromTo aa' ab')
	    (ShAAppl "AHsEnumFromThen" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsEnumFromThen aa' ab')
	    (ShAAppl "AHsEnumFromThenTo" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsEnumFromThenTo aa' ab' ac')
	    (ShAAppl "AHsListComp" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsListComp aa' ab')
	    (ShAAppl "AHsExpTypeSig" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsExpTypeSig aa' ab' ac')
	    (ShAAppl "AHsAsPat" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsAsPat aa' ab')
	    (ShAAppl "AHsWildCard" [ ] _) ->
		let in AHsWildCard
	    (ShAAppl "AHsIrrPat" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsIrrPat aa')
	    u -> fromShATermError "AHsExp" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsExp\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsExp\""

instance ATermConvertible AHsLiteral where
    toShATerm att0 (AHsInt aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsInt"  lat []) att1
    toShATerm att0 (AHsChar aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsChar"  lat []) att1
    toShATerm att0 (AHsString aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsString"  lat []) att1
    toShATerm att0 (AHsFrac aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsFrac"  lat []) att1
    toShATerm att0 (AHsCharPrim aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsCharPrim"  lat []) att1
    toShATerm att0 (AHsStringPrim aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsStringPrim"  lat []) att1
    toShATerm att0 (AHsIntPrim aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsIntPrim"  lat []) att1
    toShATerm att0 (AHsFloatPrim aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsFloatPrim"  lat []) att1
    toShATerm att0 (AHsDoublePrim aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsDoublePrim"  lat []) att1
    toShATerm att0 (AHsLitLit aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsLitLit"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsInt" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsInt aa')
	    (ShAAppl "AHsChar" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsChar aa')
	    (ShAAppl "AHsString" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsString aa')
	    (ShAAppl "AHsFrac" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsFrac aa')
	    (ShAAppl "AHsCharPrim" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsCharPrim aa')
	    (ShAAppl "AHsStringPrim" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsStringPrim aa')
	    (ShAAppl "AHsIntPrim" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsIntPrim aa')
	    (ShAAppl "AHsFloatPrim" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsFloatPrim aa')
	    (ShAAppl "AHsDoublePrim" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsDoublePrim aa')
	    (ShAAppl "AHsLitLit" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsLitLit aa')
	    u -> fromShATermError "AHsLiteral" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsLiteral\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsLiteral\""

instance ATermConvertible AHsType where
    toShATerm att0 (AHsTyFun aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsTyFun"  lat []) att2
    toShATerm att0 (AHsTyTuple aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsTyTuple"  lat []) att1
    toShATerm att0 (AHsTyApp aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsTyApp"  lat []) att2
    toShATerm att0 (AHsTyVar aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsTyVar"  lat []) att1
    toShATerm att0 (AHsTyCon aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsTyCon"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsTyFun" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsTyFun aa' ab')
	    (ShAAppl "AHsTyTuple" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsTyTuple aa')
	    (ShAAppl "AHsTyApp" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsTyApp aa' ab')
	    (ShAAppl "AHsTyVar" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsTyVar aa')
	    (ShAAppl "AHsTyCon" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsTyCon aa')
	    u -> fromShATermError "AHsType" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsType\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsType\""

instance ATermConvertible AHsQualType where
    toShATerm att0 (AHsQualType aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsQualType"  lat []) att2
    toShATerm att0 (AHsUnQualType aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsUnQualType"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsQualType" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsQualType aa' ab')
	    (ShAAppl "AHsUnQualType" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsUnQualType aa')
	    u -> fromShATermError "AHsQualType" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsQualType\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsQualType\""

instance ATermConvertible AHsGuardedRhs where
    toShATerm att0 (AHsGuardedRhs aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsGuardedRhs"  lat []) att3
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsGuardedRhs" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsGuardedRhs aa' ab' ac')
	    u -> fromShATermError "AHsGuardedRhs" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsGuardedRhs\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsGuardedRhs\""

instance ATermConvertible AHsRhs where
    toShATerm att0 (AHsUnGuardedRhs aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsUnGuardedRhs"  lat []) att1
    toShATerm att0 (AHsGuardedRhss aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsGuardedRhss"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsUnGuardedRhs" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsUnGuardedRhs aa')
	    (ShAAppl "AHsGuardedRhss" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsGuardedRhss aa')
	    u -> fromShATermError "AHsRhs" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsRhs\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsRhs\""

instance ATermConvertible AHsBangType where
    toShATerm att0 (AHsBangedTy aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsBangedTy"  lat []) att1
    toShATerm att0 (AHsUnBangedTy aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsUnBangedTy"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsBangedTy" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsBangedTy aa')
	    (ShAAppl "AHsUnBangedTy" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsUnBangedTy aa')
	    u -> fromShATermError "AHsBangType" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsBangType\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsBangType\""

instance ATermConvertible AHsConDecl where
    toShATerm att0 (AHsConDecl aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsConDecl"  lat []) att3
    toShATerm att0 (AHsRecDecl aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsRecDecl"  lat []) att3
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsConDecl" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsConDecl aa' ab' ac')
	    (ShAAppl "AHsRecDecl" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsRecDecl aa' ab' ac')
	    u -> fromShATermError "AHsConDecl" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsConDecl\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsConDecl\""

instance ATermConvertible AHsMatch where
    toShATerm att0 (AHsMatch aa ab ac ad ae) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    (att5,ae') = toShATerm att4 ae
	    lat = [ aa',ab',ac',ad',ae' ]
	in addATerm (ShAAppl "AHsMatch"  lat []) att5
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsMatch" [ aa,ab,ac,ad,ae ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    ae' = fromShATerm (getATermByIndex1 ae att)
		    in (AHsMatch aa' ab' ac' ad' ae')
	    u -> fromShATermError "AHsMatch" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsMatch\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsMatch\""

instance ATermConvertible AHsDecl where
    toShATerm att0 (AHsTypeDecl aa ab ac ad) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    lat = [ aa',ab',ac',ad' ]
	in addATerm (ShAAppl "AHsTypeDecl"  lat []) att4
    toShATerm att0 (AHsDataDecl aa ab ac ad ae af) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    (att5,ae') = toShATerm att4 ae
	    (att6,af') = toShATerm att5 af
	    lat = [ aa',ab',ac',ad',ae',af' ]
	in addATerm (ShAAppl "AHsDataDecl"  lat []) att6
    toShATerm att0 (AHsInfixDecl aa ab ac ad) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    lat = [ aa',ab',ac',ad' ]
	in addATerm (ShAAppl "AHsInfixDecl"  lat []) att4
    toShATerm att0 (AHsNewTypeDecl aa ab ac ad ae af) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    (att5,ae') = toShATerm att4 ae
	    (att6,af') = toShATerm att5 af
	    lat = [ aa',ab',ac',ad',ae',af' ]
	in addATerm (ShAAppl "AHsNewTypeDecl"  lat []) att6
    toShATerm att0 (AHsClassDecl aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsClassDecl"  lat []) att3
    toShATerm att0 (AHsInstDecl aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsInstDecl"  lat []) att3
    toShATerm att0 (AHsDefaultDecl aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsDefaultDecl"  lat []) att2
    toShATerm att0 (AHsTypeSig aa ab ac) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    lat = [ aa',ab',ac' ]
	in addATerm (ShAAppl "AHsTypeSig"  lat []) att3
    toShATerm att0 (AHsFunBind aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsFunBind"  lat []) att1
    toShATerm att0 (AHsPatBind aa ab ac ad) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    lat = [ aa',ab',ac',ad' ]
	in addATerm (ShAAppl "AHsPatBind"  lat []) att4
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsTypeDecl" [ aa,ab,ac,ad ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    in (AHsTypeDecl aa' ab' ac' ad')
	    (ShAAppl "AHsDataDecl" [ aa,ab,ac,ad,ae,af ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    ae' = fromShATerm (getATermByIndex1 ae att)
		    af' = fromShATerm (getATermByIndex1 af att)
		    in (AHsDataDecl aa' ab' ac' ad' ae' af')
	    (ShAAppl "AHsInfixDecl" [ aa,ab,ac,ad ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    in (AHsInfixDecl aa' ab' ac' ad')
	    (ShAAppl "AHsNewTypeDecl" [ aa,ab,ac,ad,ae,af ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    ae' = fromShATerm (getATermByIndex1 ae att)
		    af' = fromShATerm (getATermByIndex1 af att)
		    in (AHsNewTypeDecl aa' ab' ac' ad' ae' af')
	    (ShAAppl "AHsClassDecl" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsClassDecl aa' ab' ac')
	    (ShAAppl "AHsInstDecl" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsInstDecl aa' ab' ac')
	    (ShAAppl "AHsDefaultDecl" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsDefaultDecl aa' ab')
	    (ShAAppl "AHsTypeSig" [ aa,ab,ac ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    in (AHsTypeSig aa' ab' ac')
	    (ShAAppl "AHsFunBind" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsFunBind aa')
	    (ShAAppl "AHsPatBind" [ aa,ab,ac,ad ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    in (AHsPatBind aa' ab' ac' ad')
	    u -> fromShATermError "AHsDecl" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsDecl\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsDecl\""

instance ATermConvertible AHsAssoc where
    toShATerm att0 AHsAssocNone =
	let lat = []
	in addATerm (ShAAppl "AHsAssocNone"  lat []) att0
    toShATerm att0 AHsAssocLeft =
	let lat = []
	in addATerm (ShAAppl "AHsAssocLeft"  lat []) att0
    toShATerm att0 AHsAssocRight =
	let lat = []
	in addATerm (ShAAppl "AHsAssocRight"  lat []) att0
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsAssocNone" [ ] _) ->
		let in AHsAssocNone
	    (ShAAppl "AHsAssocLeft" [ ] _) ->
		let in AHsAssocLeft
	    (ShAAppl "AHsAssocRight" [ ] _) ->
		let in AHsAssocRight
	    u -> fromShATermError "AHsAssoc" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsAssoc\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsAssoc\""

instance ATermConvertible AHsImportSpec where
    toShATerm att0 (AHsIVar aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsIVar"  lat []) att1
    toShATerm att0 (AHsIAbs aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsIAbs"  lat []) att1
    toShATerm att0 (AHsIThingAll aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsIThingAll"  lat []) att1
    toShATerm att0 (AHsIThingWith aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsIThingWith"  lat []) att2
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsIVar" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsIVar aa')
	    (ShAAppl "AHsIAbs" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsIAbs aa')
	    (ShAAppl "AHsIThingAll" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsIThingAll aa')
	    (ShAAppl "AHsIThingWith" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsIThingWith aa' ab')
	    u -> fromShATermError "AHsImportSpec" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsImportSpec\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsImportSpec\""

instance ATermConvertible AHsImportDecl where
    toShATerm att0 (AHsImportDecl aa ab ac ad ae) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    (att5,ae') = toShATerm att4 ae
	    lat = [ aa',ab',ac',ad',ae' ]
	in addATerm (ShAAppl "AHsImportDecl"  lat []) att5
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsImportDecl" [ aa,ab,ac,ad,ae ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    ae' = fromShATerm (getATermByIndex1 ae att)
		    in (AHsImportDecl aa' ab' ac' ad' ae')
	    u -> fromShATermError "AHsImportDecl" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsImportDecl\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsImportDecl\""

instance ATermConvertible AHsExportSpec where
    toShATerm att0 (AHsEVar aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsEVar"  lat []) att1
    toShATerm att0 (AHsEAbs aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsEAbs"  lat []) att1
    toShATerm att0 (AHsEThingAll aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsEThingAll"  lat []) att1
    toShATerm att0 (AHsEThingWith aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AHsEThingWith"  lat []) att2
    toShATerm att0 (AHsEModuleContents aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsEModuleContents"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsEVar" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsEVar aa')
	    (ShAAppl "AHsEAbs" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsEAbs aa')
	    (ShAAppl "AHsEThingAll" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsEThingAll aa')
	    (ShAAppl "AHsEThingWith" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AHsEThingWith aa' ab')
	    (ShAAppl "AHsEModuleContents" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsEModuleContents aa')
	    u -> fromShATermError "AHsExportSpec" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsExportSpec\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsExportSpec\""

instance ATermConvertible AHsModule where
    toShATerm att0 (AHsModule aa ab ac ad) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    (att3,ac') = toShATerm att2 ac
	    (att4,ad') = toShATerm att3 ad
	    lat = [ aa',ab',ac',ad' ]
	in addATerm (ShAAppl "AHsModule"  lat []) att4
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsModule" [ aa,ab,ac,ad ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    ac' = fromShATerm (getATermByIndex1 ac att)
		    ad' = fromShATerm (getATermByIndex1 ad att)
		    in (AHsModule aa' ab' ac' ad')
	    u -> fromShATermError "AHsModule" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsModule\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsModule\""

instance ATermConvertible AHsIdentifier where
    toShATerm att0 (AHsIdent aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsIdent"  lat []) att1
    toShATerm att0 (AHsSymbol aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsSymbol"  lat []) att1
    toShATerm att0 (AHsSpecial aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AHsSpecial"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AHsIdent" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsIdent aa')
	    (ShAAppl "AHsSymbol" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsSymbol aa')
	    (ShAAppl "AHsSpecial" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AHsSpecial aa')
	    u -> fromShATermError "AHsIdentifier" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsIdentifier\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsIdentifier\""

instance ATermConvertible AHsName where
    toShATerm att0 (AQual aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "AQual"  lat []) att2
    toShATerm att0 (AUnQual aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AUnQual"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AQual" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (AQual aa' ab')
	    (ShAAppl "AUnQual" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AUnQual aa')
	    u -> fromShATermError "AHsName" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AHsName\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AHsName\""

instance ATermConvertible AModule where
    toShATerm att0 (AModule aa) =
	let (att1,aa') = toShATerm att0 aa
	    lat = [ aa' ]
	in addATerm (ShAAppl "AModule"  lat []) att1
    fromShATerm att =
	case aterm of
	    (ShAAppl "AModule" [ aa ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    in (AModule aa')
	    u -> fromShATermError "AModule" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"AModule\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"AModule\""

instance ATermConvertible ASrcLoc where
    toShATerm att0 (ASrcLoc aa ab) =
	let (att1,aa') = toShATerm att0 aa
	    (att2,ab') = toShATerm att1 ab
	    lat = [ aa',ab' ]
	in addATerm (ShAAppl "ASrcLoc"  lat []) att2
    fromShATerm att =
	case aterm of
	    (ShAAppl "ASrcLoc" [ aa,ab ] _) ->
		let aa' = fromShATerm (getATermByIndex1 aa att)
		    ab' = fromShATerm (getATermByIndex1 ab att)
		    in (ASrcLoc aa' ab')
	    u -> fromShATermError "ASrcLoc" u
	where
	    aterm = getATerm att
    fromATerm _ = error "function \"fromATerm\" not derived (implemented) for data type \"ASrcLoc\""
    toATerm _ = error "function \"toATerm\" not derived (implemented) for data type \"ASrcLoc\""
