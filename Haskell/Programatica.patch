? base/parse2/Lexer/HsLex.hs
? base/parse2/LexerGen/HsLexerGen
? property/parse2/Parser/PropParser.hs
? property/parse2/Parser/PropParser.hspp
Index: base/lib/Monads/ExceptM.hs
===================================================================
RCS file: /cvs/programatica/tools/base/lib/Monads/ExceptM.hs,v
retrieving revision 1.12
diff -u -r1.12 ExceptM.hs
--- base/lib/Monads/ExceptM.hs	17 Mar 2003 21:44:28 -0000	1.12
+++ base/lib/Monads/ExceptM.hs	30 May 2006 09:33:37 -0000
@@ -1,10 +1,8 @@
 module ExceptM (module ExceptM, HasExcept(..)) where
 
 import MT
-import Control_Monad_Fix
-
-import Monad (liftM)
-
+import Control.Monad.Fix
+import Control.Monad.Error
 
 type ExceptM          = Either
 
@@ -23,28 +21,12 @@
 unRight (Right x)     = x
 unRight _             = error "unRight"
 
-instance Functor (Either x) where
-  fmap                = liftM
-
-instance Monad (Either x) where
-  return              = Right
-  Right x >>= f       = f x
-  Left x >>= f        = Left x
-
-  Right _ >> m        = m
-  Left x >> m         = Left x
-    
-
-instance HasExcept (Either x) x where
+instance Error x => HasExcept (Either x) x where
   raise               = Left
   handle h (Left x)   = h x
   handle h (Right x)  = Right x
   
-
-instance MonadFix (Either x) where
-  mfix f              = let a = f (unRight a) in a
-
-instance HasBaseMonad (Either x) (Either x) where
+instance Error x => HasBaseMonad (Either x) (Either x) where
   inBase              = id    
 
 
Index: base/parse2/NumberNames.hs
===================================================================
RCS file: /cvs/programatica/tools/base/parse2/NumberNames.hs,v
retrieving revision 1.5
diff -u -r1.5 NumberNames.hs
--- base/parse2/NumberNames.hs	8 Dec 2001 01:18:40 -0000	1.5
+++ base/parse2/NumberNames.hs	30 May 2006 09:33:37 -0000
@@ -7,5 +7,5 @@
 --
 numberNames m = mapNames conv m
   where
-    conv (SN i p) = PN i (S p)
+    conv (SN i p) = PN i (Sn (show i) p)
 --}
