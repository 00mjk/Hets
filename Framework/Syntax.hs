module Framework.Syntax where

import LF.Sign
import LF.Morphism
import Data.Map

ltruth :: Morphism
ltruth = Morphism {morphBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/prop", morphModule = "Base2PL", morphName = "", source = Sign {sigBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", sigModule = "Base", getDefs = [Def {getSym = Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "o"}, getType = Type, getValue = Nothing},Def {getSym = Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "ded"}, getType = Func [Const (Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "o"})] Type, getValue = Nothing}]}, target = Sign {sigBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/prop", sigModule = "PL", getDefs = [Def {getSym = Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "o"}, getType = Type, getValue = Nothing},Def {getSym = Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "ded"}, getType = Func [Const (Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "o"})] Type, getValue = Nothing},Def {getSym = Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/modules", symModule = "Truth", symName = "true"}, getType = Const (Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "o"}), getValue = Nothing},Def {getSym = Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/modules", symModule = "Falsity", symName = "false"}, getType = Const (Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "o"}), getValue = Nothing},Def {getSym = Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/modules", symModule = "NEG", symName = "not"}, getType = Func [Const (Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "o"})] (Const (Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "o"})), getValue = Nothing},Def {getSym = Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/modules", symModule = "IMP", symName = "imp"}, getType = Func [Const (Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "o"})] (Func [Const (Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "o"})] (Const (Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "o"}))), getValue = Nothing},Def {getSym = Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/modules", symModule = "CONJ", symName = "and"}, getType = Func [Const (Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "o"})] (Func [Const (Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "o"})] (Const (Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "o"}))), getValue = Nothing},Def {getSym = Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/modules", symModule = "DISJ", symName = "or"}, getType = Func [Const (Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "o"})] (Func [Const (Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "o"})] (Const (Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "o"}))), getValue = Nothing}]}, morphType = Postulated, symMap = fromList [(Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "ded"},Lamb [("x",Const (Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "o"}))] (Appl (Const (Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "ded"})) [Var "x"])),(Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "o"},Const (Symbol {symBase = "/home/mathias/hets/Framework/specs/logics/propositional/syntax/base", symModule = "Base", symName = "o"}))]}
