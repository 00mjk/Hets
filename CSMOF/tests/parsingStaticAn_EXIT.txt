Result {diags = [], maybeResult = Just (metamodel Class { 
	abstract class UMLModelElement { 
		property kind [1,1] : String
		property name [1,1] : String
	 } 

	class Package extends UMLModelElement { 
		property elements [0,*] : Classifier oppositeOf namespace
	 } 

	class Classifier extends UMLModelElement { 
		property namespace [1,1] : Package oppositeOf elements
	 } 

	class Attribute extends UMLModelElement { 
		property owner [1,1] : Class oppositeOf attribute
		property type [1,1] : PrimitiveDataType
	 } 

	class Class extends Classifier { 
		property attribute [0,*] : Attribute oppositeOf owner
	 } 

	class PrimitiveDataType extends Classifier { 
	 } 

	datatype String

}

model ClassModel conformsTo Class { 
	 object p : Package
	 object a : Attribute
	 object c : Class
	 object pdt : PrimitiveDataType
	 object Package : String
	 object ID : String
	 object Persistent : String
	 object value : String
	 object String : String
	 object _ : String
	 link namespace(c,p) 
	 link namespace(pdt,p) 
	 link type(a,pdt) 
	 link attribute(c,a) 
	 link name(p,Package) 
	 link name(c,ID) 
	 link name(a,value) 
	 link name(pdt,String) 
	 link kind(c,Persistent) 
	 link kind(p,_) 
	 link kind(a,_) 
	 link kind(pdt,_) 
} 
,ExtSign {plainSign = Types = ( Class(Attribute) Class(Class) Class(Classifier) Class(Package) Class(PrimitiveDataType) DataType(String) Class(UMLModelElement)) 
SubRels = (( Class(Attribute), Class(UMLModelElement))( Class(Class), Class(Classifier))( Class(Classifier), Class(UMLModelElement))( Class(Package), Class(UMLModelElement))( Class(PrimitiveDataType), Class(Classifier))) 
Abs = ( Class(UMLModelElement)) 
Roles = (_ attribute elements kind name namespace owner type ) 
Properties = (Property(_ : Class(Attribute),type : Class(PrimitiveDataType)) 
Property(_ : Class(UMLModelElement),kind : DataType(String)) 
Property(_ : Class(UMLModelElement),name : DataType(String)) 
Property(attribute : Class(Attribute),owner : Class(Class)) 
Property(elements : Class(Classifier),namespace : Class(Package)) 
Property(namespace : Class(Package),elements : Class(Classifier)) 
Property(owner : Class(Class),attribute : Class(Attribute)) 
) 
Instances = (("ID", DataType(String))("Package", DataType(String))("Persistent", DataType(String))("String", DataType(String))("_", DataType(String))("a", Class(Attribute))("c", Class(Class))("p", Class(Package))("pdt", Class(PrimitiveDataType))("value", DataType(String))) 
Links = (Link(a : _ : Class(UMLModelElement),_ : kind : DataType(String)) 
Link(a : _ : Class(Attribute),pdt : type : Class(PrimitiveDataType)) 
Link(a : _ : Class(UMLModelElement),value : name : DataType(String)) 
Link(c : _ : Class(UMLModelElement),ID : name : DataType(String)) 
Link(c : _ : Class(UMLModelElement),Persistent : kind : DataType(String)) 
Link(c : owner : Class(Class),a : attribute : Class(Attribute)) 
Link(c : elements : Class(Classifier),p : namespace : Class(Package)) 
Link(p : _ : Class(UMLModelElement),Package : name : DataType(String)) 
Link(p : _ : Class(UMLModelElement),_ : kind : DataType(String)) 
Link(pdt : _ : Class(UMLModelElement),String : name : DataType(String)) 
Link(pdt : _ : Class(UMLModelElement),_ : kind : DataType(String)) 
Link(pdt : elements : Class(Classifier),p : namespace : Class(Package)) 
) 
, nonImportedSymbols = fromList []},[SenAttr {senAttr = "", isAxiom = True, isDef = False, wasTheorem = False, simpAnno = Nothing, attrOrigin = Nothing, sentence =  Class(UMLModelElement).kind = 1
},SenAttr {senAttr = "", isAxiom = True, isDef = False, wasTheorem = False, simpAnno = Nothing, attrOrigin = Nothing, sentence =  Class(UMLModelElement).name = 1
},SenAttr {senAttr = "", isAxiom = True, isDef = False, wasTheorem = False, simpAnno = Nothing, attrOrigin = Nothing, sentence =  Class(Classifier).namespace = 1
},SenAttr {senAttr = "", isAxiom = True, isDef = False, wasTheorem = False, simpAnno = Nothing, attrOrigin = Nothing, sentence =  Class(Attribute).owner = 1
},SenAttr {senAttr = "", isAxiom = True, isDef = False, wasTheorem = False, simpAnno = Nothing, attrOrigin = Nothing, sentence =  Class(Attribute).type = 1
}])}