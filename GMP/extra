ideea on handling negsubst with RoClause datatype ...

negSubst c ro =
  case c of 
    Cl []    ->
      case ro of
        Implies ([],[]) -> T
        _               -> error ("error @ GMPSAT.negSubst 1")
    Cl (h:t) ->
      let Implies (n,p) = ro
      in if (n==[])&&(p==[])
         then error ("error @ GMPSAT.negSubst 2")
         else if (n/=[])
              then let Mapp _ f = head n
                       g = negSubst (Cl t) (Implies (tail n, p))
                   in case h of
                        PLit _ -> Junctor (Neg f) And g
                        _      -> error ("error @ GMPSAT.negsubst 3")
              else let Mapp _ f = head p
                       g = negSubst (Cl t) (Implies (n, tail p))
                   in case h of
                        NLit _ -> Junctor f And g
                        _      -> error ("error @ GMPSAT.negSubst 3")
