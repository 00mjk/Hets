module CASL_DL.CASL_DL2CASLHelpers where

import Common.Id
import CASL.AS_Basic_CASL
import Common.AS_Annotation
import CASL.Sign
import Data.Set as Set
import Data.Map as Map
import Common.Lib.Rel as Rel

predCardResSig = inlineSign CASL
                "sorts gn_Nat, Object, gn_Pos, gn_Set[Elem], gn_Subject\nsorts gn_Pos < gn_Nat\nop gn_card__ : gn_Set[Elem] -> gn_Nat\nop 0 : gn_Nat\nop 1 : gn_Nat\nop 2 : gn_Nat\nop 3 : gn_Nat\nop 4 : gn_Nat\nop 5 : gn_Nat\nop 6 : gn_Nat\nop 7 : gn_Nat\nop 8 : gn_Nat\nop 9 : gn_Nat\nop __gn_fact : gn_Nat -> gn_Nat\nop __gn_timez__ : gn_Nat * gn_Nat -> gn_Nat\nop __gn_timez__ : gn_Pos * gn_Pos -> gn_Pos\nop __gn_plus__ : gn_Nat * gn_Nat -> gn_Nat\nop __gn_plus__ : gn_Nat * gn_Pos -> gn_Pos\nop __gn_plus__ : Object * gn_Set[Elem] -> gn_Set[Elem]\nop __gn_plus__ : gn_Pos * gn_Nat -> gn_Pos\nop __gn_plus__ : gn_Set[Elem] * Object -> gn_Set[Elem]\nop __gn_minus__ : gn_Set[Elem] * Object -> gn_Set[Elem]\nop __gn_minus__ : gn_Set[Elem] * gn_Set[Elem] -> gn_Set[Elem]\nop __gn_minus_tot__ : gn_Nat * gn_Nat -> gn_Nat\nop __gn_minus_part__ : gn_Nat * gn_Nat ->? gn_Nat\nop __gn_div__ : gn_Nat * gn_Nat ->? gn_Nat\nop __gn_append__ : gn_Nat * gn_Nat -> gn_Nat\nop __gn_power__ : gn_Nat * gn_Nat -> gn_Nat\nop __gn_gn_div__ : gn_Nat * gn_Nat ->? gn_Nat\nop __gn_intersection__ : gn_Set[Elem] * gn_Set[Elem] -> gn_Set[Elem]\nop __gn_mod__ : gn_Nat * gn_Nat ->? gn_Nat\nop __gn_symDiff__ : gn_Set[Elem] * gn_Set[Elem] -> gn_Set[Elem]\nop __gn_union__ : gn_Set[Elem] * gn_Set[Elem] -> gn_Set[Elem]\nop gn_n1 : gn_Pos\nop gn_max : gn_Nat * gn_Nat -> gn_Nat\nop gn_min : gn_Nat * gn_Nat -> gn_Nat\nop gn_pre : gn_Nat ->? gn_Nat\nop gn_suc : gn_Nat -> gn_Nat\nop gn_suc : gn_Nat -> gn_Pos\nop gn_toSet : gn_Subject -> gn_Set[Elem]\nop gn_singleton __ : Object -> gn_Set[Elem]\nop gn_emptyset : gn_Set[Elem]\npred __gn_less__ : gn_Nat * gn_Nat\npred __gn_lt_eq__ : gn_Nat * gn_Nat\npred __gn_gt__ : gn_Nat * gn_Nat\npred __gn_gt_eq__ : gn_Nat * gn_Nat\npred __gn_eps__ : Object * gn_Set[Elem]\npred __isSubsetOf__ : gn_Set[Elem] * gn_Set[Elem]\npred gn_cardinality[predicate] : gn_Subject * gn_Nat\npred gn_even : gn_Nat\npred gn_isNonEmpty : gn_Set[Elem]\npred gn_maxCardinality[predicate] : gn_Subject * gn_Nat\npred gn_minCardinality[predicate] : gn_Subject * gn_Nat\npred gn_odd : gn_Nat\npred predicate : gn_Subject * Object\n\ngenerated type gn_Set[Elem] ::= __gn_plus__(gn_Set[Elem]; Object) | gn_emptyset\n                                        \n\nforall x : Object . not x gn_eps gn_emptyset \nforall x, y : Object; M : gn_Set[Elem] . x gn_eps M gn_plus y <=> x = y \\/ x gn_eps M       \nforall M, N : gn_Set[Elem] . M = N <=> forall x : Object . x gn_eps M <=> x gn_eps N\nforall X1 : gn_Nat . gn_pre(gn_suc(X1)) = X1 \nforall X1 : gn_Nat; Y1 : gn_Nat . gn_suc(X1) = gn_suc(Y1) <=> X1 = Y1\nforall Y1 : gn_Nat . not 0 = gn_suc(Y1) \n. not def gn_pre(0) \ngenerated type gn_Nat ::= 0 | gn_suc(gn_Nat)        \n\n. 1 = gn_suc(0)\n\n. 2 = gn_suc(1) \n\n. 3 = gn_suc(2)\n\n. 4 = gn_suc(3)\n\n. 5 = gn_suc(4)\n\n. 6 = gn_suc(5)\n\n. 7 = gn_suc(6)\n\n. 8 = gn_suc(7)\n\n. 9 = gn_suc(8)\nforall m : gn_Nat; n : gn_Nat . m gn_append n = (m gn_timez gn_suc(9)) gn_plus n\nforall x : gn_Nat; y : gn_Nat . x gn_plus y = y gn_plus x \nforall x : gn_Nat; y : gn_Nat; z : gn_Nat . (x gn_plus y) gn_plus z = x gn_plus (y gn_plus z)\nforall x : gn_Nat . x gn_plus 0 = x \nforall x : gn_Nat . 0 gn_plus x = x \nforall x : gn_Nat; y : gn_Nat; z : gn_Nat . x gn_plus (y gn_plus z) = y gn_plus (x gn_plus z)\nforall x : gn_Nat; y : gn_Nat . x gn_timez y = y gn_timez x \nforall x : gn_Nat; y : gn_Nat; z : gn_Nat . (x gn_timez y) gn_timez z = x gn_timez (y gn_timez z)\nforall x : gn_Nat . x gn_timez 1 = x \nforall x : gn_Nat . 1 gn_timez x = x \nforall x : gn_Nat; y : gn_Nat; z : gn_Nat . x gn_timez (y gn_timez z) = y gn_timez (x gn_timez z)\nforall x : gn_Nat; y : gn_Nat . gn_min(x, y) = gn_min(y, x) \nforall x : gn_Nat; y : gn_Nat; z : gn_Nat\n. gn_min(gn_min(x, y), z) = gn_min(x, gn_min(y, z))       \nforall x : gn_Nat; y : gn_Nat; z : gn_Nat\n. gn_min(x, gn_min(y, z)) = gn_min(y, gn_min(x, z))    \nforall x : gn_Nat; y : gn_Nat . gn_max(x, y) = gn_max(y, x)\nforall x : gn_Nat; y : gn_Nat; z : gn_Nat\n. gn_max(gn_max(x, y), z) = gn_max(x, gn_max(y, z))      \nforall x : gn_Nat . gn_max(x, 0) = x \nforall x : gn_Nat . gn_max(0, x) = x\nforall x : gn_Nat; y : gn_Nat; z : gn_Nat\n. gn_max(x, gn_max(y, z)) = gn_max(y, gn_max(x, z)) \nforall n : gn_Nat . 0 gn_lt_eq n \nforall n : gn_Nat . not gn_suc(n) gn_lt_eq 0 \nforall m, n : gn_Nat . gn_suc(m) gn_lt_eq gn_suc(n) <=> m gn_lt_eq n \nforall m, n : gn_Nat . m gn_gt_eq n <=> n gn_lt_eq m \nforall m, n : gn_Nat . m gn_less n <=> m gn_lt_eq n /\\ not m = n \nforall m, n : gn_Nat . m gn_gt n <=> n gn_less m \n. gn_even(0) \nforall m : gn_Nat . gn_even(gn_suc(m)) <=> gn_odd(m) \nforall m : gn_Nat . gn_odd(m) <=> not gn_even(m) \n. 0  gn_fact = 1 \nforall n : gn_Nat . (gn_suc(n))  gn_fact = gn_suc(n) gn_timez n  gn_fact\nforall m : gn_Nat . 0 gn_plus m = m\nforall m, n : gn_Nat . gn_suc(n) gn_plus m = gn_suc(n gn_plus m) \nforall m : gn_Nat . 0 gn_timez m = 0 \nforall m, n : gn_Nat . gn_suc(n) gn_timez m = (n gn_timez m) gn_plus m \nforall m : gn_Nat . m gn_power 0 = 1 \nforall m, n : gn_Nat . m gn_power gn_suc(n) = m gn_timez (m gn_power n)\nforall m, n : gn_Nat . gn_min(m, n) = m when m gn_lt_eq n else n\nforall m, n : gn_Nat . gn_max(m, n) = n when m gn_lt_eq n else m\nforall m, n : gn_Nat . n gn_minus_tot m = 0 if m gn_gt n \nforall m, n : gn_Nat . n gn_minus_tot m = n gn_minus_part m if m gn_lt_eq n \nforall m, n : gn_Nat . def m gn_minus_part n <=> m gn_gt_eq n \nforall m, n, r : gn_Nat . m gn_minus_part n = r <=> m = r gn_plus n \nforall m, n : gn_Nat . def m gn_div n <=> not n = 0 /\\ m gn_mod n = 0\nforall m : gn_Nat . not def m gn_div 0 \nforall m, n, r : gn_Nat . (m gn_div n = r <=> m = r gn_timez n) if n gn_gt 0\nforall m, n : gn_Nat . def m gn_gn_div n <=> not n = 0 \nforall m, n, r : gn_Nat . m gn_gn_div n = r <=> exists s : gn_Nat . m = (n gn_timez r) gn_plus s /\\ s gn_less n\nforall m, n : gn_Nat . def m gn_mod n <=> not n = 0\nforall m, n, s : gn_Nat . m gn_mod n = s <=> exists r : gn_Nat . m = (n gn_timez r) gn_plus s /\\ s gn_less n\nforall r, s, t : gn_Nat . (r gn_plus s) gn_timez t = (r gn_timez t) gn_plus (s gn_timez t)\nforall r, s, t : gn_Nat . t gn_timez (r gn_plus s) = (t gn_timez r) gn_plus (t gn_timez s)\nforall p : gn_Nat . p in gn_Pos <=> p gn_gt 0 \n. gn_n1 = gn_suc(0) \nforall m : gn_Nat . gn_min(m, 0) = 0 \nforall m, n : gn_Nat . m = ((m gn_gn_div n) gn_timez n) gn_plus (m gn_mod n) if not n = 0\nforall m, r, s : gn_Nat . m gn_power (r gn_plus s) = (m gn_power r) gn_timez (m gn_power s)\nforall x : gn_Set[Elem]; y : gn_Set[Elem]; z : gn_Set[Elem] . (x gn_union y) gn_union z = x gn_union (y gn_union z) \nforall x : gn_Set[Elem]; y : gn_Set[Elem] . x gn_union y = y gn_union x\nforall x : gn_Set[Elem] . x gn_union x = x \nforall x : gn_Set[Elem] . x gn_union gn_emptyset = x \nforall x : gn_Set[Elem] . gn_emptyset gn_union x = x \nforall x : gn_Set[Elem]; y : gn_Set[Elem]; z : gn_Set[Elem] . x gn_union (y gn_union z) = y gn_union (x gn_union z)\nforall x : gn_Set[Elem]; y : gn_Set[Elem]; z : gn_Set[Elem] . (x gn_intersection y) gn_intersection z = x gn_intersection (y gn_intersection z)\nforall x : gn_Set[Elem]; y : gn_Set[Elem] . x gn_intersection y = y gn_intersection x \nforall x : gn_Set[Elem] . x gn_intersection x = x\nforall x : gn_Set[Elem]; y : gn_Set[Elem]; z : gn_Set[Elem] . x gn_intersection (y gn_intersection z) = y gn_intersection (x gn_intersection z)\nforall M : gn_Set[Elem] . gn_isNonEmpty(M) <=> not M = gn_emptyset\nforall M, N : gn_Set[Elem] . M isSubsetOf N <=> forall x : Object . x gn_eps M => x gn_eps N\nforall x : Object . gn_singleton x = gn_emptyset gn_plus x \n. gn_card gn_emptyset = 0\nforall x : Object; M : gn_Set[Elem] . gn_card (M gn_plus x) = gn_card M when x gn_eps M else gn_card M gn_plus gn_n1\nforall x : Object; M : gn_Set[Elem] . x gn_plus M = M gn_plus x\nforall y : Object . gn_emptyset gn_minus y = gn_emptyset\nforall x, y : Object; M : gn_Set[Elem] . (M gn_plus x) gn_minus y = M gn_minus y when x = y else (M gn_minus y) gn_plus x\nforall M : gn_Set[Elem] . M gn_intersection gn_emptyset = gn_emptyset\nforall x : Object; M, N : gn_Set[Elem] . M gn_intersection (N gn_plus x) = (M gn_intersection N) gn_plus x when x gn_eps M else M gn_intersection N\nforall M : gn_Set[Elem] . M gn_union gn_emptyset = M \nforall x : Object; M, N : gn_Set[Elem] . M gn_union (N gn_plus x) = M gn_union N when x gn_eps M else (M gn_union N) gn_plus x\nforall M : gn_Set[Elem] . M gn_minus gn_emptyset = M \nforall x : Object; M, N : gn_Set[Elem] . M gn_minus (N gn_plus x) = (M gn_minus N) gn_minus x\nforall M, N : gn_Set[Elem] . M gn_symDiff N = (M gn_minus N) gn_union (N gn_minus M)\nforall M, N, O : gn_Set[Elem] . (M gn_union N) gn_intersection O = (M gn_intersection O) gn_union (N gn_intersection O)   \nforall M, N, O : gn_Set[Elem] . O gn_intersection (M gn_union N) = (O gn_intersection M) gn_union (O gn_intersection N)     \nforall M, N : gn_Set[Elem] . gn_card (M gn_union N) = (gn_card M gn_plus gn_card N) gn_minus_part gn_card (M gn_intersection N)\nforall M, N : gn_Set[Elem] . gn_card M gn_lt_eq gn_card (M gn_union N)\nforall M, N : gn_Set[Elem] . M isSubsetOf M gn_union N\nforall M, N : gn_Set[Elem] . M gn_intersection N isSubsetOf M\nforall x : gn_Subject; y : Object . predicate(x, y) <=> y gn_eps gn_toSet(x)\nforall s : gn_Subject; n : gn_Nat . gn_minCardinality[predicate](s, n) <=> gn_card gn_toSet(s) gn_gt_eq n      \nforall s : gn_Subject; n : gn_Nat . gn_maxCardinality[predicate](s, n) <=> gn_card gn_toSet(s) gn_lt_eq n      \nforall s : gn_Subject; n : gn_Nat . gn_cardinality[predicate](s, n) <=> gn_card gn_toSet(s) = n      \n"

predCardResAx = inlineAxioms CASL
                "sorts gn_Nat, Object, gn_Pos, gn_Set[Elem], gn_Subject\nsorts gn_Pos < gn_Nat\nop gn_card__ : gn_Set[Elem] -> gn_Nat\nop 0 : gn_Nat\nop 1 : gn_Nat\nop 2 : gn_Nat\nop 3 : gn_Nat\nop 4 : gn_Nat\nop 5 : gn_Nat\nop 6 : gn_Nat\nop 7 : gn_Nat\nop 8 : gn_Nat\nop 9 : gn_Nat\nop __gn_fact : gn_Nat -> gn_Nat\nop __gn_timez__ : gn_Nat * gn_Nat -> gn_Nat\nop __gn_timez__ : gn_Pos * gn_Pos -> gn_Pos\nop __gn_plus__ : gn_Nat * gn_Nat -> gn_Nat\nop __gn_plus__ : gn_Nat * gn_Pos -> gn_Pos\nop __gn_plus__ : Object * gn_Set[Elem] -> gn_Set[Elem]\nop __gn_plus__ : gn_Pos * gn_Nat -> gn_Pos\nop __gn_plus__ : gn_Set[Elem] * Object -> gn_Set[Elem]\nop __gn_minus__ : gn_Set[Elem] * Object -> gn_Set[Elem]\nop __gn_minus__ : gn_Set[Elem] * gn_Set[Elem] -> gn_Set[Elem]\nop __gn_minus_tot__ : gn_Nat * gn_Nat -> gn_Nat\nop __gn_minus_part__ : gn_Nat * gn_Nat ->? gn_Nat\nop __gn_div__ : gn_Nat * gn_Nat ->? gn_Nat\nop __gn_append__ : gn_Nat * gn_Nat -> gn_Nat\nop __gn_power__ : gn_Nat * gn_Nat -> gn_Nat\nop __gn_gn_div__ : gn_Nat * gn_Nat ->? gn_Nat\nop __gn_intersection__ : gn_Set[Elem] * gn_Set[Elem] -> gn_Set[Elem]\nop __gn_mod__ : gn_Nat * gn_Nat ->? gn_Nat\nop __gn_symDiff__ : gn_Set[Elem] * gn_Set[Elem] -> gn_Set[Elem]\nop __gn_union__ : gn_Set[Elem] * gn_Set[Elem] -> gn_Set[Elem]\nop gn_n1 : gn_Pos\nop gn_max : gn_Nat * gn_Nat -> gn_Nat\nop gn_min : gn_Nat * gn_Nat -> gn_Nat\nop gn_pre : gn_Nat ->? gn_Nat\nop gn_suc : gn_Nat -> gn_Nat\nop gn_suc : gn_Nat -> gn_Pos\nop gn_toSet : gn_Subject -> gn_Set[Elem]\nop gn_singleton __ : Object -> gn_Set[Elem]\nop gn_emptyset : gn_Set[Elem]\npred __gn_less__ : gn_Nat * gn_Nat\npred __gn_lt_eq__ : gn_Nat * gn_Nat\npred __gn_gt__ : gn_Nat * gn_Nat\npred __gn_gt_eq__ : gn_Nat * gn_Nat\npred __gn_eps__ : Object * gn_Set[Elem]\npred __isSubsetOf__ : gn_Set[Elem] * gn_Set[Elem]\npred gn_cardinality[predicate] : gn_Subject * gn_Nat\npred gn_even : gn_Nat\npred gn_isNonEmpty : gn_Set[Elem]\npred gn_maxCardinality[predicate] : gn_Subject * gn_Nat\npred gn_minCardinality[predicate] : gn_Subject * gn_Nat\npred gn_odd : gn_Nat\npred predicate : gn_Subject * Object\n\ngenerated type gn_Set[Elem] ::= __gn_plus__(gn_Set[Elem]; Object) | gn_emptyset\n                                        \n\nforall x : Object . not x gn_eps gn_emptyset \nforall x, y : Object; M : gn_Set[Elem] . x gn_eps M gn_plus y <=> x = y \\/ x gn_eps M       \nforall M, N : gn_Set[Elem] . M = N <=> forall x : Object . x gn_eps M <=> x gn_eps N\nforall X1 : gn_Nat . gn_pre(gn_suc(X1)) = X1 \nforall X1 : gn_Nat; Y1 : gn_Nat . gn_suc(X1) = gn_suc(Y1) <=> X1 = Y1\nforall Y1 : gn_Nat . not 0 = gn_suc(Y1) \n. not def gn_pre(0) \ngenerated type gn_Nat ::= 0 | gn_suc(gn_Nat)        \n\n. 1 = gn_suc(0)\n\n. 2 = gn_suc(1) \n\n. 3 = gn_suc(2)\n\n. 4 = gn_suc(3)\n\n. 5 = gn_suc(4)\n\n. 6 = gn_suc(5)\n\n. 7 = gn_suc(6)\n\n. 8 = gn_suc(7)\n\n. 9 = gn_suc(8)\nforall m : gn_Nat; n : gn_Nat . m gn_append n = (m gn_timez gn_suc(9)) gn_plus n\nforall x : gn_Nat; y : gn_Nat . x gn_plus y = y gn_plus x \nforall x : gn_Nat; y : gn_Nat; z : gn_Nat . (x gn_plus y) gn_plus z = x gn_plus (y gn_plus z)\nforall x : gn_Nat . x gn_plus 0 = x \nforall x : gn_Nat . 0 gn_plus x = x \nforall x : gn_Nat; y : gn_Nat; z : gn_Nat . x gn_plus (y gn_plus z) = y gn_plus (x gn_plus z)\nforall x : gn_Nat; y : gn_Nat . x gn_timez y = y gn_timez x \nforall x : gn_Nat; y : gn_Nat; z : gn_Nat . (x gn_timez y) gn_timez z = x gn_timez (y gn_timez z)\nforall x : gn_Nat . x gn_timez 1 = x \nforall x : gn_Nat . 1 gn_timez x = x \nforall x : gn_Nat; y : gn_Nat; z : gn_Nat . x gn_timez (y gn_timez z) = y gn_timez (x gn_timez z)\nforall x : gn_Nat; y : gn_Nat . gn_min(x, y) = gn_min(y, x) \nforall x : gn_Nat; y : gn_Nat; z : gn_Nat\n. gn_min(gn_min(x, y), z) = gn_min(x, gn_min(y, z))       \nforall x : gn_Nat; y : gn_Nat; z : gn_Nat\n. gn_min(x, gn_min(y, z)) = gn_min(y, gn_min(x, z))    \nforall x : gn_Nat; y : gn_Nat . gn_max(x, y) = gn_max(y, x)\nforall x : gn_Nat; y : gn_Nat; z : gn_Nat\n. gn_max(gn_max(x, y), z) = gn_max(x, gn_max(y, z))      \nforall x : gn_Nat . gn_max(x, 0) = x \nforall x : gn_Nat . gn_max(0, x) = x\nforall x : gn_Nat; y : gn_Nat; z : gn_Nat\n. gn_max(x, gn_max(y, z)) = gn_max(y, gn_max(x, z)) \nforall n : gn_Nat . 0 gn_lt_eq n \nforall n : gn_Nat . not gn_suc(n) gn_lt_eq 0 \nforall m, n : gn_Nat . gn_suc(m) gn_lt_eq gn_suc(n) <=> m gn_lt_eq n \nforall m, n : gn_Nat . m gn_gt_eq n <=> n gn_lt_eq m \nforall m, n : gn_Nat . m gn_less n <=> m gn_lt_eq n /\\ not m = n \nforall m, n : gn_Nat . m gn_gt n <=> n gn_less m \n. gn_even(0) \nforall m : gn_Nat . gn_even(gn_suc(m)) <=> gn_odd(m) \nforall m : gn_Nat . gn_odd(m) <=> not gn_even(m) \n. 0  gn_fact = 1 \nforall n : gn_Nat . (gn_suc(n))  gn_fact = gn_suc(n) gn_timez n  gn_fact\nforall m : gn_Nat . 0 gn_plus m = m\nforall m, n : gn_Nat . gn_suc(n) gn_plus m = gn_suc(n gn_plus m) \nforall m : gn_Nat . 0 gn_timez m = 0 \nforall m, n : gn_Nat . gn_suc(n) gn_timez m = (n gn_timez m) gn_plus m \nforall m : gn_Nat . m gn_power 0 = 1 \nforall m, n : gn_Nat . m gn_power gn_suc(n) = m gn_timez (m gn_power n)\nforall m, n : gn_Nat . gn_min(m, n) = m when m gn_lt_eq n else n\nforall m, n : gn_Nat . gn_max(m, n) = n when m gn_lt_eq n else m\nforall m, n : gn_Nat . n gn_minus_tot m = 0 if m gn_gt n \nforall m, n : gn_Nat . n gn_minus_tot m = n gn_minus_part m if m gn_lt_eq n \nforall m, n : gn_Nat . def m gn_minus_part n <=> m gn_gt_eq n \nforall m, n, r : gn_Nat . m gn_minus_part n = r <=> m = r gn_plus n \nforall m, n : gn_Nat . def m gn_div n <=> not n = 0 /\\ m gn_mod n = 0\nforall m : gn_Nat . not def m gn_div 0 \nforall m, n, r : gn_Nat . (m gn_div n = r <=> m = r gn_timez n) if n gn_gt 0\nforall m, n : gn_Nat . def m gn_gn_div n <=> not n = 0 \nforall m, n, r : gn_Nat . m gn_gn_div n = r <=> exists s : gn_Nat . m = (n gn_timez r) gn_plus s /\\ s gn_less n\nforall m, n : gn_Nat . def m gn_mod n <=> not n = 0\nforall m, n, s : gn_Nat . m gn_mod n = s <=> exists r : gn_Nat . m = (n gn_timez r) gn_plus s /\\ s gn_less n\nforall r, s, t : gn_Nat . (r gn_plus s) gn_timez t = (r gn_timez t) gn_plus (s gn_timez t)\nforall r, s, t : gn_Nat . t gn_timez (r gn_plus s) = (t gn_timez r) gn_plus (t gn_timez s)\nforall p : gn_Nat . p in gn_Pos <=> p gn_gt 0 \n. gn_n1 = gn_suc(0) \nforall m : gn_Nat . gn_min(m, 0) = 0 \nforall m, n : gn_Nat . m = ((m gn_gn_div n) gn_timez n) gn_plus (m gn_mod n) if not n = 0\nforall m, r, s : gn_Nat . m gn_power (r gn_plus s) = (m gn_power r) gn_timez (m gn_power s)\nforall x : gn_Set[Elem]; y : gn_Set[Elem]; z : gn_Set[Elem] . (x gn_union y) gn_union z = x gn_union (y gn_union z) \nforall x : gn_Set[Elem]; y : gn_Set[Elem] . x gn_union y = y gn_union x\nforall x : gn_Set[Elem] . x gn_union x = x \nforall x : gn_Set[Elem] . x gn_union gn_emptyset = x \nforall x : gn_Set[Elem] . gn_emptyset gn_union x = x \nforall x : gn_Set[Elem]; y : gn_Set[Elem]; z : gn_Set[Elem] . x gn_union (y gn_union z) = y gn_union (x gn_union z)\nforall x : gn_Set[Elem]; y : gn_Set[Elem]; z : gn_Set[Elem] . (x gn_intersection y) gn_intersection z = x gn_intersection (y gn_intersection z)\nforall x : gn_Set[Elem]; y : gn_Set[Elem] . x gn_intersection y = y gn_intersection x \nforall x : gn_Set[Elem] . x gn_intersection x = x\nforall x : gn_Set[Elem]; y : gn_Set[Elem]; z : gn_Set[Elem] . x gn_intersection (y gn_intersection z) = y gn_intersection (x gn_intersection z)\nforall M : gn_Set[Elem] . gn_isNonEmpty(M) <=> not M = gn_emptyset\nforall M, N : gn_Set[Elem] . M isSubsetOf N <=> forall x : Object . x gn_eps M => x gn_eps N\nforall x : Object . gn_singleton x = gn_emptyset gn_plus x \n. gn_card gn_emptyset = 0\nforall x : Object; M : gn_Set[Elem] . gn_card (M gn_plus x) = gn_card M when x gn_eps M else gn_card M gn_plus gn_n1\nforall x : Object; M : gn_Set[Elem] . x gn_plus M = M gn_plus x\nforall y : Object . gn_emptyset gn_minus y = gn_emptyset\nforall x, y : Object; M : gn_Set[Elem] . (M gn_plus x) gn_minus y = M gn_minus y when x = y else (M gn_minus y) gn_plus x\nforall M : gn_Set[Elem] . M gn_intersection gn_emptyset = gn_emptyset\nforall x : Object; M, N : gn_Set[Elem] . M gn_intersection (N gn_plus x) = (M gn_intersection N) gn_plus x when x gn_eps M else M gn_intersection N\nforall M : gn_Set[Elem] . M gn_union gn_emptyset = M \nforall x : Object; M, N : gn_Set[Elem] . M gn_union (N gn_plus x) = M gn_union N when x gn_eps M else (M gn_union N) gn_plus x\nforall M : gn_Set[Elem] . M gn_minus gn_emptyset = M \nforall x : Object; M, N : gn_Set[Elem] . M gn_minus (N gn_plus x) = (M gn_minus N) gn_minus x\nforall M, N : gn_Set[Elem] . M gn_symDiff N = (M gn_minus N) gn_union (N gn_minus M)\nforall M, N, O : gn_Set[Elem] . (M gn_union N) gn_intersection O = (M gn_intersection O) gn_union (N gn_intersection O)   \nforall M, N, O : gn_Set[Elem] . O gn_intersection (M gn_union N) = (O gn_intersection M) gn_union (O gn_intersection N)     \nforall M, N : gn_Set[Elem] . gn_card (M gn_union N) = (gn_card M gn_plus gn_card N) gn_minus_part gn_card (M gn_intersection N)\nforall M, N : gn_Set[Elem] . gn_card M gn_lt_eq gn_card (M gn_union N)\nforall M, N : gn_Set[Elem] . M isSubsetOf M gn_union N\nforall M, N : gn_Set[Elem] . M gn_intersection N isSubsetOf M\nforall x : gn_Subject; y : Object . predicate(x, y) <=> y gn_eps gn_toSet(x)\nforall s : gn_Subject; n : gn_Nat . gn_minCardinality[predicate](s, n) <=> gn_card gn_toSet(s) gn_gt_eq n      \nforall s : gn_Subject; n : gn_Nat . gn_maxCardinality[predicate](s, n) <=> gn_card gn_toSet(s) gn_lt_eq n      \nforall s : gn_Subject; n : gn_Nat . gn_cardinality[predicate](s, n) <=> gn_card gn_toSet(s) = n      \n"
