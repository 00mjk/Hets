{- |
Module      :  $Header$
Copyright   :  (c) Klaus Luettich, Uni Bremen 2004
License     :  similar to LGPL, see HetCATS/LICENSE.txt or LIZENZ.txt

Maintainer  :  luecke@informatik.uni-bremen.de
Stability   :  provisional
Portability :  portable

Predefined signature part of CASL_DL.
-}

module CASL_DL.PredefinedSign
  ( predefinedSign
  , topSort
  , topSortD
  , dataSig_CASL
  ) where

import CASL_DL.AS_CASL_DL
import CASL_DL.Sign

import Common.Id
import qualified Common.Lib.MapSet as MapSet
import qualified Common.Lib.Rel as Rel

import qualified Data.Set as Set

import CASL.AS_Basic_CASL
import CASL.Sign

import Control.Exception

predefinedSign :: Sign DL_FORMULA CASL_DLSign
predefinedSign = toCASL_DL_Sign
  . assert (Set.member topSortD $ sortSet dataSig_CASL)
  $ foldl (addSig (\ _ _ -> ())) (emptySign ())
        [dataSig_CASL, predefined_symbols]

toCASL_DL_Sign :: Sign (FORMULA ()) ()
               -> Sign DL_FORMULA CASL_DLSign
toCASL_DL_Sign sig = (emptySign emptyCASL_DLSign)
      { sortRel = sortRel sig
      , opMap = opMap sig
      , assocOps = assocOps sig
      , predMap = predMap sig }

topSort :: SORT
topSort = stringToId "Thing"

topSortD :: SORT
topSortD = stringToId "DATA"

predefined_symbols :: Sign (FORMULA ()) ()
predefined_symbols = (emptySign ())
  { sortRel = Rel.insertKey topSort Rel.empty
  , predMap = MapSet.insert (stringToId "Nothing")
              (PredType [topSort]) MapSet.empty }

dataSig_CASL :: Sign (FORMULA ()) ()
dataSig_CASL =
  (inlineSign CASL
