{-# OPTIONS -fvia-C #-}
{- |
Module      :  $Header$
Copyright   :  (c) Klaus Luettich, Uni Bremen 2004
License     :  similar to LGPL, see HetCATS/LICENSE.txt or LIZENZ.txt

Maintainer  :  luettich@tzi.de
Stability   :  provisional
Portability :  portable

Predefined signature part of CASL_DL.
-}

{- 

 todo:

-}

module CASL_DL.PredefinedSign(predefinedSign) where

import CASL_DL.AS_CASL_DL
import CASL_DL.Sign

import Common.Id

import qualified Common.Lib.Map as Map
import qualified Common.Lib.Rel as Rel
import qualified Common.Lib.Set as Set

import CASL.AS_Basic_CASL
import CASL.Sign

predefinedSign :: Sign DL_FORMULA CASL_DLSign
predefinedSign = toCASL_DL_Sign $
   foldl (addSig (\ _ _ -> ())) (emptySign ()) 
           [dataSig_CASL,predefined_symbols] 

toCASL_DL_Sign :: Sign (FORMULA ()) () 
               -> Sign DL_FORMULA CASL_DLSign
toCASL_DL_Sign sig = 
    (emptySign emptyCASL_DLSign) 
      { sortSet = sortSet sig
      , sortRel = sortRel sig
      , opMap = opMap sig
      , assocOps = assocOps sig
      , predMap = predMap sig
      }

predefined_symbols :: Sign (FORMULA ()) ()
predefined_symbols = 
    ((emptySign ()){ sortSet =
                      Set.singleton
                        (Id [Token "Thing" nullRange] [] nullRange)
                   , predMap = 
                       Map.singleton (Id [Token "Nothing" nullRange] [] 
                                         nullRange) 
                           (Set.singleton
                              (PredType  [Id [Token "Thing" nullRange] [] 
                                             nullRange]))
                   })

dataSig_CASL :: Sign (FORMULA ()) ()
dataSig_CASL = 
  (inlineSign CASL 
